APIKeySetup = {
	name: "API Key Setup"
	nameType: ""
	wight: []
	req = {}
}

APIKeyRestrictions = {
	name: "API Key Restrictions"
	nameType: ""
	wight: []
	req = {}
}

EnablingAccounts = {
	name: "Enabling Accounts"
	nameType: ""
	wight: []
	req = {}
}

APILibrary = {
	name: "API Library"
	nameType: ""
	wight: []
	req = {}
}

ContactUs = {
	name: "Contact Us"
	nameType: ""
	wight: []
	req = {}
}

GeneralAPIInformation = {
	name: "General API Information"
	nameType: ""
	wight: []
	req = {
	
		"code" :  number , // 1121  
	
		"msg" :  string , // "Invalid symbol." 
	
		
		}
	
	
}

LIMITS = {
	name: "LIMITS"
	nameType: ""
	wight: []
	req = {}
}

DataSources = {
	name: "Data Sources"
	nameType: ""
	wight: []
	req = {}
}

Endpointsecuritytype = {
	name: "Endpoint security type"
	nameType: ""
	wight: []
	// Security Type Description
	params : {
		NONE : Endpoint can be accessed freely.
		TRADE : Endpoint requires sending a valid API-Key and signature.
		MARGIN : Endpoint requires sending a valid API-Key and signature.
		USER_DATA : Endpoint requires sending a valid API-Key and signature.
		USER_STREAM : Endpoint requires sending a valid API-Key.
		MARKET_DATA : Endpoint requires sending a valid API-Key.
	}
	req = {}
}

SIGNED = {
	name: "SIGNED (TRADE, USER_DATA, AND MARGIN)"
	nameType: "TRADE, USER_DATA, AND MARGIN"
	wight: []
	req = ( (  number , // 1000 ) 
	 ( )  number , // ) 
	
	{
	
		// process request 
	
		
		}
	
	{
	
		// reject request 
	
		
		}
	
	"symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559" "NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j" 
	
	"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A" 
	
	"symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559" "NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j" 
	
	"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A" 
	
	"symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTCquantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559" "NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j" 
	
	"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A" 
	
	"put your own API Key here" 
	
	"test-prv-key.pem" 
	
	"POST" 
	
	"api/v3/order" 
	
	"symbol=BTCUSDT&amp;side=SELL&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.2" 
	
	" &amp;timestamp=  string , // " 
	
	" " 
	
	" " 
	
	"X-MBX-APIKEY:  "  string , // " " 
	
	"https://api.binance.com/ ?  string , // " 
	
	"signature= " 
	
	
}

PublicAPIDefinitions = {
	name: "Public API Definitions"
	nameType: ""
	wight: []
	req = {
	
		"rateLimitType" :  string , // "REQUEST_WEIGHT"  
	
		"interval" :  string , // "MINUTE"  
	
		"intervalNum" :  number , // 1  
	
		"limit" :  number , // 1200 
	
		
		}
	
	{
	
		"rateLimitType" :  string , // "ORDERS"  
	
		"interval" :  string , // "SECOND"  
	
		"intervalNum" :  number , // 10  
	
		"limit" :  number , // 100 
	
		
		},
	
	{
	
		"rateLimitType" :  string , // "ORDERS"  
	
		"interval" :  string , // "DAY"  
	
		"intervalNum" :  number , // 1  
	
		"limit" :  number , // 200000 
	
		
		}
	
	{
	
		"rateLimitType" :  string , // "RAW_REQUESTS"  
	
		"interval" :  string , // "MINUTE"  
	
		"intervalNum" :  number , // 5  
	
		"limit" :  number , // 5000 
	
		
		}
	
	
}

Filters = {
	name: "Filters"
	nameType: ""
	wight: []
	req = {
	
		"filterType" :  string , // "PRICE_FILTER"  
	
		"minPrice" :  NumberString , // "0.00000100"  
	
		"maxPrice" :  NumberString , // "100000.00000000"  
	
		"tickSize" :  NumberString , // "0.00000100" 
	
		
		}
	
	{
	
		"filterType" :  string , // "PERCENT_PRICE"  
	
		"multiplierUp" :  NumberString , // "1.3000"  
	
		"multiplierDown" :  NumberString , // "0.7000"  
	
		"avgPriceMins" :  number , // 5 
	
		
		}
	
	{
	
		"filterType" :  string , // "PERCENT_PRICE_BY_SIDE"  
	
		"bidMultiplierUp" :  NumberString , // "1.2"  
	
		"bidMultiplierDown" :  NumberString , // "0.2"  
	
		"askMultiplierUp" :  NumberString , // "5"  
	
		"askMultiplierDown" :  NumberString , // "0.8"  
	
		"avgPriceMins" :  number , // 1 
	
		
		}
	
	{
	
		"filterType" :  string , // "LOT_SIZE"  
	
		"minQty" :  NumberString , // "0.00100000"  
	
		"maxQty" :  NumberString , // "100000.00000000"  
	
		"stepSize" :  NumberString , // "0.00100000" 
	
		
		}
	
	{
	
		"filterType" :  string , // "MIN_NOTIONAL"  
	
		"minNotional" :  NumberString , // "0.00100000"  
	
		"applyToMarket" :  boolean , // true  
	
		"avgPriceMins" :  number , // 5 
	
		
		}
	
	{
	
		"filterType" :  string , // "NOTIONAL"  
	
		"minNotional" :  NumberString , // "10.00000000"  
	
		"applyMinToMarket" :  boolean , // false  
	
		"maxNotional" :  NumberString , // "10000.00000000"  
	
		"applyMaxToMarket" :  boolean , // false  
	
		"avgPriceMins" :  number , // 5 
	
		
		}
	
	{
	
		"filterType" :  string , // "ICEBERG_PARTS"  
	
		"limit" :  number , // 10 
	
		
		}
	
	{
	
		"filterType" :  string , // "MARKET_LOT_SIZE"  
	
		"minQty" :  NumberString , // "0.00100000"  
	
		"maxQty" :  NumberString , // "100000.00000000"  
	
		"stepSize" :  NumberString , // "0.00100000" 
	
		
		}
	
	{
	
		"filterType" :  string , // "MAX_NUM_ORDERS"  
	
		"maxNumOrders" :  number , // 25 
	
		
		}
	
	{
	
		"filterType" :  string , // "MAX_NUM_ALGO_ORDERS"  
	
		"maxNumAlgoOrders" :  number , // 5 
	
		
		}
	
	{
	
		"filterType" :  string , // "MAX_NUM_ICEBERG_ORDERS"  
	
		"maxNumIcebergOrders" :  number , // 5 
	
		
		}
	
	{
	
		"filterType" :  string , // "MAX_POSITION"  
	
		"maxPosition" :  NumberString , // "10.00000000" 
	
		
		}
	
	{
	
		"filterType" :  string , // "TRAILING_DELTA"  
	
		"minTrailingAboveDelta" :  number , // 10  
	
		"maxTrailingAboveDelta" :  number , // 2000  
	
		"minTrailingBelowDelta" :  number , // 10  
	
		"maxTrailingBelowDelta" :  number , // 2000 
	
		
		}
	
	{
	
		"filterType" :  string , // "EXCHANGE_MAX_NUM_ORDERS"  
	
		"maxNumOrders" :  number , // 1000 
	
		
		}
	
	{
	
		"filterType" :  string , // "EXCHANGE_MAX_NUM_ALGO_ORDERS"  
	
		"maxNumAlgoOrders" :  number , // 200 
	
		
		}
	
	{
	
		"filterType" :  string , // "EXCHANGE_MAX_NUM_ICEBERG_ORDERS"  
	
		"maxNumIcebergOrders" :  number , // 10000 
	
		
		}
	
	
}

SystemStatus = {
	name: "System Status (System)"
	nameType: "System"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/system/status"
		HMAC : true
	}
	req = {
	
		"status" :  number , // 0  // 0: normal，1：system maintenance
	 
	
		"msg" :  string , // "normal" // "normal", "system_maintenance" 
	
		
		}
	
	
}

AllCoins&#39;Information = {
	name: "All Coins&#39; Information (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/capital/config/getall"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
		
	 {
	
			"coin" :  string , // "BTC"  
	
			"depositAllEnable" :  boolean , // true  
	
			"free" :  NumberString , // "0.08074558"  
	
			"freeze" :  NumberString , // "0.00000000"  
	
			"ipoable" :  NumberString , // "0.00000000"  
	
			"ipoing" :  NumberString , // "0.00000000"  
	
			"isLegalMoney" :  boolean , // false  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"name" :  string , // "Bitcoin"  
	
			"networkList" : [
				
	 {
	
					"addressRegex" :  string , // "^(bnb1)[0-9a-z]{38}$"  
	
					"coin" :  string , // "BTC"  
	
					"depositDesc" :  string , // "Wallet Maintenance, Deposit Suspended"  // shown only when "depositEnable" is false.
	 
	
					"depositEnable" :  boolean , // false  
	
					"isDefault" :  boolean , // false  
	
					"memoRegex" :  string , // "^[0-9A-Za-z\\-_]{1,120}$"  
	
					"minConfirm" :  number , // 1  // min number for balance confirmation
	 
	
					"name" :  string , // "BEP2"  
	
					"network" :  string , // "BNB"  
	
					"resetAddressStatus" :  boolean , // false  
	
					"specialTips" :  string , // "Both a MEMO and an Address are required to successfully deposit your BEP2-BTCB tokens to Binance."  
	
					"unLockConfirm" :  number , // 0  // confirmation number for balance unlock 
	 
	
					"withdrawDesc" :  string , // "Wallet Maintenance, Withdrawal Suspended"  // shown only when "withdrawEnable" is false.
	 
	
					"withdrawEnable" :  boolean , // false  
	
					"withdrawFee" :  NumberString , // "0.00000220"  
	
					"withdrawIntegerMultiple" :  NumberString , // "0.00000001"  
	
					"withdrawMax" :  NumberString , // "9999999999.99999999"  
	
					"withdrawMin" :  NumberString , // "0.00000440"  
	
					"sameAddress" :  boolean , // true  // If the coin needs to provide memo to withdraw
	 
	
					"estimatedArrivalTime" :  number , // 25  
	
					"busy" :  boolean , // false 
	
					
					},
	
				{
	
					"addressRegex" :  string , // "^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^(bc1)[0-9A-Za-z]{39,59}$"  
	
					"coin" :  string , // "BTC"  
	
					"depositEnable" :  boolean , // true  
	
					"isDefault" :  boolean , // true  
	
					"memoRegex" :  NumberString , // ""  
	
					"minConfirm" :  number , // 1  
	
					"name" :  string , // "BTC"  
	
					"network" :  string , // "BTC"  
	
					"resetAddressStatus" :  boolean , // false  
	
					"specialTips" :  NumberString , // ""  
	
					"unLockConfirm" :  number , // 2  
	
					"withdrawEnable" :  boolean , // true  
	
					"withdrawFee" :  NumberString , // "0.00050000"  
	
					"withdrawIntegerMultiple" :  NumberString , // "0.00000001"  
	
					"withdrawMax" :  NumberString , // "750"  
	
					"withdrawMin" :  NumberString , // "0.00100000"  
	
					"sameAddress" :  boolean , // false  
	
					"estimatedArrivalTime" :  number , // 25  
	
					"busy" :  boolean , // false 
	
					
					}
	
				
				],
	
			"storage" :  NumberString , // "0.00000000"  
	
			"trading" :  boolean , // true  
	
			"withdrawAllEnable" :  boolean , // true  
	
			"withdrawing" :  NumberString , // "0.00000000" 
	
			
			}
	
		
		]
	
	
}

DailyAccountSnapshot = {
	name: "Daily Account Snapshot (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 2400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/accountSnapshot"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		type : STRING // &quot;SPOT&quot;, &quot;MARGIN&quot;, &quot;FUTURES&quot;
		startTime? : LONG
		endTime? : LONG
		limit? : INT // min 7, max 30, default 7
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
		"code" :  number , // 200  // 200 for success; others are error codes
	 
	
		"msg" :  NumberString , // ""  // error message
	 
	
		"snapshotVos" :[
			
	 {
	
				"data" :{
	
					"balances" :[
						
	 {
	
							"asset" :  string , // "BTC"  
	
							"free" :  NumberString , // "0.09905021"  
	
							"locked" :  NumberString , // "0.00000000" 
	
							
							},
	
						{
	
							"asset" :  string , // "USDT"  
	
							"free" :  NumberString , // "1.89109409"  
	
							"locked" :  NumberString , // "0.00000000" 
	
							
							}
	
						
						],
	
					"totalAssetOfBtc" :  NumberString , // "0.09942700" 
	
					
					},
	
				"type" :  string , // "spot"  
	
				"updateTime" :  number , // 1576281599000 
	
				
				}
	
			
			]
	
		
		}
	
	{
	
		"code" :  number , // 200  // 200 for success; others are error codes
	 
	
		"msg" :  NumberString , // ""  // error message
	 
	
		"snapshotVos" :[
			
	 {
	
				"data" :{
	
					"marginLevel" :  NumberString , // "2748.02909813"  
	
					"totalAssetOfBtc" :  NumberString , // "0.00274803"  
	
					"totalLiabilityOfBtc" :  NumberString , // "0.00000100"  
	
					"totalNetAssetOfBtc" :  NumberString , // "0.00274750"  
	
					"userAssets" :[
						
	 {
	
							"asset" :  string , // "XRP"  
	
							"borrowed" :  NumberString , // "0.00000000"  
	
							"free" :  NumberString , // "1.00000000"  
	
							"interest" :  NumberString , // "0.00000000"  
	
							"locked" :  NumberString , // "0.00000000"  
	
							"netAsset" :  NumberString , // "1.00000000" 
	
							
							}
	
						
						]
	
					
					},
	
				"type" :  string , // "margin"  
	
				"updateTime" :  number , // 1576281599000 
	
				
				}
	
			
			]
	
		
		}
	
	{
	
		"code" :  number , // 200  // 200 for success; others are error codes
	 
	
		"msg" :  NumberString , // ""  // error message
	 
	
		"snapshotVos" :[
			
	 {
	
				"data" :{
	
					"assets" :[
						
	 {
	
							"asset" :  string , // "USDT"  
	
							"marginBalance" :  NumberString , // "118.99782335"  // Not real-time data, can ignore
	 
	
							"walletBalance" :  NumberString , // "120.23811389" 
	
							
							}
	
						
						],
	
					"position" :[
						
	 {
	
							"entryPrice" :  NumberString , // "7130.41000000"  
	
							"markPrice" :  NumberString , // "7257.66239673"  
	
							"positionAmt" :  NumberString , // "0.01000000"  
	
							"symbol" :  string , // "BTCUSDT"  
	
							"unRealizedProfit" :  NumberString , // "1.24029054" // Only show the value at the time of opening the position 
	
							
							}
	
						
						]
	
					
					},
	
				"type" :  string , // "futures"  
	
				"updateTime" :  number , // 1576281599000 
	
				
				}
	
			
			]
	
		
		}
	
	
}

DisableFastWithdrawSwitch = {
	name: "Disable Fast Withdraw Switch (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/account/disableFastWithdrawSwitch"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {}
}

EnableFastWithdrawSwitch = {
	name: "Enable Fast Withdraw Switch (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/account/enableFastWithdrawSwitch"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {}
}

Withdraw = {
	name: "Withdraw(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 600
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/capital/withdraw/apply"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		coin : STRING
		withdrawOrderId? : STRING // client id for withdraw
		network? : STRING
		address : STRING
		addressTag? : STRING // Secondary address identifier for coins like XRP,XMR etc.
		amount : DECIMAL
		transactionFeeFlag? : BOOLEAN // When making internal transfer, 
		name? : STRING // Description of the address. Space in name should be encoded into 
		walletType? : INTEGER // The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current &quot;selected wallet&quot; under wallet-&gt;Fiat and Spot/Funding-&gt;Deposit
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
		"id" :  string , // "7213fea8e94b4a5593d507237e5a555b" 
	
		
		}
	
	
}

DepositHistory = {
	name: "Deposit History (supporting network)"
	nameType: "supporting network"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/capital/deposit/hisrec"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		coin? : STRING
		status? : INT // 0(0:pending,6: credited but cannot withdraw, 7=Wrong Deposit,8=Waiting User confirm, 1:success)
		startTime? : LONG // Default: 90 days from current timestamp
		endTime? : LONG // Default: present timestamp
		offset? : INT // Default:0
		limit? : INT // Default:1000, Max:1000
		recvWindow? : LONG
		timestamp : LONG
		txId? : STRING
	}
	req = [
		
	 {
	
			"id" :  NumberString , // "769800519366885376"  
	
			"amount" :  NumberString , // "0.001"  
	
			"coin" :  string , // "BNB"  
	
			"network" :  string , // "BNB"  
	
			"status" :  number , // 0  
	
			"address" :  string , // "bnb136ns6lfw4zs5hg4n85vdthaad7hq5m4gtkgf23"  
	
			"addressTag" :  NumberString , // "101764890"  
	
			"txId" :  string , // "98A3EA560C6B3336D348B6C83F0F95ECE4F1F5919E94BD006E5BF3BF264FACFC"  
	
			"insertTime" :  number , // 1661493146000  
	
			"transferType" :  number , // 0  
	
			"confirmTimes" :  string , // "1/1"  
	
			"unlockConfirm" :  number , // 0  
	
			"walletType" :  number , // 0 
	
			
			},
	
		{
	
			"id" :  NumberString , // "769754833590042625"  
	
			"amount" :  NumberString , // "0.50000000"  
	
			"coin" :  string , // "IOTA"  
	
			"network" :  string , // "IOTA"  
	
			"status" :  number , // 1  
	
			"address" :  string , // "SIZ9VLMHWATXKV99LH99CIGFJFUMLEHGWVZVNNZXRJJVWBPHYWPPBOSDORZ9EQSHCZAMPVAPGFYQAUUV9DROOXJLNW"  
	
			"addressTag" :  NumberString , // ""  
	
			"txId" :  string , // "ESBFVQUTPIWQNJSPXFNHNYHSQNTGKRVKPRABQWTAXCDWOAKDKYWPTVG9BGXNVNKTLEJGESAVXIKIZ9999"  
	
			"insertTime" :  number , // 1599620082000  
	
			"transferType" :  number , // 0  
	
			"confirmTimes" :  string , // "1/1"  
	
			"unlockConfirm" :  number , // 0  
	
			"walletType" :  number , // 0 
	
			
			}
	
		
		]
	
	
}

WithdrawHistory = {
	name: "Withdraw History (supporting network)"
	nameType: "supporting network"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/capital/withdraw/history"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		coin? : STRING
		withdrawOrderId? : STRING
		status? : INT // 0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6:Completed)
		offset? : INT
		limit? : INT // Default: 1000, Max: 1000
		startTime? : LONG // Default: 90 days from current timestamp
		endTime? : LONG // Default: present timestamp
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
		
	 {
	
			"id" :  string , // "b6ae22b3aa844210a7041aee7589627c"  // Withdrawal id in Binance
	 
	
			"amount" :  NumberString , // "8.91000000"  // withdrawal amount
	 
	
			"transactionFee" :  NumberString , // "0.004"  // transaction fee
	 
	
			"coin" :  string , // "USDT"  
	
			"status" :  number , // 6  
	
			"address" :  NumberString , // "0x94df8b352de7f46f64b01d3666bf6e936e44ce60"  
	
			"txId" :  NumberString , // "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268" // withdrawal transaction id 
	
			"applyTime" :  string , // "2019-10-12 11:12:02"  // UTC time
	 
	
			"network" :  string , // "ETH"  
	
			"transferType" :  number , // 0 // 1 for internal transfer, 0 for external transfer    
	
			"withdrawOrderId" :  string , // "WITHDRAWtest123"  // // will not be returned if there's no withdrawOrderId for this withdraw.
	 
	
			"info" :  string , // "The address is not valid. Please confirm with the recipient"  // reason for withdrawal failure
	 
	
			"confirmNo" :  number , // 3  // confirm times for withdraw
	 
	
			"walletType" :  number , // 1  //1: Funding Wallet 0:Spot Wallet
	 
	
			"txKey" :  NumberString , // ""  
	
			"completeTime" :  string , // "2023-03-23 16:52:41" // complete UTC time when user's asset is deduct from withdrawing, only if status =  6(success) 
	
			
			},
	
		{
	
			"id" :  string , // "156ec387f49b41df8724fa744fa82719"  
	
			"amount" :  NumberString , // "0.00150000"  
	
			"transactionFee" :  NumberString , // "0.004"  
	
			"coin" :  string , // "BTC"  
	
			"status" :  number , // 6  
	
			"address" :  string , // "1FZdVHtiBqMrWdjPyRPULCUceZPJ2WLCsB"  
	
			"txId" :  string , // "60fd9007ebfddc753455f95fafa808c4302c836e4d1eebc5a132c36c1d8ac354" 
	
			"applyTime" :  string , // "2019-09-24 12:43:45"  
	
			"network" :  string , // "BTC"  
	
			"transferType" :  number , // 0  
	
			"info" :  NumberString , // ""  
	
			"confirmNo" :  number , // 2  
	
			"walletType" :  number , // 1  
	
			"txKey" :  NumberString , // ""  
	
			"completeTime" :  string , // "2023-03-23 16:52:41" 
	
			
			}
	
		
		]
	
	
}

DepositAddress = {
	name: "Deposit Address (supporting network)"
	nameType: "supporting network"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/capital/deposit/address"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		coin : STRING
		network? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
		"address" :  string , // "1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv"  
	
		"coin" :  string , // "BTC"  
	
		"tag" :  NumberString , // ""  
	
		"url" :  string , // "https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv" 
	
		
		}
	
	
}

AccountStatus = {
	name: "Account Status (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/account/status"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
		"data" :  string , // "Normal" 
	
		
		}
	
	
}

AccountAPITradingStatus = {
	name: "Account API Trading Status (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/account/apiTradingStatus"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
		"data" : {
	 // API trading status detail 
	
			"isLocked" :  boolean , // false  // API trading function is locked or not
	 
	
			"plannedRecoverTime" :  number , // 0  // If API trading function is locked, this is the planned recover time
	 
	
			"triggerCondition" : {
	
				"GCR" :  number , // 150  // Number of GTC orders
	 
	
				"IFER" :  number , // 150  // Number of FOK/IOC orders
	 
	
				"UFR" :  number , // 300 // Number of orders 
	
				
				},
	
			"updateTime" :  number , // 1547630471725 
	
			
			}
	
		
		}
	
	
}

DustLog = {
	name: "DustLog(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/asset/dribblet"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime? : LONG
		endTime? : LONG
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
		"total" :  number , // 8  //Total counts of exchange
	 
	
		"userAssetDribblets" : [
			
	 {
	
				"operateTime" :  number , // 1615985535000  
	
				"totalTransferedAmount" :  NumberString , // "0.00132256"  // Total transfered BNB amount for this exchange.
	 
	
				"totalServiceChargeAmount" :  NumberString , // "0.00002699"  //Total service charge amount for this exchange.
	 
	
				"transId" :  number , // 45178372831  
	
				"userAssetDribbletDetails" : [ //Details of  this exchange.
	
	
					
	 {
	
						"transId" :  number , // 4359321  
	
						"serviceChargeAmount" :  NumberString , // "0.000009"  
	
						"amount" :  NumberString , // "0.0009"  
	
						"operateTime" :  number , // 1615985535000  
	
						"transferedAmount" :  NumberString , // "0.000441"  
	
						"fromAsset" :  string , // "USDT" 
	
						
						},
	
					{
	
						"transId" :  number , // 4359321  
	
						"serviceChargeAmount" :  NumberString , // "0.00001799"  
	
						"amount" :  NumberString , // "0.0009"  
	
						"operateTime" :  number , // 1615985535000  
	
						"transferedAmount" :  NumberString , // "0.00088156"  
	
						"fromAsset" :  string , // "ETH" 
	
						
						}
	
					
					]
	
				
				},
	
			{
	
				"operateTime" :  number , // 1616203180000  
	
				"totalTransferedAmount" :  NumberString , // "0.00058795"  
	
				"totalServiceChargeAmount" :  NumberString , // "0.000012"  
	
				"transId" :  number , // 4357015  
	
				"userAssetDribbletDetails" : [
					
	 {
	
						"transId" :  number , // 4357015  
	
						"serviceChargeAmount" :  NumberString , // "0.00001"  
	
						"amount" :  NumberString , // "0.001"  
	
						"operateTime" :  number , // 1616203180000  
	
						"transferedAmount" :  NumberString , // "0.00049"  
	
						"fromAsset" :  string , // "USDT" 
	
						
						},
	
					{
	
						"transId" :  number , // 4357015  
	
						"serviceChargeAmount" :  NumberString , // "0.000002"  
	
						"amount" :  NumberString , // "0.0001"  
	
						"operateTime" :  number , // 1616203180000  
	
						"transferedAmount" :  NumberString , // "0.00009795"  
	
						"fromAsset" :  string , // "ETH" 
	
						
						}
	
					
					]
	
				
				}
	
			
			]
	
		
		}
	
	
	}
	
	
}

GetAssetsThatCanBeConvertedIntoBNB = {
	name: "Get Assets That Can Be Converted Into BNB (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/asset/dust-btc"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"details" : [
		
	 {
	
			"asset" :  string , // "ADA"  
	
			"assetFullName" :  string , // "ADA"  
	
			"amountFree" :  NumberString , // "6.21"  //Convertible amount
	 
	
			"toBTC" :  NumberString , // "0.00016848"  //BTC amount
	 
	
			"toBNB" :  NumberString , // "0.01777302"  //BNB amount（Not deducted commission fee）
	 
	
			"toBNBOffExchange" :  NumberString , // "0.01741756"  //BNB amount（Deducted commission fee）
	 
	
			"exchange" :  NumberString , // "0.00035546" //Commission fee 
	
			
			}
	
		
		],
	
	"totalTransferBtc" :  NumberString , // "0.00016848"  
	
	"totalTransferBNB" :  NumberString , // "0.01777302"  
	
	"dribbletPercentage" :  NumberString , // "0.02" //Commission fee 
	
	
	}
	
	
}

DustTransfer = {
	name: "Dust Transfer (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 10
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/asset/dust"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : ARRAY // The asset being converted. For example: asset=BTC,USDT
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"totalServiceCharge" :  NumberString , // "0.02102542"  
	
	"totalTransfered" :  NumberString , // "1.05127099"  
	
	"transferResult" :[
		
	 {
	
			"amount" :  NumberString , // "0.03000000"  
	
			"fromAsset" :  string , // "ETH"  
	
			"operateTime" :  number , // 1563368549307  
	
			"serviceChargeAmount" :  NumberString , // "0.00500000"  
	
			"tranId" :  number , // 2970932918  
	
			"transferedAmount" :  NumberString , // "0.25000000" 
	
			
			},
	
		{
	
			"amount" :  NumberString , // "0.09000000"  
	
			"fromAsset" :  string , // "LTC"  
	
			"operateTime" :  number , // 1563368549404  
	
			"serviceChargeAmount" :  NumberString , // "0.01548000"  
	
			"tranId" :  number , // 2970932918  
	
			"transferedAmount" :  NumberString , // "0.77400000" 
	
			
			},
	
		{
	
			"amount" :  NumberString , // "248.61878453"  
	
			"fromAsset" :  string , // "TRX"  
	
			"operateTime" :  number , // 1563368549489  
	
			"serviceChargeAmount" :  NumberString , // "0.00054542"  
	
			"tranId" :  number , // 2970932918  
	
			"transferedAmount" :  NumberString , // "0.02727099" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

AssetDividendRecord = {
	name: "Asset Dividend Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/asset/assetDividend"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 20, max 500
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" :[
		
	 {
	
			"id" :  number , // 1637366104  
	
			"amount" :  NumberString , // "10.00000000"  
	
			"asset" :  string , // "BHFT"  
	
			"divTime" :  number , // 1563189166000  
	
			"enInfo" :  string , // "BHFT distribution"  
	
			"tranId" :  number , // 2968885920 
	
			
			},
	
		{
	
			"id" :  number , // 1631750237  
	
			"amount" :  NumberString , // "10.00000000"  
	
			"asset" :  string , // "BHFT"  
	
			"divTime" :  number , // 1563189165000  
	
			"enInfo" :  string , // "BHFT distribution"  
	
			"tranId" :  number , // 2968885920 
	
			
			}
	
		
		],
	
	"total" :  number , // 2 
	
	
	}
	
	
}

AssetDetail = {
	name: "Asset Detail (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/asset/assetDetail"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"CTR" : {
	
		"minWithdrawAmount" :  NumberString , // "70.00000000"  //min withdraw amount
	 
	
		"depositStatus" :  boolean , // false  //deposit status (false if ALL of networks' are false)
	 
	
		"withdrawFee" :  number , // 35  // withdraw fee
	 
	
		"withdrawStatus" :  boolean , // true  //withdraw status (false if ALL of networks' are false)
	 
	
		"depositTip" :  string , // "Delisted, Deposit Suspended" //reason 
	
		
		},
	
	"SKY" : {
	
		"minWithdrawAmount" :  NumberString , // "0.02000000"  
	
		"depositStatus" :  boolean , // true  
	
		"withdrawFee" :  number , // 0.01  
	
		"withdrawStatus" :  boolean , // true 
	
		
		}
	
	
	}
	
	
}

TradeFee = {
	name: "Trade Fee (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/asset/tradeFee"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "ADABNB"  
	
		"makerCommission" :  NumberString , // "0.001"  
	
		"takerCommission" :  NumberString , // "0.001" 
	
		
		},
	
	{
	
		"symbol" :  string , // "BNBBTC"  
	
		"makerCommission" :  NumberString , // "0.001"  
	
		"takerCommission" :  NumberString , // "0.001" 
	
		
		}
	
	
	]
	
	
}

UserUniversalTransfer = {
	name: "User Universal Transfer (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 900
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/asset/transfer"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		type : ENUM
		asset : STRING
		amount : DECIMAL
		fromSymbol? : STRING
		toSymbol? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"tranId" :  number , // 13526853623 
	
	
	}
	
	
}

QueryUserUniversalTransferHistory = {
	name: "Query User Universal Transfer History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/asset/transfer"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		type : ENUM
		startTime? : LONG
		endTime? : LONG
		current? : INT // Default 1
		size? : INT // Default 10, Max 100
		fromSymbol? : STRING
		toSymbol? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 2  
	
	"rows" :[
		
	 {
	
			"asset" :  string , // "USDT"  
	
			"amount" :  NumberString , // "1"  
	
			"type" :  string , // "MAIN_UMFUTURE"  
	
			"status" :  string , // "CONFIRMED"  // status: CONFIRMED / FAILED / PENDING
	 
	
			"tranId" :  number , // 11415955596  
	
			"timestamp" :  number , // 1544433328000 
	
			
			},
	
		{
	
			"asset" :  string , // "USDT"  
	
			"amount" :  NumberString , // "2"  
	
			"type" :  string , // "MAIN_UMFUTURE"  
	
			"status" :  string , // "CONFIRMED"  
	
			"tranId" :  number , // 11366865406  
	
			"timestamp" :  number , // 1544433328000 
	
			
			}
	
		
		]
	
	
	}
	
	
}

FundingWallet = {
	name: "Funding Wallet (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/asset/get-funding-asset"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		needBtcValuation? : STRING // true or false
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"asset" :  string , // "USDT"  
	
		"free" :  NumberString , // "1"  // avalible balance
	 
	
		"locked" :  NumberString , // "0"  // locked asset
	 
	
		"freeze" :  NumberString , // "0"  // freeze asset
	 
	
		"withdrawing" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0.00000091" 
	
		
		}
	
	
	]
	
	
}

UserAsset = {
	name: "User Asset (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v3/asset/getUserAsset"
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING // If asset is blank, then query all positive assets user have.
		needBtcValuation? : BOOLEAN // Whether need btc valuation or not.
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"asset" :  string , // "AVAX"  
	
		"free" :  NumberString , // "1"  
	
		"locked" :  NumberString , // "0"  
	
		"freeze" :  NumberString , // "0"  
	
		"withdrawing" :  NumberString , // "0"  
	
		"ipoable" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0" 
	
		
		},
	
	{
	
		"asset" :  string , // "BCH"  
	
		"free" :  NumberString , // "0.9"  
	
		"locked" :  NumberString , // "0"  
	
		"freeze" :  NumberString , // "0"  
	
		"withdrawing" :  NumberString , // "0"  
	
		"ipoable" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0" 
	
		
		},
	
	{
	
		"asset" :  string , // "BNB"  
	
		"free" :  NumberString , // "887.47061626"  
	
		"locked" :  NumberString , // "0"  
	
		"freeze" :  NumberString , // "10.52"  
	
		"withdrawing" :  NumberString , // "0.1"  
	
		"ipoable" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0" 
	
		
		},
	
	{
	
		"asset" :  string , // "BUSD"  
	
		"free" :  NumberString , // "9999.7"  
	
		"locked" :  NumberString , // "0"  
	
		"freeze" :  NumberString , // "0"  
	
		"withdrawing" :  NumberString , // "0"  
	
		"ipoable" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0" 
	
		
		},
	
	{
	
		"asset" :  string , // "SHIB"  
	
		"free" :  NumberString , // "532.32"  
	
		"locked" :  NumberString , // "0"  
	
		"freeze" :  NumberString , // "0"  
	
		"withdrawing" :  NumberString , // "0"  
	
		"ipoable" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0" 
	
		
		},
	
	{
	
		"asset" :  string , // "USDT"  
	
		"free" :  NumberString , // "50300000001.44911105"  
	
		"locked" :  NumberString , // "0"  
	
		"freeze" :  NumberString , // "0"  
	
		"withdrawing" :  NumberString , // "0"  
	
		"ipoable" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0" 
	
		
		},
	
	{
	
		"asset" :  string , // "WRZ"  
	
		"free" :  NumberString , // "1"  
	
		"locked" :  NumberString , // "0"  
	
		"freeze" :  NumberString , // "0"  
	
		"withdrawing" :  NumberString , // "0"  
	
		"ipoable" :  NumberString , // "0"  
	
		"btcValuation" :  NumberString , // "0" 
	
		
		}
	
	
	]
	
	
}

BUSDConvert = {
	name: "BUSD Convert (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 5
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/asset/convert-transfer"
	}
	// Name Type Mandatory Description
	params : {
		clientTranId : STRING // The unique user-defined transaction id, min length 20
		asset : STRING // The current asset
		amount : BigDecimal // The amount must be positive number
		targetAsset : String // Target asset you want to convert
		accountType? : String // Only 
	}
	req = {
	
	"tranId" :  number , // 118263407119  
	
	"status" :  string , // "S" 
	
	
	}
	
	
}

BUSDConvertHistory = {
	name: "BUSD Convert History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 5
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/asset/convert-transfer/queryByPage"
	}
	// Name Type Mandatory Description
	params : {
		tranId? : LONG // The transaction id
		clientTranId? : STRING // The user-defined transaction id
		asset? : STRING // If it is blank, we will match deducted asset and target asset.
		startTime : LONG // inclusive, unit: ms
		endTime : LONG // exclusive, unit: ms
		accountType? : STRING // MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet
		current? : INTEGER // current page, default 1, the min value is 1
		size? : INTEGER // page size, default 10, the max value is 100
	}
	req = {
	
	"total" :  number , // 3  
	
	"rows" : 
	
	[
		
	 {
	
			"tranId" :  number , // 118263615991  
	
			"type" :  number , // 244  
	
			"time" :  number , // 1664442078000  
	
			"deductedAsset" :  string , // "BUSD"  
	
			"deductedAmount" :  NumberString , // "1"  
	
			"targetAsset" :  string , // "USDC"  
	
			"targetAmount" :  NumberString , // "1"  
	
			"status" :  string , // "S"  
	
			"accountType" :  string , // "MAIN" 
	
			},{ 
	
			"tranId" :  number , // 118263598801  
	
			"type" :  number , // 244  
	
			"time" :  number , // 1664442061000  
	
			"deductedAsset" :  string , // "BUSD"  
	
			"deductedAmount" :  NumberString , // "1"  
	
			"targetAsset" :  string , // "USDC"  
	
			"targetAmount" :  NumberString , // "1"  
	
			"status" :  string , // "S"  
	
			"accountType" :  string , // "MAIN" 
	
			},{ 
	
			"tranId" :  number , // 118263407119  
	
			"type" :  number , // 244  
	
			"time" :  number , // 1664441820000  
	
			"deductedAsset" :  string , // "BUSD"  
	
			"deductedAmount" :  NumberString , // "1"  
	
			"targetAsset" :  string , // "USDC"  
	
			"targetAmount" :  NumberString , // "1"  
	
			"status" :  string , // "S"  
	
			"accountType" :  string , // "MAIN" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

GetCloudMiningpaymentandrefundhistory = {
	name: "Get Cloud-Mining payment and refund history (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 600
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage"
	}
	// Name Type Mandatory Description
	params : {
		tranId? : LONG // The transaction id
		clientTranId? : STRING // The unique flag
		asset? : STRING // If it is blank, we will query all assets
		startTime : LONG // inclusive, unit: ms
		endTime : LONG // exclusive, unit: ms
		current? : INTEGER // current page, default 1, the min value is 1
		size? : INTEGER // page size, default 10, the max value is 100
	}
	req = {
	
	"total" :  number , // 5  
	
	"rows" :[
		
	 {
	 "createTime" :  number , // 1667880112000  
	 "tranId" :  number , // 121230610120  
	 "type" :  number , // 248  
	 "asset" :  string , // "USDT"  
	 "amount" :  NumberString , // "25.0068"  
	 "status" :  string , // "S" 
			},
	
		{
	 "createTime" :  number , // 1666776366000  
	 "tranId" :  number , // 119991507468  
	 "type" :  number , // 249  
	 "asset" :  string , // "USDT"  
	 "amount" :  NumberString , // "0.027"  
	 "status" :  string , // "S" 
			},
	
		{
	 "createTime" :  number , // 1666764505000  
	 "tranId" :  number , // 119977966327  
	 "type" :  number , // 248  
	 "asset" :  string , // "USDT"  
	 "amount" :  NumberString , // "0.027"  
	 "status" :  string , // "S" 
			},
	
		{
	 "createTime" :  number , // 1666758189000  
	 "tranId" :  number , // 119973601721  
	 "type" :  number , // 248  
	 "asset" :  string , // "USDT"  
	 "amount" :  NumberString , // "0.018"  
	 "status" :  string , // "S" 
			},
	
		{
	 "createTime" :  number , // 1666757278000  
	 "tranId" :  number , // 119973028551  
	 "type" :  number , // 248  
	 "asset" :  string , // "USDT"  
	 "amount" :  NumberString , // "0.018"  
	 "status" :  string , // "S" 
			}
	
		
		]
	
	
	}
	
	
}

GetAPIKeyPermission = {
	name: "Get API Key Permission (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/account/apiRestrictions"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"ipRestrict" :  boolean , // false  
	
	"createTime" :  number , // 1623840271000  
	
	"enableWithdrawals" :  boolean , // false  // This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals
	 
	
	"enableInternalTransfer" :  boolean , // true  // This option authorizes this key to transfer funds between your master account and your sub account instantly
	 
	
	"permitsUniversalTransfer" :  boolean , // true  // Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization
	 
	
	"enableVanillaOptions" :  boolean , // false  //  Authorizes this key to Vanilla options trading
	 
	
	"enableReading" :  boolean , // true  
	
	"enableFutures" :  boolean , // false  //  API Key created before your futures account opened does not support futures API service
	 
	
	"enableMargin" :  boolean , // false  //  This option can be adjusted after the Cross Margin account transfer is completed
	 
	
	"enableSpotAndMarginTrading" :  boolean , // false  // Spot and margin trading
	 
	
	"tradingAuthorityExpirationTime" :  number , // 1628985600000 // Expiration time for spot and margin trading permission 
	
	
	}
	
	
}

Queryautoconvertingstablecoins = {
	name: "Query auto-converting stable coins (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 600
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/capital/contract/convertible-coins"
	}
	req = {
	
	"convertEnabled" :  boolean , // true  
	
	"coins" : [
		
	  string , // "USDC" 
	 
		
	  string , // "USDP" 
	 
		
	  string , // "TUSD"
		
	 
		],
	
	"exchangeRates" : {
	
		"USDC" :  NumberString , // "1"  
	
		"TUSD" :  NumberString , // "1"  
	
		"USDP" :  NumberString , // "1" 
	
		
		}
	
	
	}
	
	
}

SwitchonoffBUSDandstablecoinsconversion = {
	name: "Switch on/off BUSD and stable coins conversion (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 600
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/capital/contract/convertible-coins"
	}
	// Name Type Mandatory Description
	params : {
		coin : STRING // Must be USDC, USDP or TUSD
		enable : BOOLEAN // true: turn on the auto-conversion. false: turn off the auto-conversion
	}
	req = {}
}

CreateaVirtualSubaccount = {
	name: "Create a Virtual Sub-account(For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/sub-account/virtualSubAccount"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		subAccountString : STRING // Please input a string. We will create a virtual email using that string for you to register
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"email" :  string , // "addsdd_virtual@aasaixwqnoemail.com" 
	
	
	}
	
	
}

QuerySubaccountList = {
	name: "Query Sub-account List (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/sub-account/list"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email? : STRING
		isFreeze? : STRING // true or false
		page? : INT // Default value: 1
		limit? : INT // Default value: 1, Max value: 200
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"subAccounts" :[
		
	 {
	
			"email" :  string , // "testsub@gmail.com"  
	
			"isFreeze" :  boolean , // false  
	
			"createTime" :  number , // 1544433328000  
	
			"isManagedSubAccount" :  boolean , // false  
	
			"isAssetManagementSubAccount" :  boolean , // false 
	
			
			},
	
		{
	
			"email" :  string , // "virtual@oxebmvfonoemail.com"  
	
			"isFreeze" :  boolean , // false  
	
			"createTime" :  number , // 1544433328000  
	
			"isManagedSubAccount" :  boolean , // false  
	
			"isAssetManagementSubAccount" :  boolean , // false 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QuerySubaccountSpotAssetTransferHistory = {
	name: "Query Sub-account Spot Asset Transfer History (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/sub-account/sub/transfer/history"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		fromEmail? : STRING
		toEmail? : STRING
		startTime? : LONG
		endTime? : LONG
		page? : INT // Default value: 1
		limit? : INT // Default value: 500
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"from" :  string , // "aaa@test.com"  
	
		"to" :  string , // "bbb@test.com"  
	
		"asset" :  string , // "BTC"  
	
		"qty" :  NumberString , // "10"  
	
		"status" :  string , // "SUCCESS"  
	
		"tranId" :  number , // 6489943656  
	
		"time" :  number , // 1544433328000 
	
		
		},
	
	{
	
		"from" :  string , // "bbb@test.com"  
	
		"to" :  string , // "ccc@test.com"  
	
		"asset" :  string , // "ETH"  
	
		"qty" :  NumberString , // "2"  
	
		"status" :  string , // "SUCCESS"  
	
		"tranId" :  number , // 6489938713  
	
		"time" :  number , // 1544433328000 
	
		
		}
	
	
	]
	
	
}

QuerySubaccountFuturesAssetTransferHistory = {
	name: "Query Sub-account Futures Asset Transfer History (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/sub-account/futures/internalTransfer"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING
		futuresType : LONG // 1:USDT-margined Futures，2: Coin-margined Futures
		startTime? : LONG // Default return the history with in 100 days
		endTime? : LONG // Default return the history with in 100 days
		page? : INT // Default value: 1
		limit? : INT // Default value: 50, Max value: 500
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"success" :  boolean , // true  
	
	"futuresType" :  number , // 2  
	
	"transfers" :[
		
	 {
	
			"from" :  string , // "aaa@test.com"  
	
			"to" :  string , // "bbb@test.com"  
	
			"asset" :  string , // "BTC"  
	
			"qty" :  NumberString , // "1"  
	
			"tranId" :  number , // 11897001102  
	
			"time" :  number , // 1544433328000 
	
			
			},
	
		{
	
			"from" :  string , // "bbb@test.com"  
	
			"to" :  string , // "ccc@test.com"  
	
			"asset" :  string , // "ETH"  
	
			"qty" :  NumberString , // "2"  
	
			"tranId" :  number , // 11631474902  
	
			"time" :  number , // 1544433328000 
	
			
			}
	
		
		]
	
	
	}
	
	
}

SubaccountFuturesAssetTransfer = {
	name: "Sub-account Futures Asset Transfer (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/sub-account/futures/internalTransfer"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		fromEmail : STRING // Sender email
		toEmail : STRING // Recipient email
		futuresType : LONG // 1:USDT-margined Futures，2: Coin-margined Futures
		asset : STRING
		amount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"success" :  boolean , // true  
	
	"txnId" :  NumberString , // "2934662589" 
	
	
	}
	
	
}

QuerySubaccountAssets = {
	name: "Query Sub-account Assets (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "UID"
			data : 60
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v3/sub-account/assets"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING // Sub account email
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"balances" :[
		
	 {
	
			"asset" :  string , // "ADA"  
	
			"free" :  number , // 10000  
	
			"locked" :  number , // 0 
	
			
			},
	
		{
	
			"asset" :  string , // "BNB"  
	
			"free" :  number , // 10003  
	
			"locked" :  number , // 0 
	
			
			},
	
		{
	
			"asset" :  string , // "BTC"  
	
			"free" :  number , // 11467.6399  
	
			"locked" :  number , // 0 
	
			
			},
	
		{
	
			"asset" :  string , // "ETH"  
	
			"free" :  number , // 10004.995  
	
			"locked" :  number , // 0 
	
			
			},
	
		{
	
			"asset" :  string , // "USDT"  
	
			"free" :  number , // 11652.14213  
	
			"locked" :  number , // 0 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QuerySubaccountSpotAssetsSummary = {
	name: "Query Sub-account Spot Assets Summary (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email? : STRING // Sub account email
		page? : LONG // default 1
		size? : LONG // default 10, max 20
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"totalCount" :  number , // 2  
	
	"masterAccountTotalAsset" :  NumberString , // "0.23231201"  
	
	"spotSubUserAssetBtcVoList" :[
		
	 {
	
			"email" :  string , // "sub123@test.com"  
	
			"totalAsset" :  NumberString , // "9999.00000000" 
	
			
			},
	
		{
	
			"email" :  string , // "test456@test.com"  
	
			"totalAsset" :  NumberString , // "0.00000000" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

GetSubaccountDepositAddress = {
	name: "Get Sub-account Deposit Address (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/capital/deposit/subAddress"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING // Sub account email
		coin : STRING
		network? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"address" :  string , // "TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV"  
	
	"coin" :  string , // "USDT"  
	
	"tag" :  NumberString , // ""  
	
	"url" :  string , // "https://tronscan.org/#/address/TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV" 
	
	
	}
	
	
}

GetSubaccountDepositHistory = {
	name: "Get Sub-account Deposit History (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/capital/deposit/subHisrec"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING // Sub account email
		coin? : STRING
		status? : INT // 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
		startTime? : LONG
		endTime? : LONG
		limit? : INT
		offset? : INT // default:0
		recvWindow? : LONG
		timestamp : LONG
		txId? : STRING
	}
	req = [
	
	 {
	
		"id" :  NumberString , // "769800519366885376"  
	
		"amount" :  NumberString , // "0.001"  
	
		"coin" :  string , // "BNB"  
	
		"network" :  string , // "BNB"  
	
		"status" :  number , // 0  
	
		"address" :  string , // "bnb136ns6lfw4zs5hg4n85vdthaad7hq5m4gtkgf23"  
	
		"addressTag" :  NumberString , // "101764890"  
	
		"txId" :  string , // "98A3EA560C6B3336D348B6C83F0F95ECE4F1F5919E94BD006E5BF3BF264FACFC"  
	
		"insertTime" :  number , // 1661493146000  
	
		"transferType" :  number , // 0  
	
		"confirmTimes" :  string , // "1/1"  
	
		"unlockConfirm" :  number , // 0  
	
		"walletType" :  number , // 0 
	
		
		},
	
	{
	
		"id" :  NumberString , // "769754833590042625"  
	
		"amount" :  NumberString , // "0.50000000"  
	
		"coin" :  string , // "IOTA"  
	
		"network" :  string , // "IOTA"  
	
		"status" :  number , // 1  
	
		"address" :  string , // "SIZ9VLMHWATXKV99LH99CIGFJFUMLEHGWVZVNNZXRJJVWBPHYWPPBOSDORZ9EQSHCZAMPVAPGFYQAUUV9DROOXJLNW"  
	
		"addressTag" :  NumberString , // ""  
	
		"txId" :  string , // "ESBFVQUTPIWQNJSPXFNHNYHSQNTGKRVKPRABQWTAXCDWOAKDKYWPTVG9BGXNVNKTLEJGESAVXIKIZ9999"  
	
		"insertTime" :  number , // 1599620082000  
	
		"transferType" :  number , // 0  
	
		"confirmTimes" :  string , // "1/1"  
	
		"unlockConfirm" :  number , // 0  
	
		"walletType" :  number , // 0 
	
		
		}
	
	
	]
	
	
}

GetSubaccount&#39;sStatusonMarginFutures = {
	name: "Get Sub-account&#39;s Status on Margin/Futures (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/sub-account/status"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"email" :  string , // "123@test.com"  // user email
	 
	
		"isSubUserEnabled" :  boolean , // true  // true or false
	 
	
		"isUserActive" :  boolean , // true  // true or false
	 
	
		"insertTime" :  number , // 1570791523523  // sub account create time
	 
	
		"isMarginEnabled" :  boolean , // true  // true or false for margin
	 
	
		"isFutureEnabled" :  boolean , // true  // true or false for futures.
	 
	
		"mobile" :  number , // 1570791523523 // user mobile number 
	
		
		}
	
	
	]
	
	
}

EnableMarginforSubaccount = {
	name: "Enable Margin for Sub-account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/sub-account/margin/enable"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"email" :  string , // "123@test.com"  
	
	"isMarginEnabled" :  boolean , // true 
	
	
	}
	
	
}

GetDetailonSubaccount&#39;sMarginAccount = {
	name: "Get Detail on Sub-account&#39;s Margin Account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/sub-account/margin/account"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"email" :  string , // "123@test.com"  
	
	"marginLevel" :  NumberString , // "11.64405625"  
	
	"totalAssetOfBtc" :  NumberString , // "6.82728457"  
	
	"totalLiabilityOfBtc" :  NumberString , // "0.58633215"  
	
	"totalNetAssetOfBtc" :  NumberString , // "6.24095242"  
	
	"marginTradeCoeffVo" : 
	
	{
	
		"forceLiquidationBar" :  NumberString , // "1.10000000"  // Liquidation margin ratio
	 
	
		"marginCallBar" :  NumberString , // "1.50000000"  // Margin call margin ratio
	 
	
		"normalBar" :  NumberString , // "2.00000000" // Initial margin ratio 
	
		
		},
	
	"marginUserAssetVoList" : [
		
	 {
	
			"asset" :  string , // "BTC"  
	
			"borrowed" :  NumberString , // "0.00000000"  
	
			"free" :  NumberString , // "0.00499500"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "0.00499500" 
	
			
			},
	
		{
	
			"asset" :  string , // "BNB"  
	
			"borrowed" :  NumberString , // "201.66666672"  
	
			"free" :  NumberString , // "2346.50000000"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "2144.83333328" 
	
			
			},
	
		{
	
			"asset" :  string , // "ETH"  
	
			"borrowed" :  NumberString , // "0.00000000"  
	
			"free" :  NumberString , // "0.00000000"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "0.00000000" 
	
			
			},
	
		{
	
			"asset" :  string , // "USDT"  
	
			"borrowed" :  NumberString , // "0.00000000"  
	
			"free" :  NumberString , // "0.00000000"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "0.00000000" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

GetSummaryofSubaccount&#39;sMarginAccount = {
	name: "Get Summary of Sub-account&#39;s Margin Account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"totalAssetOfBtc" :  NumberString , // "4.33333333"  
	
	"totalLiabilityOfBtc" :  NumberString , // "2.11111112"  
	
	"totalNetAssetOfBtc" :  NumberString , // "2.22222221"  
	
	"subAccountList" :[
		
	 {
	
			"email" :  string , // "123@test.com"  
	
			"totalAssetOfBtc" :  NumberString , // "2.11111111"  
	
			"totalLiabilityOfBtc" :  NumberString , // "1.11111111"  
	
			"totalNetAssetOfBtc" :  NumberString , // "1.00000000" 
	
			
			},
	
		{
	
			"email" :  string , // "345@test.com"  
	
			"totalAssetOfBtc" :  NumberString , // "2.22222222"  
	
			"totalLiabilityOfBtc" :  NumberString , // "1.00000001"  
	
			"totalNetAssetOfBtc" :  NumberString , // "1.22222221" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

EnableFuturesforSubaccount = {
	name: "Enable Futures for Sub-account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/sub-account/futures/enable"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"email" :  string , // "123@test.com"  
	
	"isFuturesEnabled" :  boolean , // true // true or false 
	
	
	}
	
	
}

GetDetailonSubaccount&#39;sFuturesAccount = {
	name: "Get Detail on Sub-account&#39;s Futures Account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"email" :  string , // "abc@test.com"  
	
	"asset" :  string , // "USDT"  
	
	"assets" :[
		
	 {
	
			"asset" :  string , // "USDT"  
	
			"initialMargin" :  NumberString , // "0.00000000"  
	
			"maintenanceMargin" :  NumberString , // "0.00000000"  
	
			"marginBalance" :  NumberString , // "0.88308000"  
	
			"maxWithdrawAmount" :  NumberString , // "0.88308000"  
	
			"openOrderInitialMargin" :  NumberString , // "0.00000000"  
	
			"positionInitialMargin" :  NumberString , // "0.00000000"  
	
			"unrealizedProfit" :  NumberString , // "0.00000000"  
	
			"walletBalance" :  NumberString , // "0.88308000" 
	
			
			}
	
		
		],
	
	"canDeposit" :  boolean , // true  
	
	"canTrade" :  boolean , // true  
	
	"canWithdraw" :  boolean , // true  
	
	"feeTier" :  number , // 2  
	
	"maxWithdrawAmount" :  NumberString , // "0.88308000"  
	
	"totalInitialMargin" :  NumberString , // "0.00000000"  
	
	"totalMaintenanceMargin" :  NumberString , // "0.00000000"  
	
	"totalMarginBalance" :  NumberString , // "0.88308000"  
	
	"totalOpenOrderInitialMargin" :  NumberString , // "0.00000000"  
	
	"totalPositionInitialMargin" :  NumberString , // "0.00000000"  
	
	"totalUnrealizedProfit" :  NumberString , // "0.00000000"  
	
	"totalWalletBalance" :  NumberString , // "0.88308000"  
	
	"updateTime" :  number , // 1576756674610 
	
	
	}
	
	
}

GetSummaryofSubaccount&#39;sFuturesAccount = {
	name: "Get Summary of Sub-account&#39;s Futures Account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"totalInitialMargin" :  NumberString , // "9.83137400"  
	
	"totalMaintenanceMargin" :  NumberString , // "0.41568700"  
	
	"totalMarginBalance" :  NumberString , // "23.03235621"  
	
	"totalOpenOrderInitialMargin" :  NumberString , // "9.00000000"  
	
	"totalPositionInitialMargin" :  NumberString , // "0.83137400"  
	
	"totalUnrealizedProfit" :  NumberString , // "0.03219710"  
	
	"totalWalletBalance" :  NumberString , // "22.15879444"  
	
	"asset" :  string , // "USD"  // The sum of BUSD and USDT
	 
	
	"subAccountList" :[
		
	 {
	
			"email" :  string , // "123@test.com"  
	
			"totalInitialMargin" :  NumberString , // "9.00000000"  
	
			"totalMaintenanceMargin" :  NumberString , // "0.00000000"  
	
			"totalMarginBalance" :  NumberString , // "22.12659734"  
	
			"totalOpenOrderInitialMargin" :  NumberString , // "9.00000000"  
	
			"totalPositionInitialMargin" :  NumberString , // "0.00000000"  
	
			"totalUnrealizedProfit" :  NumberString , // "0.00000000"  
	
			"totalWalletBalance" :  NumberString , // "22.12659734"  
	
			"asset" :  string , // "USD" //The sum of BUSD and USDT 
	
			
			},
	
		{
	
			"email" :  string , // "345@test.com"  
	
			"totalInitialMargin" :  NumberString , // "0.83137400"  
	
			"totalMaintenanceMargin" :  NumberString , // "0.41568700"  
	
			"totalMarginBalance" :  NumberString , // "0.90575887"  
	
			"totalOpenOrderInitialMargin" :  NumberString , // "0.00000000"  
	
			"totalPositionInitialMargin" :  NumberString , // "0.83137400"  
	
			"totalUnrealizedProfit" :  NumberString , // "0.03219710"  
	
			"totalWalletBalance" :  NumberString , // "0.87356177"  
	
			"asset" :  string , // "USD" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

GetFuturesPositionRiskofSubaccount = {
	name: "Get Futures Position-Risk of Sub-account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"entryPrice" :  NumberString , // "9975.12000"  
	
		"leverage" :  NumberString , // "50"  // current initial leverage
	 
	
		"maxNotional" :  NumberString , // "1000000"  // notional value limit of current initial leverage
	 
	
		"liquidationPrice" :  NumberString , // "7963.54"  
	
		"markPrice" :  NumberString , // "9973.50770517"  
	
		"positionAmount" :  NumberString , // "0.010"  
	
		"symbol" :  string , // "BTCUSDT"  
	
		"unrealizedProfit" :  NumberString , // "-0.01612295" 
	
		
		}
	
	
	]
	
	
}

FuturesTransferforSubaccount = {
	name: "Futures Transfer for Sub-account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		asset : STRING // The asset being transferred, e.g., USDT
		amount : DECIMAL // The amount to be transferred
		type : INT // 1: transfer from subaccount&#39;s spot account to its USDT-margined futures account 2: transfer from subaccount&#39;s USDT-margined futures account to its spot account 3: transfer from subaccount&#39;s spot account to its COIN-margined futures account 4:transfer from subaccount&#39;s COIN-margined futures account to its spot account
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"txnId" :  NumberString , // "2966662589" 
	
	
	}
	
	
}

MarginTransferforSubaccount = {
	name: "Margin Transfer for Sub-account (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		asset : STRING // The asset being transferred, e.g., BTC
		amount : DECIMAL // The amount to be transferred
		type : INT // 1: transfer from subaccount&#39;s  spot account to margin account 2: transfer from subaccount&#39;s margin account to its spot account
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"txnId" :  NumberString , // "2966662589" 
	
	
	}
	
	
}

TransfertoSubaccountofSameMaster = {
	name: "Transfer to Sub-account of Same Master (For Sub-account)"
	nameType: "For Sub-account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		toEmail : STRING
		asset : STRING
		amount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"txnId" :  NumberString , // "2966662589" 
	
	
	}
	
	
}

TransfertoMaster = {
	name: "Transfer to Master (For Sub-account)"
	nameType: "For Sub-account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		asset : STRING
		amount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"txnId" :  NumberString , // "2966662589" 
	
	
	}
	
	
}

SubaccountTransferHistory = {
	name: "Sub-account Transfer History (For Sub-account)"
	nameType: "For Sub-account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		asset? : STRING // If not sent, result of all assets will be returned
		type? : INT // 1: transfer in, 2: transfer out
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 500
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"counterParty" :  string , // "master"  
	
		"email" :  string , // "master@test.com"  
	
		"type" :  number , // 1  // 1 for transfer in, 2 for transfer out
	 
	
		"asset" :  string , // "BTC"  
	
		"qty" :  NumberString , // "1"  
	
		"fromAccountType" :  string , // "SPOT"  
	
		"toAccountType" :  string , // "SPOT"  
	
		"status" :  string , // "SUCCESS"  // status: PROCESS / SUCCESS / FAILURE
	 
	
		"tranId" :  number , // 11798835829  
	
		"time" :  number , // 1544433325000 
	
		
		},
	
	{
	
		"counterParty" :  string , // "subAccount"  
	
		"email" :  string , // "sub2@test.com"  
	
		"type" :  number , // 1  
	
		"asset" :  string , // "ETH"  
	
		"qty" :  NumberString , // "2"  
	
		"fromAccountType" :  string , // "SPOT"  
	
		"toAccountType" :  string , // "SPOT"  
	
		"status" :  string , // "SUCCESS"  
	
		"tranId" :  number , // 11798829519  
	
		"time" :  number , // 1544433326000 
	
		
		}
	
	
	]
	
	
}

UniversalTransfer = {
	name: "Universal Transfer (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		fromEmail? : STRING
		toEmail? : STRING
		fromAccountType : STRING // &quot;SPOT&quot;,&quot;USDT_FUTURE&quot;,&quot;COIN_FUTURE&quot;,&quot;MARGIN&quot;(Cross),&quot;ISOLATED_MARGIN&quot;
		toAccountType : STRING // &quot;SPOT&quot;,&quot;USDT_FUTURE&quot;,&quot;COIN_FUTURE&quot;,&quot;MARGIN&quot;(Cross),&quot;ISOLATED_MARGIN&quot;
		clientTranId? : STRING // Must be unique
		symbol? : STRING // Only supported under ISOLATED_MARGIN type
		asset : STRING
		amount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"tranId" :  number , // 11945860693  
	
	"clientTranId" :  string , // "test" 
	
	
	}
	
	
}

QueryUniversalTransferHistory = {
	name: "Query Universal Transfer History (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		fromEmail? : STRING
		toEmail? : STRING
		clientTranId? : STRING
		startTime? : LONG
		endTime? : LONG
		page? : INT // Default 1
		limit? : INT // Default 500, Max 500
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"result" : [
		
	 {
	
			"tranId" :  number , // 92275823339  
	
			"fromEmail" :  string , // "abctest@gmail.com"  
	
			"toEmail" :  string , // "deftest@gmail.com"  
	
			"asset" :  string , // "BNB"  
	
			"amount" :  NumberString , // "0.01"  
	
			"createTimeStamp" :  number , // 1640317374000  
	
			"fromAccountType" :  string , // "USDT_FUTURE"  
	
			"toAccountType" :  string , // "SPOT"  
	
			"status" :  string , // "SUCCESS"  
	
			"clientTranId" :  string , // "test" 
	
			
			}
	
		
		],
	
	"totalCount" :  number , // 1 
	
	
	}
	
	
}

GetDetailonSubaccount&#39;sFuturesAccountV2 = {
	name: "Get Detail on Sub-account&#39;s Futures Account V2 (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		futuresType : INT // 1:USDT Margined Futures, 2:COIN Margined Futures
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"futureAccountResp" : {
	
		"email" :  string , // "abc@test.com"  
	
		"assets" :[
			
	 {
	
				"asset" :  string , // "USDT"  
	
				"initialMargin" :  NumberString , // "0.00000000"  
	
				"maintenanceMargin" :  NumberString , // "0.00000000"  
	
				"marginBalance" :  NumberString , // "0.88308000"  
	
				"maxWithdrawAmount" :  NumberString , // "0.88308000"  
	
				"openOrderInitialMargin" :  NumberString , // "0.00000000"  
	
				"positionInitialMargin" :  NumberString , // "0.00000000"  
	
				"unrealizedProfit" :  NumberString , // "0.00000000"  
	
				"walletBalance" :  NumberString , // "0.88308000" 
	
				
				}
	
			
			],
	
		"canDeposit" :  boolean , // true  
	
		"canTrade" :  boolean , // true  
	
		"canWithdraw" :  boolean , // true  
	
		"feeTier" :  number , // 2  
	
		"maxWithdrawAmount" :  NumberString , // "0.88308000"  
	
		"totalInitialMargin" :  NumberString , // "0.00000000"  
	
		"totalMaintenanceMargin" :  NumberString , // "0.00000000"  
	
		"totalMarginBalance" :  NumberString , // "0.88308000"  
	
		"totalOpenOrderInitialMargin" :  NumberString , // "0.00000000"  
	
		"totalPositionInitialMargin" :  NumberString , // "0.00000000"  
	
		"totalUnrealizedProfit" :  NumberString , // "0.00000000"  
	
		"totalWalletBalance" :  NumberString , // "0.88308000"  
	
		"updateTime" :  number , // 1576756674610 
	
		
		}
	
	
	}
	
	{
	
	"deliveryAccountResp" : {
	
		"email" :  string , // "abc@test.com"  
	
		"assets" :[
			
	 {
	
				"asset" :  string , // "BTC"  
	
				"initialMargin" :  NumberString , // "0.00000000"  
	
				"maintenanceMargin" :  NumberString , // "0.00000000"  
	
				"marginBalance" :  NumberString , // "0.88308000"  
	
				"maxWithdrawAmount" :  NumberString , // "0.88308000"  
	
				"openOrderInitialMargin" :  NumberString , // "0.00000000"  
	
				"positionInitialMargin" :  NumberString , // "0.00000000"  
	
				"unrealizedProfit" :  NumberString , // "0.00000000"  
	
				"walletBalance" :  NumberString , // "0.88308000" 
	
				
				}
	
			
			],
	
		"canDeposit" :  boolean , // true  
	
		"canTrade" :  boolean , // true  
	
		"canWithdraw" :  boolean , // true  
	
		"feeTier" :  number , // 2  
	
		"updateTime" :  number , // 1598959682001 
	
		
		}
	
	
	}
	
	
}

GetSummaryofSubaccount&#39;sFuturesAccountV2 = {
	name: "Get Summary of Sub-account&#39;s Futures Account V2 (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		futuresType : INT // 1:USDT Margined Futures, 2:COIN Margined Futures
		page? : INT // default:1
		limit? : INT // default:10, max:20
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"futureAccountSummaryResp" : {
	
		"totalInitialMargin" :  NumberString , // "9.83137400"  
	
		"totalMaintenanceMargin" :  NumberString , // "0.41568700"  
	
		"totalMarginBalance" :  NumberString , // "23.03235621"  
	
		"totalOpenOrderInitialMargin" :  NumberString , // "9.00000000"  
	
		"totalPositionInitialMargin" :  NumberString , // "0.83137400"  
	
		"totalUnrealizedProfit" :  NumberString , // "0.03219710"  
	
		"totalWalletBalance" :  NumberString , // "22.15879444"  
	
		"asset" :  string , // "USD"  //The sum of BUSD and USDT
	 
	
		"subAccountList" :[
			
	 {
	
				"email" :  string , // "123@test.com"  
	
				"totalInitialMargin" :  NumberString , // "9.00000000"  
	
				"totalMaintenanceMargin" :  NumberString , // "0.00000000"  
	
				"totalMarginBalance" :  NumberString , // "22.12659734"  
	
				"totalOpenOrderInitialMargin" :  NumberString , // "9.00000000"  
	
				"totalPositionInitialMargin" :  NumberString , // "0.00000000"  
	
				"totalUnrealizedProfit" :  NumberString , // "0.00000000"  
	
				"totalWalletBalance" :  NumberString , // "22.12659734"  
	
				"asset" :  string , // "USD" //The sum of BUSD and USDT 
	
				
				},
	
			{
	
				"email" :  string , // "345@test.com"  
	
				"totalInitialMargin" :  NumberString , // "0.83137400"  
	
				"totalMaintenanceMargin" :  NumberString , // "0.41568700"  
	
				"totalMarginBalance" :  NumberString , // "0.90575887"  
	
				"totalOpenOrderInitialMargin" :  NumberString , // "0.00000000"  
	
				"totalPositionInitialMargin" :  NumberString , // "0.83137400"  
	
				"totalUnrealizedProfit" :  NumberString , // "0.03219710"  
	
				"totalWalletBalance" :  NumberString , // "0.87356177"  
	
				"asset" :  string , // "USD" 
	
				
				}
	
			
			]
	
		
		}
	
	
	}
	
	{
	
	"deliveryAccountSummaryResp" : {
	
		"totalMarginBalanceOfBTC" :  NumberString , // "25.03221121"  
	
		"totalUnrealizedProfitOfBTC" :  NumberString , // "0.12233410"  
	
		"totalWalletBalanceOfBTC" :  NumberString , // "22.15879444"  
	
		"asset" :  string , // "BTC"  
	
		"subAccountList" :[
			
	 {
	
				"email" :  string , // "123@test.com"  
	
				"totalMarginBalance" :  NumberString , // "22.12659734"  
	
				"totalUnrealizedProfit" :  NumberString , // "0.00000000"  
	
				"totalWalletBalance" :  NumberString , // "22.12659734"  
	
				"asset" :  string , // "BTC" 
	
				
				},
	
			{
	
				"email" :  string , // "345@test.com"  
	
				"totalMarginBalance" :  NumberString , // "0.90575887"  
	
				"totalUnrealizedProfit" :  NumberString , // "0.03219710"  
	
				"totalWalletBalance" :  NumberString , // "0.87356177"  
	
				"asset" :  string , // "BTC" 
	
				
				}
	
			
			]
	
		
		}
	
	
	}
	
	
}

GetFuturesPositionRiskofSubaccountV2 = {
	name: "Get Futures Position-Risk of Sub-account V2 (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		futuresType : INT // 1:USDT Margined Futures, 2:COIN Margined Futures
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"futurePositionRiskVos" : [
		
	 {
	
			"entryPrice" :  NumberString , // "9975.12000"  
	
			"leverage" :  NumberString , // "50"  // current initial leverage
	 
	
			"maxNotional" :  NumberString , // "1000000"  // notional value limit of current initial leverage
	 
	
			"liquidationPrice" :  NumberString , // "7963.54"  
	
			"markPrice" :  NumberString , // "9973.50770517"  
	
			"positionAmount" :  NumberString , // "0.010"  
	
			"symbol" :  string , // "BTCUSDT"  
	
			"unrealizedProfit" :  NumberString , // "-0.01612295" 
	
			
			}
	
		
		]
	
	
	}
	
	{
	
	"deliveryPositionRiskVos" : [
		
	 {
	
			"entryPrice" :  NumberString , // "9975.12000"  
	
			"markPrice" :  NumberString , // "9973.50770517"  
	
			"leverage" :  NumberString , // "20"  
	
			"isolated" :  string , // "false"  
	
			"isolatedWallet" :  NumberString , // "9973.50770517"  
	
			"isolatedMargin" :  NumberString , // "0.00000000"  
	
			"isAutoAddMargin" :  string , // "false"  
	
			"positionSide" :  string , // "BOTH"  
	
			"positionAmount" :  NumberString , // "1.230"  
	
			"symbol" :  string , // "BTCUSD_201225"  
	
			"unrealizedProfit" :  NumberString , // "-0.01612295" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

EnableLeverageTokenforSubaccount = {
	name: "Enable Leverage Token for Sub-account  (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		enableBlvt : BOOLEAN // Only true for now
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"email" :  string , // "123@test.com"  
	
	"enableBlvt" :  boolean , // true 
	
	
	}
	
	
}

GetIPRestrictionforaSubaccountAPIKey = {
	name: "Get IP Restriction for a Sub-account API Key (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/sub-account/subAccountApi/ipRestriction"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING
		subAccountApiKey : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"ipRestrict" :  string , // "true"  
	
	"ipList" : [
		
	  string , // "69.210.67.14" 
	 
		
	  string , // "8.34.21.10"
		
	 
		],
	
	"updateTime" :  number , // 1636371437000  
	
	"apiKey" :  string , // "k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf" 
	
	
	}
	
	
}

DeleteIPListForaSubaccountAPIKey = {
	name: "Delete IP List For a Sub-account API Key (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		url : "DELETE/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING
		subAccountApiKey : STRING
		ipAddress? : STRING // Can be added in batches, separated by commas
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"ipRestrict" :  string , // "true"  
	
	"ipList" : [
		
	  string , // "69.210.67.14" 
	 
		
	  string , // "8.34.21.10"
		
	 
		],
	
	"updateTime" :  number , // 1636371437000  
	
	"apiKey" :  string , // "k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf" 
	
	
	}
	
	
}

UpdateIPRestrictionforSubAccountAPIkey = {
	name: "Update IP Restriction for Sub-Account API key (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v2/sub-account/subAccountApi/ipRestriction"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING // Sub-account email
		subAccountApiKey : STRING
		status : STRING // IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only.
		ipAddress? : STRING // Insert static IP in batch, separated by commas.
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"status" :  NumberString , // "2"  
	
	"ipList" : [
		
	  string , // "69.210.67.14" 
	 
		
	  string , // "8.34.21.10" 
	  //only return if you open IP restriction and input IP address.
	
	
		
	 
		],
	
	"updateTime" :  number , // 1636371437000  
	
	"apiKey" :  string , // "k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf" 
	
	
	}
	
	
}

DepositAssetsIntoTheManagedSubaccount（ForInvestorMasterAccount） = {
	name: "Deposit Assets Into The Managed Sub-account（For Investor Master Account）"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		toEmail : STRING
		asset : STRING
		amount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"tranId" :  number , // 66157362489 
	
	
	}
	
	
}

QueryManagedSubaccountAssetDetails（ForInvestorMasterAccount） = {
	name: "Query Managed Sub-account Asset Details（For Investor Master Account）"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
		"coin" :  string , // "INJ"  
	
		"name" :  string , // "Injective Protocol"  
	
		"totalBalance" :  NumberString , // "0"  
	
		"availableBalance" :  NumberString , // "0"  
	
		"inOrder" :  NumberString , // "0"  
	
		"btcValue" :  NumberString , // "0" 
	
		
		},
	
	{
	
		"coin" :  string , // "FILDOWN"  
	
		"name" :  string , // "FILDOWN"  
	
		"totalBalance" :  NumberString , // "0"  
	
		"availableBalance" :  NumberString , // "0"  
	
		"inOrder" :  NumberString , // "0"  
	
		"btcValue" :  NumberString , // "0" 
	
		
		}
	
	
	]
	
	
}

WithdrawlAssetsFromTheManagedSubaccount（ForInvestorMasterAccount） = {
	name: "Withdrawl Assets From The Managed Sub-account（For Investor Master Account）"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		fromEmail : STRING
		asset : STRING
		amount : DECIMAL
		transferDate? : LONG // Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"tranId" :  number , // 66157362489 
	
	
	}
	
	
}

QueryManagedSubaccountSnapshot（ForInvestorMasterAccount） = {
	name: "Query Managed Sub-account Snapshot（For Investor Master Account）"
	nameType: ""
	wight: [{
			name : "IP"
			data : 2400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/managed-subaccount/accountSnapshot"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		email : STRING
		type : STRING // &quot;SPOT&quot;, &quot;MARGIN&quot;（cross）, &quot;FUTURES&quot;（UM）
		startTime? : LONG
		endTime? : LONG
		limit? : INT // min 7, max 30, default 7
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  number , // 200  // 200 for success; others are error codes
	 
	
	"msg" :  NumberString , // ""  // error message
	 
	
	"snapshotVos" :[
		
	 {
	
			"data" :{
	
				"balances" :[
					
	 {
	
						"asset" :  string , // "BTC"  
	
						"free" :  NumberString , // "0.09905021"  
	
						"locked" :  NumberString , // "0.00000000" 
	
						
						},
	
					{
	
						"asset" :  string , // "USDT"  
	
						"free" :  NumberString , // "1.89109409"  
	
						"locked" :  NumberString , // "0.00000000" 
	
						
						}
	
					
					],
	
				"totalAssetOfBtc" :  NumberString , // "0.09942700" 
	
				
				},
	
			"type" :  string , // "spot"  
	
			"updateTime" :  number , // 1576281599000 
	
			
			}
	
		
		]
	
	
	}
	
	{
	
	"code" :  number , // 200  // 200 for success; others are error codes
	 
	
	"msg" :  NumberString , // ""  // error message
	 
	
	"snapshotVos" :[
		
	 {
	
			"data" :{
	
				"marginLevel" :  NumberString , // "2748.02909813"  
	
				"totalAssetOfBtc" :  NumberString , // "0.00274803"  
	
				"totalLiabilityOfBtc" :  NumberString , // "0.00000100"  
	
				"totalNetAssetOfBtc" :  NumberString , // "0.00274750"  
	
				"userAssets" :[
					
	 {
	
						"asset" :  string , // "XRP"  
	
						"borrowed" :  NumberString , // "0.00000000"  
	
						"free" :  NumberString , // "1.00000000"  
	
						"interest" :  NumberString , // "0.00000000"  
	
						"locked" :  NumberString , // "0.00000000"  
	
						"netAsset" :  NumberString , // "1.00000000" 
	
						
						}
	
					
					]
	
				
				},
	
			"type" :  string , // "margin"  
	
			"updateTime" :  number , // 1576281599000 
	
			
			}
	
		
		]
	
	
	}
	
	{
	
	"code" :  number , // 200  // 200 for success; others are error codes
	 
	
	"msg" :  NumberString , // ""  // error message
	 
	
	"snapshotVos" :[
		
	 {
	
			"data" :{
	
				"assets" :[
					
	 {
	
						"asset" :  string , // "USDT"  
	
						"marginBalance" :  NumberString , // "118.99782335"  
	
						"walletBalance" :  NumberString , // "120.23811389" 
	
						
						}
	
					
					],
	
				"position" :[
					
	 {
	
						"entryPrice" :  NumberString , // "7130.41000000"  
	
						"markPrice" :  NumberString , // "7257.66239673"  
	
						"positionAmt" :  NumberString , // "0.01000000"  
	
						"symbol" :  string , // "BTCUSDT"  
	
						"unRealizedProfit" :  NumberString , // "1.24029054" // Only show the value at the time of opening the position 
	
						
						}
	
					
					]
	
				
				},
	
			"type" :  string , // "futures"  
	
			"updateTime" :  number , // 1576281599000 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryManagedSubAccountTransferLog = {
	name: "Query Managed Sub Account Transfer Log (For Investor Master Account)"
	nameType: "For Investor Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING // Managed Sub Account Email
		startTime : LONG // Start Time
		endTime : LONG // End Time (The start time and end time interval cannot exceed half a year)
		page : INT // Page
		limit : INT // Limit (Max: 500)
		transfers? : STRING // Transfer Direction (FROM/TO)
		transferFunctionAccountType? : STRING // Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
	}
	req = {
	
	managerSubTransferHistoryVos : [
		
	  number , // 0 
	  number , // : 
	 {
	
			fromEmail :  string , // "test_0_virtual@kq3kno9imanagedsub.com" 
	
			fromAccountType :  string , // "SPOT" 
	
			toEmail :  string , // "wdywl0lddakh@test.com" 
	
			toAccountType :  string , // "SPOT" 
	
			asset :  string , // "BNB" 
	
			amount :  NumberString , // "0.01" 
	
			scheduledData :  number , // 1679416673000 
	
			createTime :  number , // 1679416673000 
	
			status :  string , // "SUCCESS" 
	
			tranId :  number , // 91077779 
	
			
			}
	
		1 : {
	
			fromEmail :  string , // "wdywl0lddakh@test.com" 
	
			fromAccountType :  string , // "SPOT" 
	
			toEmail :  string , // "test_0_virtual@kq3kno9imanagedsub.com" 
	
			toAccountType :  string , // "SPOT" 
	
			asset :  string , // "BNB" 
	
			amount :  NumberString , // "1" 
	
			scheduledData :  number , // 1679416616000 
	
			createTime :  number , // 1679416616000 
	
			status :  string , // "SUCCESS" 
	
			tranId :  number , // 91077676 
	
			
			}
	
		
		]
	
	count :  number , // 2 
	
	
	}
	
	
}

QueryManagedSubAccountTransferLog = {
	name: "Query Managed Sub Account Transfer Log (For Trading Team Master Account)"
	nameType: "For Trading Team Master Account"
	wight: [{
			name : "UID"
			data : 60
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING // Managed Sub Account Email
		startTime : LONG // Start Time
		endTime : LONG // End Time (The start time and end time interval cannot exceed half a year)
		page : INT // Page
		limit : INT // Limit (Max: 500)
		transfers? : STRING // Transfer Direction (FROM/TO)
		transferFunctionAccountType? : STRING // Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
	}
	req = {
	
	managerSubTransferHistoryVos : [
		
	  number , // 0 
	  number , // : 
	 {
	
			fromEmail :  string , // "test_0_virtual@kq3kno9imanagedsub.com" 
	
			fromAccountType :  string , // "SPOT" 
	
			toEmail :  string , // "wdywl0lddakh@test.com" 
	
			toAccountType :  string , // "SPOT" 
	
			asset :  string , // "BNB" 
	
			amount :  NumberString , // "0.01" 
	
			scheduledData :  number , // 1679416673000 
	
			createTime :  number , // 1679416673000 
	
			status :  string , // "SUCCESS" 
	
			tranId :  number , // 91077779 
	
			
			}
	
		1 : {
	
			fromEmail :  string , // "wdywl0lddakh@test.com" 
	
			fromAccountType :  string , // "SPOT" 
	
			toEmail :  string , // "test_0_virtual@kq3kno9imanagedsub.com" 
	
			toAccountType :  string , // "SPOT" 
	
			asset :  string , // "BNB" 
	
			amount :  NumberString , // "1" 
	
			scheduledData :  number , // 1679416616000 
	
			createTime :  number , // 1679416616000 
	
			status :  string , // "SUCCESS" 
	
			tranId :  number , // 91077676 
	
			
			}
	
		
		]
	
	count :  number , // 2 
	
	
	}
	
	
}

QueryManagedSubaccountFuturesAssetDetails（ForInvestorMasterAccount） = {
	name: "Query Managed Sub-account Futures Asset Details（For Investor Master Account）(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 60
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING // Managed Sub Account Email
	}
	req = {
	
	"code" :  NumberString , // "200"  
	
	"message" :  string , // "OK"  
	
	"snapshotVos" : [
		
	 {
	
			"type" :  string , // "FUTURES"  
	
			"updateTime" :  number , // 1672893855394  
	
			"data" : {
	
				"assets" : [
					
	 {
	
						"asset" :  string , // "USDT"  
	
						"marginBalance" :  number , // 100  
	
						"walletBalance" :  number , // 120 
	
						
						}
	
					
					],
	
				"position" : [
					
	 {
	
						"symbol" :  string , // "BTCUSDT"  
	
						"entryPrice" :  number , // 17000  
	
						"markPrice" :  number , // 17000  
	
						"positionAmt" :  number , // 0.0001 
	
						
						}
	
					
					]
	
				
				}
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryManagedSubaccountMarginAssetDetails = {
	name: "Query Managed Sub-account Margin Asset Details (For Investor Master Account)"
	nameType: "For Investor Master Account"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING // Managed Sub Account Email
	}
	req = {
	
	marginLevel :  NumberString , // "999" 
	
	totalAssetOfBtc :  NumberString , // "0" 
	
	totalLiabilityOfBtc :  NumberString , // "0" 
	
	totalNetAssetOfBtc :  NumberString , // "0" 
	
	userAssets :[
		
	  number , // 0 
	 :{
	
			asset :  string , // "MATIC" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		1 :{
	
			asset :  string , // "VET" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		2 :{
	
			asset :  string , // "BAKE" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		3 :{
	
			asset :  string , // "SHIB" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		4 :{
	
			asset :  string , // "USDT" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		5 :{
	
			asset :  string , // "DOGE" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		6 :{
	
			asset :  string , // "AAVE" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		7 :{
	
			asset :  string , // "ONT" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		8 :{
	
			asset :  string , // "XRP" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		9 :{
	
			asset :  string , // "XLM" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		10 :{
	
			asset :  string , // "LINK" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		11 :{
	
			asset :  string , // "QTUM" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		12 :{
	
			asset :  string , // "ETHW" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		13 :{
	
			asset :  string , // "XTZ" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		14 :{
	
			asset :  string , // "LUNA" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		15 :{
	
			asset :  string , // "EUR" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		16 :{
	
			asset :  string , // "IOST" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		17 :{
	
			asset :  string , // "BCH" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		18 :{
	
			asset :  string , // "BTC" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		19 :{
	
			asset :  string , // "IOTA" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		20 :{
	
			asset :  string , // "CREAM" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		21 :{
	
			asset :  string , // "BAT" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		22 :{
	
			asset :  string , // "BNB" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		23 :{
	
			asset :  string , // "ETH" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		24 :{
	
			asset :  string , // "ZEC" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		25 :{
	
			asset :  string , // "USDC" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		26 :{
	
			asset :  string , // "LTC" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		27 :{
	
			asset :  string , // "BUSD" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		28 :{
	
			asset :  string , // "ZIL" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		29 :{
	
			asset :  string , // "THETA" 
	
			borrowed :  NumberString , // "0" 
	
			free :  NumberString , // "0" 
	
			interest :  NumberString , // "0" 
	
			locked :  NumberString , // "0" 
	
			netAsset :  NumberString , // "0" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QuerySubaccountAssets = {
	name: "Query Sub-account Assets (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "UID"
			data : 60
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING // Managed Sub Account Email
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"balances" :[
		
	 {
	
			"asset" :  string , // "ADA"  
	
			"free" :  NumberString , // "10000"  
	
			"locked" :  NumberString , // "0" 
	
			
			},
	
		{
	
			"asset" :  string , // "BNB"  
	
			"free" :  NumberString , // "10003"  
	
			"locked" :  NumberString , // "0" 
	
			
			},
	
		{
	
			"asset" :  string , // "BTC"  
	
			"free" :  NumberString , // "11467.6399"  
	
			"locked" :  NumberString , // "0" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryManagedSubaccountList = {
	name: "Query Managed Sub-account List (For Investor)"
	nameType: "For Investor"
	wight: [{
			name : "UID"
			data : 60
		}
	]
	// Name Type Mandatory Description
	params : {
		email? : STRING // Managed sub-account email
		page? : INT // Default value: 1
		limit? : INT // Default value: 20, Max value: 20
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	total :  number , // 3 
	
	managerSubUserInfoVoList : [
		
	  number , // 0 
	  number , // : 
	 {
	
			rootUserId :  number , // 1000138475670 
	
			managersubUserId :  number , // 1000137842513 
	
			bindParentUserId :  number , // 1000138475669 
	
			email :  string , // "test_0_virtual@kq3kno9imanagedsub.com" 
	
			insertTimeStamp :  number , // 1678435149000 
	
			bindParentEmail :  string , // "wdyw8xsh8pey@test.com" 
	
			isSubUserEnabled :  boolean , // true 
	
			isUserActive :  boolean , // true 
	
			isMarginEnabled :  boolean , // false 
	
			isFutureEnabled :  boolean , // false 
	
			isSignedLVTRiskAgreement :  boolean , // false 
	
			
			}
	
		1 : {
	
			rootUserId :  number , // 1000138475670 
	
			managersubUserId :  number , // 1000137842514 
	
			bindParentUserId :  number , // 1000138475669 
	
			email :  string , // "test_1_virtual@4qd2u7zxmanagedsub.com" 
	
			insertTimeStamp :  number , // 1678435152000 
	
			bindParentEmail :  string , // "wdyw8xsh8pey@test.com" 
	
			isSubUserEnabled :  boolean , // true 
	
			isUserActive :  boolean , // true 
	
			isMarginEnabled :  boolean , // false 
	
			isFutureEnabled :  boolean , // false 
	
			isSignedLVTRiskAgreement :  boolean , // false 
	
			
			}
	
		2 : {
	
			rootUserId :  number , // 1000138475670 
	
			managersubUserId :  number , // 1000137842515 
	
			bindParentUserId :  number , // 1000138475669 
	
			email :  string , // "test_2_virtual@akc05o8hmanagedsub.com" 
	
			insertTimeStamp :  number , // 1678435153000 
	
			bindParentEmail :  string , // "wdyw8xsh8pey@test.com" 
	
			isSubUserEnabled :  boolean , // true 
	
			isUserActive :  boolean , // true 
	
			isMarginEnabled :  boolean , // false 
	
			isFutureEnabled :  boolean , // false 
	
			isSignedLVTRiskAgreement :  boolean , // false 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QuerySubaccountTransactionStatistics = {
	name: "Query Sub-account Transaction Statistics (For Master Account)"
	nameType: "For Master Account"
	wight: [{
			name : "UID"
			data : 60
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING // Sub user email
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"recent30BtcTotal" :  NumberString , // "0"  
	
	"recent30BtcFuturesTotal" :  NumberString , // "0"  
	
	"recent30BtcMarginTotal" :  NumberString , // "0"  
	
	"recent30BusdTotal" :  NumberString , // "0"  
	
	"recent30BusdFuturesTotal" :  NumberString , // "0"  
	
	"recent30BusdMarginTotal" :  NumberString , // "0"  
	
	"tradeInfoVos" :  number , // [] 
	
	
	}
	
	{
	
	"recent30BtcTotal" :  NumberString , // "0"  
	
	"recent30BtcFuturesTotal" :  NumberString , // "0"  
	
	"recent30BtcMarginTotal" :  NumberString , // "0"  
	
	"recent30BusdTotal" :  NumberString , // "0"  
	
	"recent30BusdFuturesTotal" :  NumberString , // "0"  
	
	"recent30BusdMarginTotal" :  NumberString , // "0"  
	
	"tradeInfoVos" : [
		
	 {
	
			"userId" :  number , // 1000138138384  
	
			"btc" :  number , // 0  
	
			"btcFutures" :  number , // 0  
	
			"btcMargin" :  number , // 0  
	
			"busd" :  number , // 0  
	
			"busdFutures" :  number , // 0  
	
			"busdMargin" :  number , // 0  
	
			"date" :  number , // 1676851200000 
	
			
			},
	
		{
	
			"userId" :  number , // 1000138138384  
	
			"btc" :  number , // 0  
	
			"btcFutures" :  number , // 0  
	
			"btcMargin" :  number , // 0  
	
			"busd" :  number , // 0  
	
			"busdFutures" :  number , // 0  
	
			"busdMargin" :  number , // 0  
	
			"date" :  number , // 1677110400000 
	
			
			},
	
		{
	
			"userId" :  number , // 1000138138384  
	
			"btc" :  number , // 0  
	
			"btcFutures" :  number , // 0  
	
			"btcMargin" :  number , // 0  
	
			"busd" :  number , // 0  
	
			"busdFutures" :  number , // 0  
	
			"busdMargin" :  number , // 0  
	
			"date" :  number , // 1677369600000 
	
			
			}
	
		
		]
	
	
	}
	
	
}

GetManagedSubaccountDepositAddress = {
	name: "Get Managed Sub-account Deposit Address (For Investor Master Account)"
	nameType: "For Investor Master Account"
	wight: [{
			name : "UID"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		email : STRING // Sub user email
		coin : STRING
		network? : STRING // networks can be found in 
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"coin" :  string , // "USDT"  
	
	"address" :  NumberString , // "0x206c22d833bb0bb2102da6b7c7d4c3eb14bcf73d"  
	
	"tag" :  NumberString , // ""  
	
	"url" :  string , // "https://etherscan.io/address/0x206c22d833bb0bb2102da6b7c7d4c3eb14bcf73d" 
	
	
	}
	
	
}

TestConnectivity = {
	name: "Test Connectivity"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/ping"
		HMAC : true
	}
	req = {} 
	
	
}

CheckServerTime = {
	name: "Check Server Time"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/time"
	}
	req = {
	
	"serverTime" :  number , // 1499827319559 
	
	
	}
	
	
}

ExchangeInformation = {
	name: "Exchange Information"
	nameType: ""
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/exchangeInfo"
	}
	// Options Example
	params : {
		No parameter : curl -X GET &quot;https://api.binance.com/api/v3/exchangeInfo&quot;
		symbol : curl -X GET &quot;https://api.binance.com/api/v3/exchangeInfo?symbol=BNBBTC&quot;
		symbols : curl -X GET &quot;https://api.binance.com/api/v3/exchangeInfo?symbols=%5B%22BNBBTC%22,%22BTCUSDT%22%5D&quot; 
		permissions : curl -X GET &quot;https://api.binance.com/api/v3/exchangeInfo?permissions=SPOT&quot; 
	}
	req = {
	
	"timezone" :  string , // "UTC"  
	
	"serverTime" :  number , // 1565246363776  
	
	"rateLimits" : [
		
	 {
	
			//These are defined in the `ENUM definitions` section under `Rate Limiters (rateLimitType)`. 
	
			//All limits are optional 
	
			
			}
	
		
		],
	
	"exchangeFilters" : [
		//These are the defined filters in the `Filters` section.
	
	
		//All filters are optional.
	
	
		
	 
		],
	
	"symbols" : [
		
	 {
	
			"symbol" :  string , // "ETHBTC"  
	
			"status" :  string , // "TRADING"  
	
			"baseAsset" :  string , // "ETH"  
	
			"baseAssetPrecision" :  number , // 8  
	
			"quoteAsset" :  string , // "BTC"  
	
			"quotePrecision" :  number , // 8  
	
			"quoteAssetPrecision" :  number , // 8  
	
			"orderTypes" : [
				
	  string , // "LIMIT" 
	 
				
	  string , // "LIMIT_MAKER" 
	 
				
	  string , // "MARKET" 
	 
				
	  string , // "STOP_LOSS" 
	 
				
	  string , // "STOP_LOSS_LIMIT" 
	 
				
	  string , // "TAKE_PROFIT" 
	 
				
	  string , // "TAKE_PROFIT_LIMIT"
				
	 
				],
	
			"icebergAllowed" :  boolean , // true  
	
			"ocoAllowed" :  boolean , // true  
	
			"quoteOrderQtyMarketAllowed" :  boolean , // true  
	
			"allowTrailingStop" :  boolean , // false  
	
			"cancelReplaceAllowed" :  boolean , // false  
	
			"isSpotTradingAllowed" :  boolean , // true  
	
			"isMarginTradingAllowed" :  boolean , // true  
	
			"filters" : [
				//These are defined in the Filters section.
	
	
				//All filters are optional
	
	
				
	 
				],
	
			"permissions" : [
				
	  string , // "SPOT" 
	 
				
	  string , // "MARGIN"
				
	 
				],
	
			"defaultSelfTradePreventionMode" :  string , // "NONE"  
	
			"allowedSelfTradePreventionModes" : [
				
	  string , // "NONE"
				
	 
				]
	
			
			}
	
		
		]
	
	
	}
	
	
}

OrderBook = {
	name: "Order Book"
	nameType: ""
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/depth"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		limit? : INT // Default 100; max 5000. 
	}
	req = {
	
	"lastUpdateId" :  number , // 1027024  
	
	"bids" : [
		
	 [
			
	  NumberString , // "4.00000000" 
	  // PRICE
	
	
			
	  NumberString , // "431.00000000" // QTY
	
	
			
	 
			]
	
		
		],
	
	"asks" : [
		
	 [
			
	  NumberString , // "4.00000200" 
	 
			
	  NumberString , // "12.00000000"
			
	 
			]
	
		
		]
	
	
	}
	
	
}

RecentTradesList = {
	name: "Recent Trades List"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/trades"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		limit? : INT // Default 500; max 1000.
	}
	req = [
	
	 {
	
		"id" :  number , // 28457  
	
		"price" :  NumberString , // "4.00000100"  
	
		"qty" :  NumberString , // "12.00000000"  
	
		"quoteQty" :  NumberString , // "48.000012"  
	
		"time" :  number , // 1499865549590  
	
		"isBuyerMaker" :  boolean , // true  
	
		"isBestMatch" :  boolean , // true 
	
		
		}
	
	
	]
	
	
}

OldTradeLookup = {
	name: "Old Trade Lookup (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/historicalTrades"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		limit? : INT // Default 500; max 1000.
		fromId? : LONG // Trade id to fetch from. Default gets most recent trades.
	}
	req = [
	
	 {
	
		"id" :  number , // 28457  
	
		"price" :  NumberString , // "4.00000100"  
	
		"qty" :  NumberString , // "12.00000000"  
	
		"quoteQty" :  NumberString , // "48.000012"  
	
		"time" :  number , // 1499865549590  // Trade executed timestamp, as same as `T` in the stream
	 
	
		"isBuyerMaker" :  boolean , // true  
	
		"isBestMatch" :  boolean , // true 
	
		
		}
	
	
	]
	
	
}

CompressedAggregateTradesList = {
	name: "Compressed/Aggregate Trades List"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/aggTrades"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		fromId? : LONG // id to get aggregate trades from INCLUSIVE.
		startTime? : LONG // Timestamp in ms to get aggregate trades from INCLUSIVE.
		endTime? : LONG // Timestamp in ms to get aggregate trades until INCLUSIVE.
		limit? : INT // Default 500; max 1000.
	}
	req = [
	
	 {
	
		"a" :  number , // 26129  // Aggregate tradeId
	 
	
		"p" :  NumberString , // "0.01633102"  // Price
	 
	
		"q" :  NumberString , // "4.70443515"  // Quantity
	 
	
		"f" :  number , // 27781  // First tradeId
	 
	
		"l" :  number , // 27781  // Last tradeId
	 
	
		"T" :  number , // 1498793709153  // Timestamp
	 
	
		"m" :  boolean , // true  // Was the buyer the maker?
	 
	
		"M" :  boolean , // true // Was the trade the best price match? 
	
		
		}
	
	
	]
	
	
}

KlineCandlestickData = {
	name: "Kline/Candlestick Data"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/klines"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		interval : ENUM
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 500; max 1000.
	}
	req = [
	
	 [
		
	  number , // 1499040000000 
	  // Kline open time
	
	
		
	  NumberString , // "0.01634790" 
	  // Open price
	
	
		
	  NumberString , // "0.80000000" 
	  // High price
	
	
		
	  NumberString , // "0.01575800" 
	  // Low price
	
	
		
	  NumberString , // "0.01577100" 
	  // Close price
	
	
		
	  NumberString , // "148976.11427815" 
	  // Volume
	
	
		
	  number , // 1499644799999 
	  // Kline Close time
	
	
		
	  NumberString , // "2434.19055334" 
	  // Quote asset volume
	
	
		
	  number , // 308 
	  // Number of trades
	
	
		
	  NumberString , // "1756.87402397" 
	  // Taker buy base asset volume
	
	
		
	  NumberString , // "28.46694368" 
	  // Taker buy quote asset volume
	
	
		
	  NumberString , // "0" // Unused field, ignore.
	
	
		
	 
		]
	
	
	]
	
	
}

UIKlines = {
	name: "UIKlines"
	nameType: ""
	wight: [{
			name : ""
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/uiKlines"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		interval : ENUM
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 500; max 1000.
	}
	req = [
	
	 [
		
	  number , // 1499040000000 
	  // Kline open time
	
	
		
	  NumberString , // "0.01634790" 
	  // Open price
	
	
		
	  NumberString , // "0.80000000" 
	  // High price
	
	
		
	  NumberString , // "0.01575800" 
	  // Low price
	
	
		
	  NumberString , // "0.01577100" 
	  // Close price
	
	
		
	  NumberString , // "148976.11427815" 
	  // Volume
	
	
		
	  number , // 1499644799999 
	  // Kline close time
	
	
		
	  NumberString , // "2434.19055334" 
	  // Quote asset volume
	
	
		
	  number , // 308 
	  // Number of trades
	
	
		
	  NumberString , // "1756.87402397" 
	  // Taker buy base asset volume
	
	
		
	  NumberString , // "28.46694368" 
	  // Taker buy quote asset volume
	
	
		
	  NumberString , // "0" // Unused field. Ignore.
	
	
		
	 
		]
	
	
	]
	
	
}

CurrentAveragePrice = {
	name: "Current Average Price"
	nameType: ""
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/avgPrice"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
	}
	req = {
	
	"mins" :  number , // 5  
	
	"price" :  NumberString , // "9.35751834" 
	
	
	}
	
	
}

24hrTickerPriceChangeStatistics = {
	name: "24hr Ticker Price Change Statistics"
	nameType: ""
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/ticker/24hr"
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING
		symbols? : STRING
		type? : ENUM // Supported values: 
	}
	req = {
	
	"symbol" :  string , // "BNBBTC"  
	
	"priceChange" :  NumberString , // "-94.99999800"  
	
	"priceChangePercent" :  NumberString , // "-95.960"  
	
	"weightedAvgPrice" :  NumberString , // "0.29628482"  
	
	"prevClosePrice" :  NumberString , // "0.10002000"  
	
	"lastPrice" :  NumberString , // "4.00000200"  
	
	"lastQty" :  NumberString , // "200.00000000"  
	
	"bidPrice" :  NumberString , // "4.00000000"  
	
	"bidQty" :  NumberString , // "100.00000000"  
	
	"askPrice" :  NumberString , // "4.00000200"  
	
	"askQty" :  NumberString , // "100.00000000"  
	
	"openPrice" :  NumberString , // "99.00000000"  
	
	"highPrice" :  NumberString , // "100.00000000"  
	
	"lowPrice" :  NumberString , // "0.10000000"  
	
	"volume" :  NumberString , // "8913.30000000"  
	
	"quoteVolume" :  NumberString , // "15.30000000"  
	
	"openTime" :  number , // 1499783499040  
	
	"closeTime" :  number , // 1499869899040  
	
	"firstId" :  number , // 28385  // First tradeId
	 
	
	"lastId" :  number , // 28460  // Last tradeId
	 
	
	"count" :  number , // 76 // Trade count 
	
	
	}
	
	[
	
	 {
	
		"symbol" :  string , // "BNBBTC"  
	
		"priceChange" :  NumberString , // "-94.99999800"  
	
		"priceChangePercent" :  NumberString , // "-95.960"  
	
		"weightedAvgPrice" :  NumberString , // "0.29628482"  
	
		"prevClosePrice" :  NumberString , // "0.10002000"  
	
		"lastPrice" :  NumberString , // "4.00000200"  
	
		"lastQty" :  NumberString , // "200.00000000"  
	
		"bidPrice" :  NumberString , // "4.00000000"  
	
		"bidQty" :  NumberString , // "100.00000000"  
	
		"askPrice" :  NumberString , // "4.00000200"  
	
		"askQty" :  NumberString , // "100.00000000"  
	
		"openPrice" :  NumberString , // "99.00000000"  
	
		"highPrice" :  NumberString , // "100.00000000"  
	
		"lowPrice" :  NumberString , // "0.10000000"  
	
		"volume" :  NumberString , // "8913.30000000"  
	
		"quoteVolume" :  NumberString , // "15.30000000"  
	
		"openTime" :  number , // 1499783499040  
	
		"closeTime" :  number , // 1499869899040  
	
		"firstId" :  number , // 28385  // First tradeId
	 
	
		"lastId" :  number , // 28460  // Last tradeId
	 
	
		"count" :  number , // 76 // Trade count 
	
		
		}
	
	
	]
	
	{
	
	"symbol" :  string , // "BNBBTC"  // Symbol Name
	 
	
	"openPrice" :  NumberString , // "99.00000000"  // Opening price of the Interval
	 
	
	"highPrice" :  NumberString , // "100.00000000"  // Highest price in the interval
	 
	
	"lowPrice" :  NumberString , // "0.10000000"  // Lowest  price in the interval
	 
	
	"lastPrice" :  NumberString , // "4.00000200"  // Closing price of the interval
	 
	
	"volume" :  NumberString , // "8913.30000000"  // Total trade volume (in base asset)
	 
	
	"quoteVolume" :  NumberString , // "15.30000000"  // Total trade volume (in quote asset)
	 
	
	"openTime" :  number , // 1499783499040  // Start of the ticker interval
	 
	
	"closeTime" :  number , // 1499869899040  // End of the ticker interval
	 
	
	"firstId" :  number , // 28385  // First tradeId considered
	 
	
	"lastId" :  number , // 28460  // Last tradeId considered
	 
	
	"count" :  number , // 76 // Total trade count 
	
	
	}
	
	[
	
	 {
	
		"symbol" :  string , // "BNBBTC"  
	
		"openPrice" :  NumberString , // "99.00000000"  
	
		"highPrice" :  NumberString , // "100.00000000"  
	
		"lowPrice" :  NumberString , // "0.10000000"  
	
		"lastPrice" :  NumberString , // "4.00000200"  
	
		"volume" :  NumberString , // "8913.30000000"  
	
		"quoteVolume" :  NumberString , // "15.30000000"  
	
		"openTime" :  number , // 1499783499040  
	
		"closeTime" :  number , // 1499869899040  
	
		"firstId" :  number , // 28385  
	
		"lastId" :  number , // 28460  
	
		"count" :  number , // 76 
	
		
		},
	
	{
	
		"symbol" :  string , // "LTCBTC"  
	
		"openPrice" :  NumberString , // "0.07000000"  
	
		"highPrice" :  NumberString , // "0.07000000"  
	
		"lowPrice" :  NumberString , // "0.07000000"  
	
		"lastPrice" :  NumberString , // "0.07000000"  
	
		"volume" :  NumberString , // "11.00000000"  
	
		"quoteVolume" :  NumberString , // "0.77000000"  
	
		"openTime" :  number , // 1656908192899  
	
		"closeTime" :  number , // 1656994592899  
	
		"firstId" :  number , // 0  
	
		"lastId" :  number , // 10  
	
		"count" :  number , // 11 
	
		
		}
	
	
	]
	
	
}

SymbolPriceTicker = {
	name: "Symbol Price Ticker"
	nameType: ""
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/ticker/price"
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING
		symbols? : STRING
	}
	req = {
	
	"symbol" :  string , // "LTCBTC"  
	
	"price" :  NumberString , // "4.00000200" 
	
	
	}
	
	[
	
	 {
	
		"symbol" :  string , // "LTCBTC"  
	
		"price" :  NumberString , // "4.00000200" 
	
		
		},
	
	{
	
		"symbol" :  string , // "ETHBTC"  
	
		"price" :  NumberString , // "0.07946600" 
	
		
		}
	
	
	]
	
	
}

SymbolOrderBookTicker = {
	name: "Symbol Order Book Ticker"
	nameType: ""
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/ticker/bookTicker"
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING
		symbols? : STRING
	}
	req = {
	
	"symbol" :  string , // "LTCBTC"  
	
	"bidPrice" :  NumberString , // "4.00000000"  
	
	"bidQty" :  NumberString , // "431.00000000"  
	
	"askPrice" :  NumberString , // "4.00000200"  
	
	"askQty" :  NumberString , // "9.00000000" 
	
	
	}
	
	[
	
	 {
	
		"symbol" :  string , // "LTCBTC"  
	
		"bidPrice" :  NumberString , // "4.00000000"  
	
		"bidQty" :  NumberString , // "431.00000000"  
	
		"askPrice" :  NumberString , // "4.00000200"  
	
		"askQty" :  NumberString , // "9.00000000" 
	
		
		},
	
	{
	
		"symbol" :  string , // "ETHBTC"  
	
		"bidPrice" :  NumberString , // "0.07946700"  
	
		"bidQty" :  NumberString , // "9.00000000"  
	
		"askPrice" :  NumberString , // "100000.00000000"  
	
		"askQty" :  NumberString , // "1000.00000000" 
	
		
		}
	
	
	]
	
	
}

Rollingwindowpricechangestatistics = {
	name: "Rolling window price change statistics"
	nameType: ""
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/ticker"
	}
	// Name Type Mandatory Description
	params : {
		symbol : undefined
		symbols : undefined
		windowSize? : ENUM // Defaults to 
		type? : ENUM // Supported values: 
	}
	req = {
	
	"symbol" :  string , // "BNBBTC"  
	
	"priceChange" :  NumberString , // "-8.00000000"  // Absolute price change
	 
	
	"priceChangePercent" :  NumberString , // "-88.889"  // Relative price change in percent
	 
	
	"weightedAvgPrice" :  NumberString , // "2.60427807"  // QuoteVolume / Volume
	 
	
	"openPrice" :  NumberString , // "9.00000000"  
	
	"highPrice" :  NumberString , // "9.00000000"  
	
	"lowPrice" :  NumberString , // "1.00000000"  
	
	"lastPrice" :  NumberString , // "1.00000000"  
	
	"volume" :  NumberString , // "187.00000000"  
	
	"quoteVolume" :  NumberString , // "487.00000000"  // Sum of (price * volume) for all trades
	 
	
	"openTime" :  number , // 1641859200000  // Open time for ticker window
	 
	
	"closeTime" :  number , // 1642031999999  // Current Time of the Request
	 
	
	"firstId" :  number , // 0  // Trade IDs
	 
	
	"lastId" :  number , // 60  
	
	"count" :  number , // 61 // Number of trades in the interval 
	
	
	}
	
	[
	
	 {
	
		"symbol" :  string , // "BTCUSDT"  
	
		"priceChange" :  NumberString , // "-154.13000000"  // Absolute price change
	 
	
		"priceChangePercent" :  NumberString , // "-0.740"  // Relative price change in percent
	 
	
		"weightedAvgPrice" :  NumberString , // "20677.46305250"  // QuoteVolume / Volume
	 
	
		"openPrice" :  NumberString , // "20825.27000000"  
	
		"highPrice" :  NumberString , // "20972.46000000"  
	
		"lowPrice" :  NumberString , // "20327.92000000"  
	
		"lastPrice" :  NumberString , // "20671.14000000"  
	
		"volume" :  NumberString , // "72.65112300"  
	
		"quoteVolume" :  NumberString , // "1502240.91155513"  // Sum of (price * volume) for all trades
	 
	
		"openTime" :  number , // 1655432400000  // Open time for ticker window
	 
	
		"closeTime" :  number , // 1655446835460  // Close time for ticker window
	 
	
		"firstId" :  number , // 11147809  // Trade IDs
	 
	
		"lastId" :  number , // 11149775  
	
		"count" :  number , // 1967 // Number of trades in the interval 
	
		
		},
	
	{
	
		"symbol" :  string , // "BNBBTC"  
	
		"priceChange" :  NumberString , // "0.00008530"  
	
		"priceChangePercent" :  NumberString , // "0.823"  
	
		"weightedAvgPrice" :  NumberString , // "0.01043129"  
	
		"openPrice" :  NumberString , // "0.01036170"  
	
		"highPrice" :  NumberString , // "0.01049850"  
	
		"lowPrice" :  NumberString , // "0.01033870"  
	
		"lastPrice" :  NumberString , // "0.01044700"  
	
		"volume" :  NumberString , // "166.67000000"  
	
		"quoteVolume" :  NumberString , // "1.73858301"  
	
		"openTime" :  number , // 1655432400000  
	
		"closeTime" :  number , // 1655446835460  
	
		"firstId" :  number , // 2351674  
	
		"lastId" :  number , // 2352034  
	
		"count" :  number , // 361 
	
		
		}
	
	
	]
	
	{
	
	"symbol" :  string , // "LTCBTC"  
	
	"openPrice" :  NumberString , // "0.10000000"  
	
	"highPrice" :  NumberString , // "2.00000000"  
	
	"lowPrice" :  NumberString , // "0.10000000"  
	
	"lastPrice" :  NumberString , // "2.00000000"  
	
	"volume" :  NumberString , // "39.00000000"  
	
	"quoteVolume" :  NumberString , // "13.40000000"  // Sum of (price * volume) for all trades
	 
	
	"openTime" :  number , // 1656986580000  // Open time for ticker window
	 
	
	"closeTime" :  number , // 1657001016795  // Close time for ticker window
	 
	
	"firstId" :  number , // 0  // Trade IDs
	 
	
	"lastId" :  number , // 34  
	
	"count" :  number , // 35 // Number of trades in the interval 
	
	
	}
	
	[
	
	 {
	
		"symbol" :  string , // "BNBBTC"  
	
		"openPrice" :  NumberString , // "0.10000000"  
	
		"highPrice" :  NumberString , // "2.00000000"  
	
		"lowPrice" :  NumberString , // "0.10000000"  
	
		"lastPrice" :  NumberString , // "2.00000000"  
	
		"volume" :  NumberString , // "39.00000000"  
	
		"quoteVolume" :  NumberString , // "13.40000000"  // Sum of (price * volume) for all trades
	 
	
		"openTime" :  number , // 1656986880000  // Open time for ticker window
	 
	
		"closeTime" :  number , // 1657001297799  // Close time for ticker window
	 
	
		"firstId" :  number , // 0  // Trade IDs
	 
	
		"lastId" :  number , // 34  
	
		"count" :  number , // 35 // Number of trades in the interval 
	
		
		},
	
	{
	
		"symbol" :  string , // "LTCBTC"  
	
		"openPrice" :  NumberString , // "0.07000000"  
	
		"highPrice" :  NumberString , // "0.07000000"  
	
		"lowPrice" :  NumberString , // "0.07000000"  
	
		"lastPrice" :  NumberString , // "0.07000000"  
	
		"volume" :  NumberString , // "33.00000000"  
	
		"quoteVolume" :  NumberString , // "2.31000000"  
	
		"openTime" :  number , // 1656986880000  
	
		"closeTime" :  number , // 1657001297799  
	
		"firstId" :  number , // 0  
	
		"lastId" :  number , // 32  
	
		"count" :  number , // 33 
	
		
		}
	
	
	]
	
	
}

LiveSubscribingUnsubscribingtostreams = {
	name: "Live Subscribing/Unsubscribing to streams"
	nameType: ""
	wight: []
	req = {
	
	"result" :  number , // null  
	
	"id" :  number , // 1 
	
	
	}
	
	{
	
	"result" :  number , // null  
	
	"id" :  number , // 312 
	
	
	}
	
	{
	
	"result" : [
		
	  string , // "btcusdt@aggTrade"
		
	 
		],
	
	"id" :  number , // 3 
	
	
	}
	
	{
	
	"result" :  number , // null  
	
	"id" :  number , // 5 
	
	
	}
	
	{
	
	"result" :  boolean , // true  // Indicates that combined is set to true.
	 
	
	"id" :  number , // 2 
	
	
	}
	
	
}

AggregateTradeStreams = {
	name: "Aggregate Trade Streams"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "aggTrade"  // Event type
	 
	
	"E" :  number , // 123456789  // Event time
	 
	
	"s" :  string , // "BNBBTC"  // Symbol
	 
	
	"a" :  number , // 12345  // Aggregate trade ID
	 
	
	"p" :  NumberString , // "0.001"  // Price
	 
	
	"q" :  NumberString , // "100"  // Quantity
	 
	
	"f" :  number , // 100  // First trade ID
	 
	
	"l" :  number , // 105  // Last trade ID
	 
	
	"T" :  number , // 123456785  // Trade time
	 
	
	"m" :  boolean , // true  // Is the buyer the market maker?
	 
	
	"M" :  boolean , // true // Ignore 
	
	
	}
	
	
}

TradeStreams = {
	name: "Trade Streams"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "trade"  // Event type
	 
	
	"E" :  number , // 123456789  // Event time
	 
	
	"s" :  string , // "BNBBTC"  // Symbol
	 
	
	"t" :  number , // 12345  // Trade ID
	 
	
	"p" :  NumberString , // "0.001"  // Price
	 
	
	"q" :  NumberString , // "100"  // Quantity
	 
	
	"b" :  number , // 88  // Buyer order ID
	 
	
	"a" :  number , // 50  // Seller order ID
	 
	
	"T" :  number , // 123456785  // Trade time
	 
	
	"m" :  boolean , // true  // Is the buyer the market maker?
	 
	
	"M" :  boolean , // true // Ignore 
	
	
	}
	
	
}

KlineCandlestickStreams = {
	name: "Kline/Candlestick Streams"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "kline"  // Event type
	 
	
	"E" :  number , // 123456789  // Event time
	 
	
	"s" :  string , // "BNBBTC"  // Symbol
	 
	
	"k" : {
	
		"t" :  number , // 123400000  // Kline start time
	 
	
		"T" :  number , // 123460000  // Kline close time
	 
	
		"s" :  string , // "BNBBTC"  // Symbol
	 
	
		"i" :  string , // "1m"  // Interval
	 
	
		"f" :  number , // 100  // First trade ID
	 
	
		"L" :  number , // 200  // Last trade ID
	 
	
		"o" :  NumberString , // "0.0010"  // Open price
	 
	
		"c" :  NumberString , // "0.0020"  // Close price
	 
	
		"h" :  NumberString , // "0.0025"  // High price
	 
	
		"l" :  NumberString , // "0.0015"  // Low price
	 
	
		"v" :  NumberString , // "1000"  // Base asset volume
	 
	
		"n" :  number , // 100  // Number of trades
	 
	
		"x" :  boolean , // false  // Is this kline closed?
	 
	
		"q" :  NumberString , // "1.0000"  // Quote asset volume
	 
	
		"V" :  NumberString , // "500"  // Taker buy base asset volume
	 
	
		"Q" :  NumberString , // "0.500"  // Taker buy quote asset volume
	 
	
		"B" :  NumberString , // "123456" // Ignore 
	
		
		}
	
	
	}
	
	
}

IndividualSymbolMiniTickerStream = {
	name: "Individual Symbol Mini Ticker Stream"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "24hrMiniTicker"  // Event type
	 
	
	"E" :  number , // 123456789  // Event time
	 
	
	"s" :  string , // "BNBBTC"  // Symbol
	 
	
	"c" :  NumberString , // "0.0025"  // Close price
	 
	
	"o" :  NumberString , // "0.0010"  // Open price
	 
	
	"h" :  NumberString , // "0.0025"  // High price
	 
	
	"l" :  NumberString , // "0.0010"  // Low price
	 
	
	"v" :  NumberString , // "10000"  // Total traded base asset volume
	 
	
	"q" :  NumberString , // "18" // Total traded quote asset volume 
	
	
	}
	
	
}

AllMarketMiniTickersStream = {
	name: "All Market Mini Tickers Stream"
	nameType: ""
	wight: []
	req = [
	
	 {
	
		// Same as &lt;symbol&gt;@miniTicker payload 
	
		
		}
	
	
	]
	
	
}

IndividualSymbolTickerStreams = {
	name: "Individual Symbol Ticker Streams"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "24hrTicker"  // Event type
	 
	
	"E" :  number , // 123456789  // Event time
	 
	
	"s" :  string , // "BNBBTC"  // Symbol
	 
	
	"p" :  NumberString , // "0.0015"  // Price change
	 
	
	"P" :  NumberString , // "250.00"  // Price change percent
	 
	
	"w" :  NumberString , // "0.0018"  // Weighted average price
	 
	
	"x" :  NumberString , // "0.0009"  // First trade(F)-1 price (first trade before the 24hr rolling window)
	 
	
	"c" :  NumberString , // "0.0025"  // Last price
	 
	
	"Q" :  NumberString , // "10"  // Last quantity
	 
	
	"b" :  NumberString , // "0.0024"  // Best bid price
	 
	
	"B" :  NumberString , // "10"  // Best bid quantity
	 
	
	"a" :  NumberString , // "0.0026"  // Best ask price
	 
	
	"A" :  NumberString , // "100"  // Best ask quantity
	 
	
	"o" :  NumberString , // "0.0010"  // Open price
	 
	
	"h" :  NumberString , // "0.0025"  // High price
	 
	
	"l" :  NumberString , // "0.0010"  // Low price
	 
	
	"v" :  NumberString , // "10000"  // Total traded base asset volume
	 
	
	"q" :  NumberString , // "18"  // Total traded quote asset volume
	 
	
	"O" :  number , // 0  // Statistics open time
	 
	
	"C" :  number , // 86400000  // Statistics close time
	 
	
	"F" :  number , // 0  // First trade ID
	 
	
	"L" :  number , // 18150  // Last trade Id
	 
	
	"n" :  number , // 18151 // Total number of trades 
	
	
	}
	
	
}

AllMarketTickersStream = {
	name: "All Market Tickers Stream"
	nameType: ""
	wight: []
	req = [
	
	 {
	
		// Same as &lt;symbol&gt;@ticker payload 
	
		
		}
	
	
	]
	
	
}

IndividualSymbolRollingWindowStatisticsStreams = {
	name: "Individual Symbol Rolling Window Statistics Streams"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "1hTicker"  // Event type
	 
	
	"E" :  number , // 123456789  // Event time
	 
	
	"s" :  string , // "BNBBTC"  // Symbol
	 
	
	"p" :  NumberString , // "0.0015"  // Price change
	 
	
	"P" :  NumberString , // "250.00"  // Price change percent
	 
	
	"o" :  NumberString , // "0.0010"  // Open price
	 
	
	"h" :  NumberString , // "0.0025"  // High price
	 
	
	"l" :  NumberString , // "0.0010"  // Low price
	 
	
	"c" :  NumberString , // "0.0025"  // Last price
	 
	
	"w" :  NumberString , // "0.0018"  // Weighted average price
	 
	
	"v" :  NumberString , // "10000"  // Total traded base asset volume
	 
	
	"q" :  NumberString , // "18"  // Total traded quote asset volume
	 
	
	"O" :  number , // 0  // Statistics open time
	 
	
	"C" :  number , // 86400000  // Statistics close time
	 
	
	"F" :  number , // 0  // First trade ID
	 
	
	"L" :  number , // 18150  // Last trade Id
	 
	
	"n" :  number , // 18151 // Total number of trades 
	
	
	}
	
	
}

AllMarketRollingWindowStatisticsStreams = {
	name: "All Market Rolling Window Statistics Streams"
	nameType: ""
	wight: []
	req = [
	
	 {
	
		// Same as &lt;symbol&gt;@ticker_&lt;window-size&gt; payload, 
	
		// one for each symbol updated within the interval. 
	
		
		}
	
	
	]
	
	
}

IndividualSymbolBookTickerStreams = {
	name: "Individual Symbol Book Ticker Streams"
	nameType: ""
	wight: []
	req = {
	
	"u" :  number , // 400900217  // order book updateId
	 
	
	"s" :  string , // "BNBUSDT"  // symbol
	 
	
	"b" :  NumberString , // "25.35190000"  // best bid price
	 
	
	"B" :  NumberString , // "31.21000000"  // best bid qty
	 
	
	"a" :  NumberString , // "25.36520000"  // best ask price
	 
	
	"A" :  NumberString , // "40.66000000" // best ask qty 
	
	
	}
	
	
}

PartialBookDepthStreams = {
	name: "Partial Book Depth Streams"
	nameType: ""
	wight: []
	req = {
	
	"lastUpdateId" :  number , // 160  // Last update ID
	 
	
	"bids" : [ // Bids to be updated
	
	
		
	 [
			
	  NumberString , // "0.0024" 
	  // Price level to be updated
	
	
			
	  NumberString , // "10" // Quantity
	
	
			
	 
			]
	
		
		],
	
	"asks" : [ // Asks to be updated
	
	
		
	 [
			
	  NumberString , // "0.0026" 
	  // Price level to be updated
	
	
			
	  NumberString , // "100" // Quantity
	
	
			
	 
			]
	
		
		]
	
	
	}
	
	
}

Diff.DepthStream = {
	name: "Diff. Depth Stream"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "depthUpdate"  // Event type
	 
	
	"E" :  number , // 123456789  // Event time
	 
	
	"s" :  string , // "BNBBTC"  // Symbol
	 
	
	"U" :  number , // 157  // First update ID in event
	 
	
	"u" :  number , // 160  // Final update ID in event
	 
	
	"b" : [ // Bids to be updated
	
	
		
	 [
			
	  NumberString , // "0.0024" 
	  // Price level to be updated
	
	
			
	  NumberString , // "10" // Quantity
	
	
			
	 
			]
	
		
		],
	
	"a" : [ // Asks to be updated
	
	
		
	 [
			
	  NumberString , // "0.0026" 
	  // Price level to be updated
	
	
			
	  NumberString , // "100" // Quantity
	
	
			
	 
			]
	
		
		]
	
	
	}
	
	
}

Howtomanagealocalorderbookcorrectly = {
	name: "How to manage a local order book correctly"
	nameType: ""
	wight: []
	req = {}
}

TestNewOrder = {
	name: "Test New Order (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : ""
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/api/v3/order/test"
		HMAC : true
	}
	req = {} 
	
	
}

NewOrder = {
	name: "New Order  (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 1
		} ,
		{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/api/v3/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		side : ENUM
		type : ENUM
		timeInForce? : ENUM
		quantity? : DECIMAL
		quoteOrderQty? : DECIMAL
		price? : DECIMAL
		newClientOrderId? : STRING // A unique id among open orders. Automatically generated if not sent.
		strategyId? : INT
		strategyType? : INT // The value cannot be less than 
		stopPrice? : DECIMAL // Used with 
		trailingDelta? : LONG // Used with 
		icebergQty? : DECIMAL // Used with 
		newOrderRespType? : ENUM // Set the response JSON. 
		selfTradePreventionMode? : ENUM // The allowed enums is dependent on what is configured on the symbol. The possible supported values are 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"symbol" :  string , // "BTCUSDT"  
	
	"orderId" :  number , // 28  
	
	"orderListId" :  number , // 1  //Unless OCO, value will be -1
	 
	
	"clientOrderId" :  string , // "6gCrw2kRUAF9CvJDGP16IP"  
	
	"transactTime" :  number , // 1507725176595 
	
	
	}
	
	{
	
	"symbol" :  string , // "BTCUSDT"  
	
	"orderId" :  number , // 28  
	
	"orderListId" :  number , // 1  //Unless OCO, value will be -1
	 
	
	"clientOrderId" :  string , // "6gCrw2kRUAF9CvJDGP16IP"  
	
	"transactTime" :  number , // 1507725176595  
	
	"price" :  NumberString , // "0.00000000"  
	
	"origQty" :  NumberString , // "10.00000000"  
	
	"executedQty" :  NumberString , // "10.00000000"  
	
	"cummulativeQuoteQty" :  NumberString , // "10.00000000"  
	
	"status" :  string , // "FILLED"  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "MARKET"  
	
	"side" :  string , // "SELL"  
	
	"workingTime" :  number , // 1507725176595  
	
	"selfTradePreventionMode" :  string , // "NONE" 
	
	
	}
	
	{
	
	"symbol" :  string , // "BTCUSDT"  
	
	"orderId" :  number , // 28  
	
	"orderListId" :  number , // 1  //Unless OCO, value will be -1
	 
	
	"clientOrderId" :  string , // "6gCrw2kRUAF9CvJDGP16IP"  
	
	"transactTime" :  number , // 1507725176595  
	
	"price" :  NumberString , // "0.00000000"  
	
	"origQty" :  NumberString , // "10.00000000"  
	
	"executedQty" :  NumberString , // "10.00000000"  
	
	"cummulativeQuoteQty" :  NumberString , // "10.00000000"  
	
	"status" :  string , // "FILLED"  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "MARKET"  
	
	"side" :  string , // "SELL"  
	
	"workingTime" :  number , // 1507725176595  
	
	"selfTradePreventionMode" :  string , // "NONE"  
	
	"fills" : [
		
	 {
	
			"price" :  NumberString , // "4000.00000000"  
	
			"qty" :  NumberString , // "1.00000000"  
	
			"commission" :  NumberString , // "4.00000000"  
	
			"commissionAsset" :  string , // "USDT"  
	
			"tradeId" :  number , // 56 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3999.00000000"  
	
			"qty" :  NumberString , // "5.00000000"  
	
			"commission" :  NumberString , // "19.99500000"  
	
			"commissionAsset" :  string , // "USDT"  
	
			"tradeId" :  number , // 57 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3998.00000000"  
	
			"qty" :  NumberString , // "2.00000000"  
	
			"commission" :  NumberString , // "7.99600000"  
	
			"commissionAsset" :  string , // "USDT"  
	
			"tradeId" :  number , // 58 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3997.00000000"  
	
			"qty" :  NumberString , // "1.00000000"  
	
			"commission" :  NumberString , // "3.99700000"  
	
			"commissionAsset" :  string , // "USDT"  
	
			"tradeId" :  number , // 59 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3995.00000000"  
	
			"qty" :  NumberString , // "1.00000000"  
	
			"commission" :  NumberString , // "3.99500000"  
	
			"commissionAsset" :  string , // "USDT"  
	
			"tradeId" :  number , // 60 
	
			
			}
	
		
		]
	
	
	}
	
	
}

CancelOrder = {
	name: "Cancel Order (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		url : "DELETE/api/v3/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		orderId? : LONG
		origClientOrderId? : STRING
		newClientOrderId? : STRING // Used to uniquely identify this cancel. Automatically generated by default.
		cancelRestrictions? : ENUM // Supported values: 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"symbol" :  string , // "LTCBTC"  
	
	"origClientOrderId" :  string , // "myOrder1"  
	
	"orderId" :  number , // 4  
	
	"orderListId" :  number , // 1  //Unless part of an OCO, the value will always be -1.
	 
	
	"clientOrderId" :  string , // "cancelMyOrder1"  
	
	"price" :  NumberString , // "2.00000000"  
	
	"origQty" :  NumberString , // "1.00000000"  
	
	"executedQty" :  NumberString , // "0.00000000"  
	
	"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
	"status" :  string , // "CANCELED"  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "LIMIT"  
	
	"side" :  string , // "BUY"  
	
	"selfTradePreventionMode" :  string , // "NONE" 
	
	
	}
	
	
}

CancelallOpenOrdersonaSymbol = {
	name: "Cancel all Open Orders on a Symbol (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		url : "DELETE/api/v3/openOrders"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "BTCUSDT"  
	
		"origClientOrderId" :  string , // "E6APeyTJvkMvLMYMqu1KQ4"  
	
		"orderId" :  number , // 11  
	
		"orderListId" :  number , // 1  
	
		"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
		"price" :  NumberString , // "0.089853"  
	
		"origQty" :  NumberString , // "0.178622"  
	
		"executedQty" :  NumberString , // "0.000000"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
		"status" :  string , // "CANCELED"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "BUY"  
	
		"selfTradePreventionMode" :  string , // "NONE" 
	
		
		},
	
	{
	
		"symbol" :  string , // "BTCUSDT"  
	
		"origClientOrderId" :  string , // "A3EF2HCwxgZPFMrfwbgrhv"  
	
		"orderId" :  number , // 13  
	
		"orderListId" :  number , // 1  
	
		"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
		"price" :  NumberString , // "0.090430"  
	
		"origQty" :  NumberString , // "0.178622"  
	
		"executedQty" :  NumberString , // "0.000000"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
		"status" :  string , // "CANCELED"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "BUY"  
	
		"selfTradePreventionMode" :  string , // "NONE" 
	
		
		},
	
	{
	
		"orderListId" :  number , // 1929  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "ALL_DONE"  
	
		"listOrderStatus" :  string , // "ALL_DONE"  
	
		"listClientOrderId" :  string , // "2inzWQdDvZLHbbAmAozX2N"  
	
		"transactionTime" :  number , // 1585230948299  
	
		"symbol" :  string , // "BTCUSDT"  
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "BTCUSDT"  
	
				"orderId" :  number , // 20  
	
				"clientOrderId" :  string , // "CwOOIPHSmYywx6jZX77TdL" 
	
				
				},
	
			{
	
				"symbol" :  string , // "BTCUSDT"  
	
				"orderId" :  number , // 21  
	
				"clientOrderId" :  string , // "461cPg51vQjV3zIMOXNz39" 
	
				
				}
	
			
			],
	
		"orderReports" : [
			
	 {
	
				"symbol" :  string , // "BTCUSDT"  
	
				"origClientOrderId" :  string , // "CwOOIPHSmYywx6jZX77TdL"  
	
				"orderId" :  number , // 20  
	
				"orderListId" :  number , // 1929  
	
				"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
				"price" :  NumberString , // "0.668611"  
	
				"origQty" :  NumberString , // "0.690354"  
	
				"executedQty" :  NumberString , // "0.000000"  
	
				"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
				"status" :  string , // "CANCELED"  
	
				"timeInForce" :  string , // "GTC"  
	
				"type" :  string , // "STOP_LOSS_LIMIT"  
	
				"side" :  string , // "BUY"  
	
				"stopPrice" :  NumberString , // "0.378131"  
	
				"icebergQty" :  NumberString , // "0.017083"  
	
				"selfTradePreventionMode" :  string , // "NONE" 
	
				
				},
	
			{
	
				"symbol" :  string , // "BTCUSDT"  
	
				"origClientOrderId" :  string , // "461cPg51vQjV3zIMOXNz39"  
	
				"orderId" :  number , // 21  
	
				"orderListId" :  number , // 1929  
	
				"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
				"price" :  NumberString , // "0.008791"  
	
				"origQty" :  NumberString , // "0.690354"  
	
				"executedQty" :  NumberString , // "0.000000"  
	
				"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
				"status" :  string , // "CANCELED"  
	
				"timeInForce" :  string , // "GTC"  
	
				"type" :  string , // "LIMIT_MAKER"  
	
				"side" :  string , // "BUY"  
	
				"icebergQty" :  NumberString , // "0.639962"  
	
				"selfTradePreventionMode" :  string , // "NONE" 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
}

QueryOrder = {
	name: "Query Order (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 2
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		orderId? : LONG
		origClientOrderId? : STRING
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"symbol" :  string , // "LTCBTC"  
	
	"orderId" :  number , // 1  
	
	"orderListId" :  number , // 1  //Unless OCO, value will be -1
	 
	
	"clientOrderId" :  string , // "myOrder1"  
	
	"price" :  NumberString , // "0.1"  
	
	"origQty" :  NumberString , // "1.0"  
	
	"executedQty" :  NumberString , // "0.0"  
	
	"cummulativeQuoteQty" :  NumberString , // "0.0"  
	
	"status" :  string , // "NEW"  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "LIMIT"  
	
	"side" :  string , // "BUY"  
	
	"stopPrice" :  NumberString , // "0.0"  
	
	"icebergQty" :  NumberString , // "0.0"  
	
	"time" :  number , // 1499827319559  
	
	"updateTime" :  number , // 1499827319559  
	
	"isWorking" :  boolean , // true  
	
	"workingTime" :  number , // 1499827319559  
	
	"origQuoteOrderQty" :  NumberString , // "0.000000"  
	
	"selfTradePreventionMode" :  string , // "NONE" 
	
	
	}
	
	
}

CancelanExistingOrderandSendaNewOrder = {
	name: "Cancel an Existing Order and Send a New Order (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/api/v3/order/cancelReplace"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		side : ENUM
		type : ENUM
		cancelReplaceMode : ENUM // The allowed values are: 
		timeInForce? : ENUM
		quantity? : DECIMAL
		quoteOrderQty? : DECIMAL
		price? : DECIMAL
		cancelNewClientOrderId? : STRING // Used to uniquely identify this cancel. Automatically generated by default.
		cancelOrigClientOrderId? : STRING // Either the 
		cancelOrderId? : LONG // Either the 
		newClientOrderId? : STRING // Used to identify the new order.
		strategyId? : INT
		strategyType? : INT // The value cannot be less than 
		stopPrice? : DECIMAL
		trailingDelta? : LONG
		icebergQty? : DECIMAL
		newOrderRespType? : ENUM // Allowed values: 
		selfTradePreventionMode? : ENUM // The allowed enums is dependent on what is configured on the symbol. The possible supported values are 
		cancelRestrictions? : ENUM // Supported values: 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = //Both the cancel order placement and new order placement succeeded. 
	
	{
	
	"cancelResult" :  string , // "SUCCESS"  
	
	"newOrderResult" :  string , // "SUCCESS"  
	
	"cancelResponse" : {
	
		"symbol" :  string , // "BTCUSDT"  
	
		"origClientOrderId" :  string , // "DnLo3vTAQcjha43lAZhZ0y"  
	
		"orderId" :  number , // 9  
	
		"orderListId" :  number , // 1  
	
		"clientOrderId" :  string , // "osxN3JXAtJvKvCqGeMWMVR"  
	
		"price" :  NumberString , // "0.01000000"  
	
		"origQty" :  NumberString , // "0.000100"  
	
		"executedQty" :  NumberString , // "0.00000000"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
		"status" :  string , // "CANCELED"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "SELL"  
	
		"selfTradePreventionMode" :  string , // "NONE" 
	
		
		},
	
	"newOrderResponse" : {
	
		"symbol" :  string , // "BTCUSDT"  
	
		"orderId" :  number , // 10  
	
		"orderListId" :  number , // 1  
	
		"clientOrderId" :  string , // "wOceeeOzNORyLiQfw7jd8S"  
	
		"transactTime" :  number , // 1652928801803  
	
		"price" :  NumberString , // "0.02000000"  
	
		"origQty" :  NumberString , // "0.040000"  
	
		"executedQty" :  NumberString , // "0.00000000"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
		"status" :  string , // "NEW"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "BUY"  
	
		"workingTime" :  number , // 1669277163808  
	
		"fills" :  number , // [], 
	
		"selfTradePreventionMode" :  string , // "NONE" 
	
		
		}
	
	
	}
	
	{
	
	"code" :  number , // 2022  
	
	"msg" :  string , // "Order cancel-replace failed."  
	
	"data" : {
	
		"cancelResult" :  string , // "FAILURE"  
	
		"newOrderResult" :  string , // "NOT_ATTEMPTED"  
	
		"cancelResponse" : {
	
			"code" :  number , // 2011  
	
			"msg" :  string , // "Unknown order sent." 
	
			
			},
	
		"newOrderResponse" :  number , // null 
	
		
		}
	
	
	}
	
	{
	
	"code" :  number , // 2021  
	
	"msg" :  string , // "Order cancel-replace partially failed."  
	
	"data" : {
	
		"cancelResult" :  string , // "SUCCESS"  
	
		"newOrderResult" :  string , // "FAILURE"  
	
		"cancelResponse" : {
	
			"symbol" :  string , // "BTCUSDT"  
	
			"origClientOrderId" :  string , // "86M8erehfExV8z2RC8Zo8k"  
	
			"orderId" :  number , // 3  
	
			"orderListId" :  number , // 1  
	
			"clientOrderId" :  string , // "G1kLo6aDv2KGNTFcjfTSFq"  
	
			"price" :  NumberString , // "0.006123"  
	
			"origQty" :  NumberString , // "10000.000000"  
	
			"executedQty" :  NumberString , // "0.000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
			"status" :  string , // "CANCELED"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "LIMIT_MAKER"  
	
			"side" :  string , // "SELL"  
	
			"selfTradePreventionMode" :  string , // "NONE" 
	
			
			},
	
		"newOrderResponse" : {
	
			"code" :  number , // 2010  
	
			"msg" :  string , // "Order would immediately match and take." 
	
			
			}
	
		
		}
	
	
	}
	
	{
	
	"code" :  number , // 2021  
	
	"msg" :  string , // "Order cancel-replace partially failed."  
	
	"data" : {
	
		"cancelResult" :  string , // "FAILURE"  
	
		"newOrderResult" :  string , // "SUCCESS"  
	
		"cancelResponse" : {
	
			"code" :  number , // 2011  
	
			"msg" :  string , // "Unknown order sent." 
	
			
			},
	
		"newOrderResponse" : {
	
			"symbol" :  string , // "BTCUSDT"  
	
			"orderId" :  number , // 11  
	
			"orderListId" :  number , // 1  
	
			"clientOrderId" :  string , // "pfojJMg6IMNDKuJqDxvoxN"  
	
			"transactTime" :  number , // 1648540168818 
	
			
			}
	
		
		}
	
	
	}
	
	{
	
	"code" :  number , // 2022  
	
	"msg" :  string , // "Order cancel-replace failed."  
	
	"data" : {
	
		"cancelResult" :  string , // "FAILURE"  
	
		"newOrderResult" :  string , // "FAILURE"  
	
		"cancelResponse" : {
	
			"code" :  number , // 2011  
	
			"msg" :  string , // "Unknown order sent." 
	
			
			},
	
		"newOrderResponse" : {
	
			"code" :  number , // 2010  
	
			"msg" :  string , // "Order would immediately match and take." 
	
			
			}
	
		
		}
	
	
	}
	
	
}

CurrentOpenOrders = {
	name: "Current Open Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/openOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "LTCBTC"  
	
		"orderId" :  number , // 1  
	
		"orderListId" :  number , // 1  //Unless OCO, the value will always be -1
	 
	
		"clientOrderId" :  string , // "myOrder1"  
	
		"price" :  NumberString , // "0.1"  
	
		"origQty" :  NumberString , // "1.0"  
	
		"executedQty" :  NumberString , // "0.0"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.0"  
	
		"status" :  string , // "NEW"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "BUY"  
	
		"stopPrice" :  NumberString , // "0.0"  
	
		"icebergQty" :  NumberString , // "0.0"  
	
		"time" :  number , // 1499827319559  
	
		"updateTime" :  number , // 1499827319559  
	
		"isWorking" :  boolean , // true  
	
		"workingTime" :  number , // 1499827319559  
	
		"origQuoteOrderQty" :  NumberString , // "0.000000"  
	
		"selfTradePreventionMode" :  string , // "NONE" 
	
		
		}
	
	
	]
	
	
}

AllOrders = {
	name: "All Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/allOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		orderId? : LONG
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 500; max 1000.
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "LTCBTC"  
	
		"orderId" :  number , // 1  
	
		"orderListId" :  number , // 1  //Unless OCO, the value will always be -1
	 
	
		"clientOrderId" :  string , // "myOrder1"  
	
		"price" :  NumberString , // "0.1"  
	
		"origQty" :  NumberString , // "1.0"  
	
		"executedQty" :  NumberString , // "0.0"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.0"  
	
		"status" :  string , // "NEW"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "BUY"  
	
		"stopPrice" :  NumberString , // "0.0"  
	
		"icebergQty" :  NumberString , // "0.0"  
	
		"time" :  number , // 1499827319559  
	
		"updateTime" :  number , // 1499827319559  
	
		"isWorking" :  boolean , // true  
	
		"origQuoteOrderQty" :  NumberString , // "0.000000"  
	
		"workingTime" :  number , // 1499827319559  
	
		"selfTradePreventionMode" :  string , // "NONE" 
	
		
		}
	
	
	]
	
	
}

NewOCO = {
	name: "New OCO (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 2
		} ,
		{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/api/v3/order/oco"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		listClientOrderId? : STRING // A unique Id for the entire orderList
		side : ENUM
		quantity : DECIMAL
		limitClientOrderId? : STRING // A unique Id for the limit order
		limitStrategyId? : INT
		limitStrategyType? : INT // The value cannot be less than 
		price : DECIMAL
		limitIcebergQty? : DECIMAL
		trailingDelta? : LONG
		stopClientOrderId? : STRING // A unique Id for the stop loss/stop loss limit leg
		stopPrice : DECIMAL
		stopStrategyId? : INT
		stopStrategyType? : INT // The value cannot be less than 
		stopLimitPrice? : DECIMAL // If provided, 
		stopIcebergQty? : DECIMAL
		stopLimitTimeInForce? : ENUM // Valid values are 
		newOrderRespType? : ENUM // Set the response JSON.
		selfTradePreventionMode? : ENUM // The allowed enums is dependent on what is configured on the symbol. The possible supported values are 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"orderListId" :  number , // 0  
	
	"contingencyType" :  string , // "OCO"  
	
	"listStatusType" :  string , // "EXEC_STARTED"  
	
	"listOrderStatus" :  string , // "EXECUTING"  
	
	"listClientOrderId" :  string , // "JYVpp3F0f5CAG15DhtrqLp"  
	
	"transactionTime" :  number , // 1563417480525  
	
	"symbol" :  string , // "LTCBTC"  
	
	"orders" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 2  
	
			"clientOrderId" :  string , // "Kk7sqHb9J6mJWTMDVW7Vos" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 3  
	
			"clientOrderId" :  string , // "xTXKaGYd4bluPVp78IVRvl" 
	
			
			}
	
		
		],
	
	"orderReports" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 2  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "Kk7sqHb9J6mJWTMDVW7Vos"  
	
			"transactTime" :  number , // 1563417480525  
	
			"price" :  NumberString , // "0.000000"  
	
			"origQty" :  NumberString , // "0.624363"  
	
			"executedQty" :  NumberString , // "0.000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
			"status" :  string , // "NEW"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "STOP_LOSS"  
	
			"side" :  string , // "BUY"  
	
			"stopPrice" :  NumberString , // "0.960664"  
	
			"workingTime" :  number , // 1  
	
			"selfTradePreventionMode" :  string , // "NONE" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 3  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "xTXKaGYd4bluPVp78IVRvl"  
	
			"transactTime" :  number , // 1563417480525  
	
			"price" :  NumberString , // "0.036435"  
	
			"origQty" :  NumberString , // "0.624363"  
	
			"executedQty" :  NumberString , // "0.000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
			"status" :  string , // "NEW"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "LIMIT_MAKER"  
	
			"side" :  string , // "BUY"  
	
			"workingTime" :  number , // 1563417480525  
	
			"selfTradePreventionMode" :  string , // "NONE" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

CancelOCO = {
	name: "Cancel OCO (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		orderListId? : LONG // Either 
		listClientOrderId? : STRING // Either 
		newClientOrderId? : STRING // Used to uniquely identify this cancel. Automatically generated by default
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"orderListId" :  number , // 0  
	
	"contingencyType" :  string , // "OCO"  
	
	"listStatusType" :  string , // "ALL_DONE"  
	
	"listOrderStatus" :  string , // "ALL_DONE"  
	
	"listClientOrderId" :  string , // "C3wyj4WVEktd7u9aVBRXcN"  
	
	"transactionTime" :  number , // 1574040868128  
	
	"symbol" :  string , // "LTCBTC"  
	
	"orders" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 2  
	
			"clientOrderId" :  string , // "pO9ufTiFGg3nw2fOdgeOXa" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 3  
	
			"clientOrderId" :  string , // "TXOvglzXuaubXAaENpaRCB" 
	
			
			}
	
		
		],
	
	"orderReports" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"origClientOrderId" :  string , // "pO9ufTiFGg3nw2fOdgeOXa"  
	
			"orderId" :  number , // 2  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "unfWT8ig8i0uj6lPuYLez6"  
	
			"price" :  NumberString , // "1.00000000"  
	
			"origQty" :  NumberString , // "10.00000000"  
	
			"executedQty" :  NumberString , // "0.00000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
			"status" :  string , // "CANCELED"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "STOP_LOSS_LIMIT"  
	
			"side" :  string , // "SELL"  
	
			"stopPrice" :  NumberString , // "1.00000000"  
	
			"selfTradePreventionMode" :  string , // "NONE" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"origClientOrderId" :  string , // "TXOvglzXuaubXAaENpaRCB"  
	
			"orderId" :  number , // 3  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "unfWT8ig8i0uj6lPuYLez6"  
	
			"price" :  NumberString , // "3.00000000"  
	
			"origQty" :  NumberString , // "10.00000000"  
	
			"executedQty" :  NumberString , // "0.00000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
			"status" :  string , // "CANCELED"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "LIMIT_MAKER"  
	
			"side" :  string , // "SELL"  
	
			"selfTradePreventionMode" :  string , // "NONE" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryOCO = {
	name: "Query OCO (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 2
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/orderList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		orderListId? : LONG // Either 
		origClientOrderId? : STRING // Either 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"orderListId" :  number , // 27  
	
	"contingencyType" :  string , // "OCO"  
	
	"listStatusType" :  string , // "EXEC_STARTED"  
	
	"listOrderStatus" :  string , // "EXECUTING"  
	
	"listClientOrderId" :  string , // "h2USkA5YQpaXHPIrkd96xE"  
	
	"transactionTime" :  number , // 1565245656253  
	
	"symbol" :  string , // "LTCBTC"  
	
	"orders" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 4  
	
			"clientOrderId" :  string , // "qD1gy3kc3Gx0rihm9Y3xwS" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 5  
	
			"clientOrderId" :  string , // "ARzZ9I00CPM8i3NhmU9Ega" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryallOCO = {
	name: "Query all OCO (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/allOrderList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		fromId? : LONG // If supplied, neither 
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default Value: 500; Max Value: 1000
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"orderListId" :  number , // 29  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "EXEC_STARTED"  
	
		"listOrderStatus" :  string , // "EXECUTING"  
	
		"listClientOrderId" :  string , // "amEEAXryFzFwYF1FeRpUoZ"  
	
		"transactionTime" :  number , // 1565245913483  
	
		"symbol" :  string , // "LTCBTC"  
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 4  
	
				"clientOrderId" :  string , // "oD7aesZqjEGlZrbtRpy5zB" 
	
				
				},
	
			{
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 5  
	
				"clientOrderId" :  string , // "Jr1h6xirOxgeJOUuYQS7V3" 
	
				
				}
	
			
			]
	
		
		},
	
	{
	
		"orderListId" :  number , // 28  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "EXEC_STARTED"  
	
		"listOrderStatus" :  string , // "EXECUTING"  
	
		"listClientOrderId" :  string , // "hG7hFNxJV6cZy3Ze4AUT4d"  
	
		"transactionTime" :  number , // 1565245913407  
	
		"symbol" :  string , // "LTCBTC"  
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 2  
	
				"clientOrderId" :  string , // "j6lFOfbmFMRjTYA7rRJ0LP" 
	
				
				},
	
			{
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 3  
	
				"clientOrderId" :  string , // "z0KCjOdditiLS5ekAFtK81" 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
}

QueryOpenOCO = {
	name: "Query Open OCO (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 3
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/openOrderList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"orderListId" :  number , // 31  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "EXEC_STARTED"  
	
		"listOrderStatus" :  string , // "EXECUTING"  
	
		"listClientOrderId" :  string , // "wuB13fmulKj3YjdqWEcsnp"  
	
		"transactionTime" :  number , // 1565246080644  
	
		"symbol" :  string , // "LTCBTC"  
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 4  
	
				"clientOrderId" :  string , // "r3EH2N76dHfLoSZWIUw1bT" 
	
				
				},
	
			{
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 5  
	
				"clientOrderId" :  string , // "Cv1SnyPD3qhqpbjpYEHbd2" 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
}

AccountInformation = {
	name: "Account Information (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/account"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"makerCommission" :  number , // 15  
	
	"takerCommission" :  number , // 15  
	
	"buyerCommission" :  number , // 0  
	
	"sellerCommission" :  number , // 0  
	
	"commissionRates" : {
	
		"maker" :  NumberString , // "0.00150000"  
	
		"taker" :  NumberString , // "0.00150000"  
	
		"buyer" :  NumberString , // "0.00000000"  
	
		"seller" :  NumberString , // "0.00000000" 
	
		
		},
	
	"canTrade" :  boolean , // true  
	
	"canWithdraw" :  boolean , // true  
	
	"canDeposit" :  boolean , // true  
	
	"brokered" :  boolean , // false  
	
	"requireSelfTradePrevention" :  boolean , // false  
	
	"updateTime" :  number , // 123456789  
	
	"accountType" :  string , // "SPOT"  
	
	"balances" : [
		
	 {
	
			"asset" :  string , // "BTC"  
	
			"free" :  NumberString , // "4723846.89208129"  
	
			"locked" :  NumberString , // "0.00000000" 
	
			
			},
	
		{
	
			"asset" :  string , // "LTC"  
	
			"free" :  NumberString , // "4763368.68006011"  
	
			"locked" :  NumberString , // "0.00000000" 
	
			
			}
	
		
		],
	
	"permissions" : [
		
	  string , // "SPOT"
		
	 
		]
	
	
	}
	
	
}

AccountTradeList = {
	name: "Account Trade List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/myTrades"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		orderId? : LONG // This can only be used in combination with 
		startTime? : LONG
		endTime? : LONG
		fromId? : LONG // TradeId to fetch from. Default gets most recent trades.
		limit? : INT // Default 500; max 1000.
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "BNBBTC"  
	
		"id" :  number , // 28457  
	
		"orderId" :  number , // 100234  
	
		"orderListId" :  number , // 1  //Unless OCO, the value will always be -1
	 
	
		"price" :  NumberString , // "4.00000100"  
	
		"qty" :  NumberString , // "12.00000000"  
	
		"quoteQty" :  NumberString , // "48.000012"  
	
		"commission" :  NumberString , // "10.10000000"  
	
		"commissionAsset" :  string , // "BNB"  
	
		"time" :  number , // 1499865549590  
	
		"isBuyer" :  boolean , // true  
	
		"isMaker" :  boolean , // false  
	
		"isBestMatch" :  boolean , // true 
	
		
		}
	
	
	]
	
	
}

QueryCurrentOrderCountUsage = {
	name: "Query Current Order Count Usage (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 20
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/rateLimit/order"
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"rateLimitType" :  string , // "ORDERS"  
	
		"interval" :  string , // "SECOND"  
	
		"intervalNum" :  number , // 10  
	
		"limit" :  number , // 10000  
	
		"count" :  number , // 0 
	
		
		},
	
	{
	
		"rateLimitType" :  string , // "ORDERS"  
	
		"interval" :  string , // "DAY"  
	
		"intervalNum" :  number , // 1  
	
		"limit" :  number , // 20000  
	
		"count" :  number , // 0 
	
		
		}
	
	
	]
	
	
}

QueryPreventedMatches = {
	name: "Query Prevented Matches (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/api/v3/myPreventedMatches"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		preventedMatchId? : LONG
		orderId? : LONG
		fromPreventedMatchId? : LONG
		limit? : INT // Default: 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "BTCUSDT"  
	
		"preventedMatchId" :  number , // 1  
	
		"takerOrderId" :  number , // 5  
	
		"makerOrderId" :  number , // 3  
	
		"tradeGroupId" :  number , // 1  
	
		"selfTradePreventionMode" :  string , // "EXPIRE_MAKER"  
	
		"price" :  NumberString , // "1.100000"  
	
		"makerPreventedQuantity" :  NumberString , // "1.300000"  
	
		"transactTime" :  number , // 1669101687094 
	
		
		}
	
	
	]
	
	
}

CrossMarginAccountTransfer = {
	name: "Cross Margin Account Transfer (MARGIN)"
	nameType: "MARGIN"
	wight: [{
			name : "IP"
			data : 600
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/margin/transfer"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING // The asset being transferred, e.g., BTC
		amount : DECIMAL // The amount to be transferred
		type : INT // 1: transfer from main account to cross margin account 2: transfer from cross margin account to main account
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	//transaction id 
	
	"tranId" :  number , // 100000001 
	
	
	}
	
	
}

MarginAccountBorrow = {
	name: "Margin Account Borrow (MARGIN)"
	nameType: "MARGIN"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/margin/loan"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		symbol? : STRING // isolated symbol
		amount : DECIMAL
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	//transaction id 
	
	"tranId" :  number , // 100000001 
	
	
	}
	
	
}

MarginAccountRepay = {
	name: "Margin Account Repay (MARGIN)"
	nameType: "MARGIN"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/margin/repay"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		symbol? : STRING // isolated symbol
		amount : DECIMAL
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	//transaction id 
	
	"tranId" :  number , // 100000001 
	
	
	}
	
	
}

QueryMarginAsset = {
	name: "Query Margin Asset (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/asset"
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING
	}
	req = {
	
	"assetFullName" :  string , // "Binance Coin"  
	
	"assetName" :  string , // "BNB"  
	
	"isBorrowable" :  boolean , // false  
	
	"isMortgageable" :  boolean , // true  
	
	"userMinBorrow" :  NumberString , // "0.00000000"  
	
	"userMinRepay" :  NumberString , // "0.00000000" 
	
	
	}
	
	
}

QueryCrossMarginPair = {
	name: "Query Cross Margin Pair (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/pair"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
	}
	req = {
	
	"id" :  number , // 323355778339572400  
	
	"symbol" :  string , // "BTCUSDT"  
	
	"base" :  string , // "BTC"  
	
	"quote" :  string , // "USDT"  
	
	"isMarginTrade" :  boolean , // true  
	
	"isBuyAllowed" :  boolean , // true  
	
	"isSellAllowed" :  boolean , // true 
	
	
	}
	
	
}

GetAllMarginAssets = {
	name: "Get All Margin Assets (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/allAssets"
	}
	req = [
	
	 {
	
		"assetFullName" :  string , // "USD coin"  
	
		"assetName" :  string , // "USDC"  
	
		"isBorrowable" :  boolean , // true  
	
		"isMortgageable" :  boolean , // true  
	
		"userMinBorrow" :  NumberString , // "0.00000000"  
	
		"userMinRepay" :  NumberString , // "0.00000000" 
	
		
		},
	
	{
	
		"assetFullName" :  string , // "BNB-coin"  
	
		"assetName" :  string , // "BNB"  
	
		"isBorrowable" :  boolean , // true  
	
		"isMortgageable" :  boolean , // true  
	
		"userMinBorrow" :  NumberString , // "1.00000000"  
	
		"userMinRepay" :  NumberString , // "0.00000000" 
	
		
		},
	
	{
	
		"assetFullName" :  string , // "Tether"  
	
		"assetName" :  string , // "USDT"  
	
		"isBorrowable" :  boolean , // true  
	
		"isMortgageable" :  boolean , // true  
	
		"userMinBorrow" :  NumberString , // "1.00000000"  
	
		"userMinRepay" :  NumberString , // "0.00000000" 
	
		
		},
	
	{
	
		"assetFullName" :  string , // "etherum"  
	
		"assetName" :  string , // "ETH"  
	
		"isBorrowable" :  boolean , // true  
	
		"isMortgageable" :  boolean , // true  
	
		"userMinBorrow" :  NumberString , // "0.00000000"  
	
		"userMinRepay" :  NumberString , // "0.00000000" 
	
		
		},
	
	{
	
		"assetFullName" :  string , // "Bitcoin"  
	
		"assetName" :  string , // "BTC"  
	
		"isBorrowable" :  boolean , // true  
	
		"isMortgageable" :  boolean , // true  
	
		"userMinBorrow" :  NumberString , // "0.00000000"  
	
		"userMinRepay" :  NumberString , // "0.00000000" 
	
		
		}
	
	
	]
	
	
}

GetAllCrossMarginPairs = {
	name: "Get All Cross Margin Pairs (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/allPairs"
	}
	req = [
	
	 {
	
		"base" :  string , // "BNB"  
	
		"id" :  number , // 351637150141315861  
	
		"isBuyAllowed" :  boolean , // true  
	
		"isMarginTrade" :  boolean , // true  
	
		"isSellAllowed" :  boolean , // true  
	
		"quote" :  string , // "BTC"  
	
		"symbol" :  string , // "BNBBTC" 
	
		
		},
	
	{
	
		"base" :  string , // "TRX"  
	
		"id" :  number , // 351637923235429141  
	
		"isBuyAllowed" :  boolean , // true  
	
		"isMarginTrade" :  boolean , // true  
	
		"isSellAllowed" :  boolean , // true  
	
		"quote" :  string , // "BTC"  
	
		"symbol" :  string , // "TRXBTC" 
	
		
		},
	
	{
	
		"base" :  string , // "XRP"  
	
		"id" :  number , // 351638112213990165  
	
		"isBuyAllowed" :  boolean , // true  
	
		"isMarginTrade" :  boolean , // true  
	
		"isSellAllowed" :  boolean , // true  
	
		"quote" :  string , // "BTC"  
	
		"symbol" :  string , // "XRPBTC" 
	
		
		},
	
	{
	
		"base" :  string , // "ETH"  
	
		"id" :  number , // 351638524530850581  
	
		"isBuyAllowed" :  boolean , // true  
	
		"isMarginTrade" :  boolean , // true  
	
		"isSellAllowed" :  boolean , // true  
	
		"quote" :  string , // "BTC"  
	
		"symbol" :  string , // "ETHBTC" 
	
		
		},
	
	{
	
		"base" :  string , // "BNB"  
	
		"id" :  number , // 376870400832855109  
	
		"isBuyAllowed" :  boolean , // true  
	
		"isMarginTrade" :  boolean , // true  
	
		"isSellAllowed" :  boolean , // true  
	
		"quote" :  string , // "USDT"  
	
		"symbol" :  string , // "BNBUSDT" 
	
		
		}
	
	
	]
	
	
}

QueryMarginPriceIndex = {
	name: "Query Margin PriceIndex (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/priceIndex"
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
	}
	req = {
	
	"calcTime" :  number , // 1562046418000  
	
	"price" :  NumberString , // "0.00333930"  
	
	"symbol" :  string , // "BNBBTC" 
	
	
	}
	
	
}

MarginAccountNewOrder = {
	name: "Margin Account New Order (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 6
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/margin/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		side : ENUM // BUY
		type : ENUM
		quantity? : DECIMAL
		quoteOrderQty? : DECIMAL
		price? : DECIMAL
		stopPrice? : DECIMAL // Used with 
		newClientOrderId? : STRING // A unique id among open orders. Automatically generated if not sent.
		icebergQty? : DECIMAL // Used with 
		newOrderRespType? : ENUM // Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK.
		sideEffectType? : ENUM // NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY; default NO_SIDE_EFFECT.
		timeInForce? : ENUM // GTC,IOC,FOK
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"symbol" :  string , // "BTCUSDT"  
	
	"orderId" :  number , // 28  
	
	"clientOrderId" :  string , // "6gCrw2kRUAF9CvJDGP16IP"  
	
	"isIsolated" :  boolean , // true  // if isolated margin
	 
	
	"transactTime" :  number , // 1507725176595 
	
	
	}
	
	{
	
	"symbol" :  string , // "BTCUSDT"  
	
	"orderId" :  number , // 28  
	
	"clientOrderId" :  string , // "6gCrw2kRUAF9CvJDGP16IP"  
	
	"transactTime" :  number , // 1507725176595  
	
	"price" :  NumberString , // "1.00000000"  
	
	"origQty" :  NumberString , // "10.00000000"  
	
	"executedQty" :  NumberString , // "10.00000000"  
	
	"cummulativeQuoteQty" :  NumberString , // "10.00000000"  
	
	"status" :  string , // "FILLED"  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "MARKET"  
	
	"isIsolated" :  boolean , // true  // if isolated margin
	 
	
	"side" :  string , // "SELL" 
	
	
	}
	
	{
	
	"symbol" :  string , // "BTCUSDT"  
	
	"orderId" :  number , // 28  
	
	"clientOrderId" :  string , // "6gCrw2kRUAF9CvJDGP16IP"  
	
	"transactTime" :  number , // 1507725176595  
	
	"price" :  NumberString , // "1.00000000"  
	
	"origQty" :  NumberString , // "10.00000000"  
	
	"executedQty" :  NumberString , // "10.00000000"  
	
	"cummulativeQuoteQty" :  NumberString , // "10.00000000"  
	
	"status" :  string , // "FILLED"  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "MARKET"  
	
	"side" :  string , // "SELL"  
	
	"marginBuyBorrowAmount" :  number , // 5  // will not return if no margin trade happens
	 
	
	"marginBuyBorrowAsset" :  string , // "BTC"  // will not return if no margin trade happens
	 
	
	"isIsolated" :  boolean , // true  // if isolated margin
	 
	
	"fills" : [
		
	 {
	
			"price" :  NumberString , // "4000.00000000"  
	
			"qty" :  NumberString , // "1.00000000"  
	
			"commission" :  NumberString , // "4.00000000"  
	
			"commissionAsset" :  string , // "USDT" 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3999.00000000"  
	
			"qty" :  NumberString , // "5.00000000"  
	
			"commission" :  NumberString , // "19.99500000"  
	
			"commissionAsset" :  string , // "USDT" 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3998.00000000"  
	
			"qty" :  NumberString , // "2.00000000"  
	
			"commission" :  NumberString , // "7.99600000"  
	
			"commissionAsset" :  string , // "USDT" 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3997.00000000"  
	
			"qty" :  NumberString , // "1.00000000"  
	
			"commission" :  NumberString , // "3.99700000"  
	
			"commissionAsset" :  string , // "USDT" 
	
			
			},
	
		{
	
			"price" :  NumberString , // "3995.00000000"  
	
			"qty" :  NumberString , // "1.00000000"  
	
			"commission" :  NumberString , // "3.99500000"  
	
			"commissionAsset" :  string , // "USDT" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

MarginAccountCancelOrder = {
	name: "Margin Account Cancel Order (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		url : "DELETE/sapi/v1/margin/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		orderId? : LONG
		origClientOrderId? : STRING
		newClientOrderId? : STRING // Used to uniquely identify this cancel. Automatically generated by default.
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"symbol" :  string , // "LTCBTC"  
	
	"isIsolated" :  boolean , // true  // if isolated margin
	 
	
	"orderId" :  NumberString , // "28"  
	
	"origClientOrderId" :  string , // "myOrder1"  
	
	"clientOrderId" :  string , // "cancelMyOrder1"  
	
	"price" :  NumberString , // "1.00000000"  
	
	"origQty" :  NumberString , // "10.00000000"  
	
	"executedQty" :  NumberString , // "8.00000000"  
	
	"cummulativeQuoteQty" :  NumberString , // "8.00000000"  
	
	"status" :  string , // "CANCELED"  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "LIMIT"  
	
	"side" :  string , // "SELL" 
	
	
	}
	
	
}

MarginAccountCancelallOpenOrdersonaSymbol = {
	name: "Margin Account Cancel all Open Orders on a Symbol (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		url : "DELETE/sapi/v1/margin/openOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "BTCUSDT"  
	
		"isIsolated" :  boolean , // true  // if isolated margin
	 
	
		"origClientOrderId" :  string , // "E6APeyTJvkMvLMYMqu1KQ4"  
	
		"orderId" :  number , // 11  
	
		"orderListId" :  number , // 1  
	
		"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
		"price" :  NumberString , // "0.089853"  
	
		"origQty" :  NumberString , // "0.178622"  
	
		"executedQty" :  NumberString , // "0.000000"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
		"status" :  string , // "CANCELED"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "BUY" 
	
		
		},
	
	{
	
		"symbol" :  string , // "BTCUSDT"  
	
		"isIsolated" :  boolean , // false  // if isolated margin
	 
	
		"origClientOrderId" :  string , // "A3EF2HCwxgZPFMrfwbgrhv"  
	
		"orderId" :  number , // 13  
	
		"orderListId" :  number , // 1  
	
		"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
		"price" :  NumberString , // "0.090430"  
	
		"origQty" :  NumberString , // "0.178622"  
	
		"executedQty" :  NumberString , // "0.000000"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
		"status" :  string , // "CANCELED"  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"side" :  string , // "BUY" 
	
		
		},
	
	{
	
		"orderListId" :  number , // 1929  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "ALL_DONE"  
	
		"listOrderStatus" :  string , // "ALL_DONE"  
	
		"listClientOrderId" :  string , // "2inzWQdDvZLHbbAmAozX2N"  
	
		"transactionTime" :  number , // 1585230948299  
	
		"symbol" :  string , // "BTCUSDT"  
	
		"isIsolated" :  boolean , // true  // if isolated margin
	 
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "BTCUSDT"  
	
				"orderId" :  number , // 20  
	
				"clientOrderId" :  string , // "CwOOIPHSmYywx6jZX77TdL" 
	
				
				},
	
			{
	
				"symbol" :  string , // "BTCUSDT"  
	
				"orderId" :  number , // 21  
	
				"clientOrderId" :  string , // "461cPg51vQjV3zIMOXNz39" 
	
				
				}
	
			
			],
	
		"orderReports" : [
			
	 {
	
				"symbol" :  string , // "BTCUSDT"  
	
				"origClientOrderId" :  string , // "CwOOIPHSmYywx6jZX77TdL"  
	
				"orderId" :  number , // 20  
	
				"orderListId" :  number , // 1929  
	
				"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
				"price" :  NumberString , // "0.668611"  
	
				"origQty" :  NumberString , // "0.690354"  
	
				"executedQty" :  NumberString , // "0.000000"  
	
				"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
				"status" :  string , // "CANCELED"  
	
				"timeInForce" :  string , // "GTC"  
	
				"type" :  string , // "STOP_LOSS_LIMIT"  
	
				"side" :  string , // "BUY"  
	
				"stopPrice" :  NumberString , // "0.378131"  
	
				"icebergQty" :  NumberString , // "0.017083" 
	
				
				},
	
			{
	
				"symbol" :  string , // "BTCUSDT"  
	
				"origClientOrderId" :  string , // "461cPg51vQjV3zIMOXNz39"  
	
				"orderId" :  number , // 21  
	
				"orderListId" :  number , // 1929  
	
				"clientOrderId" :  string , // "pXLV6Hz6mprAcVYpVMTGgx"  
	
				"price" :  NumberString , // "0.008791"  
	
				"origQty" :  NumberString , // "0.690354"  
	
				"executedQty" :  NumberString , // "0.000000"  
	
				"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
				"status" :  string , // "CANCELED"  
	
				"timeInForce" :  string , // "GTC"  
	
				"type" :  string , // "LIMIT_MAKER"  
	
				"side" :  string , // "BUY"  
	
				"icebergQty" :  NumberString , // "0.639962" 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
}

GetCrossMarginTransferHistory = {
	name: "Get Cross Margin Transfer History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/transfer"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		type? : STRING // Transfer Type: ROLL_IN, ROLL_OUT
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10 Max:100
		archived? : STRING // Default: 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"rows" : [
		
	 {
	
			"amount" :  NumberString , // "0.10000000"  
	
			"asset" :  string , // "BNB"  
	
			"status" :  string , // "CONFIRMED"  
	
			"timestamp" :  number , // 1566898617  
	
			"txId" :  number , // 5240372201  
	
			"type" :  string , // "ROLL_IN" 
	
			
			},
	
		{
	
			"amount" :  NumberString , // "5.00000000"  
	
			"asset" :  string , // "USDT"  
	
			"status" :  string , // "CONFIRMED"  
	
			"timestamp" :  number , // 1566888436  
	
			"txId" :  number , // 5239810406  
	
			"type" :  string , // "ROLL_OUT" 
	
			
			},
	
		{
	
			"amount" :  NumberString , // "1.00000000"  
	
			"asset" :  string , // "EOS"  
	
			"status" :  string , // "CONFIRMED"  
	
			"timestamp" :  number , // 1566888403  
	
			"txId" :  number , // 5239808703  
	
			"type" :  string , // "ROLL_IN" 
	
			
			}
	
		
		],
	
	"total" :  number , // 3 
	
	
	}
	
	
}

QueryLoanRecord = {
	name: "Query Loan Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/loan"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING
		isolatedSymbol? : STRING // isolated symbol
		txId? : LONG // the tranId in POST /sapi/v1/margin/loan
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10 Max:100
		archived? : STRING // Default: 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"rows" : [
		
	 {
	
			"isolatedSymbol" :  string , // "BNBUSDT"  // isolated symbol, will not be returned for crossed margin
	 
	
			"txId" :  number , // 12807067523  
	
			"asset" :  string , // "BNB"  
	
			"principal" :  NumberString , // "0.84624403"  
	
			"timestamp" :  number , // 1555056425000  
	
			"status" :  string , // "CONFIRMED" //one of PENDING (pending execution), CONFIRMED (successfully loaned), FAILED (execution failed, nothing happened to your account); 
	
			
			}
	
		
		],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

QueryRepayRecord = {
	name: "Query Repay Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/repay"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING
		isolatedSymbol? : STRING // isolated symbol
		txId? : LONG // return of /sapi/v1/margin/repay
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10 Max:100
		archived? : STRING // Default: 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"rows" : [
		
	 {
	
			"isolatedSymbol" :  string , // "BNBUSDT"  // isolated symbol, will not be returned for crossed margin
	 
	
			"amount" :  NumberString , // "14.00000000"  //Total amount repaid
	 
	
			"asset" :  string , // "BNB"  
	
			"interest" :  NumberString , // "0.01866667"  //Interest repaid
	 
	
			"principal" :  NumberString , // "13.98133333"  //Principal repaid
	 
	
			"status" :  string , // "CONFIRMED"  //one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account)
	 
	
			"timestamp" :  number , // 1563438204000  
	
			"txId" :  number , // 2970933056 
	
			
			}
	
		
		],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

GetInterestHistory = {
	name: "Get Interest History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/interestHistory"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		isolatedSymbol? : STRING // isolated symbol
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10 Max:100
		archived? : STRING // Default: 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"rows" : [
		
	 {
	
			"txId" :  number , // 1352286576452864727  
	
			"interestAccuredTime" :  number , // 1672160400000  
	
			"asset" :  string , // "USDT"  
	
			"rawAsset" :  // will not be returned for isolated margin            
	
			"principal" :  NumberString , // "45.3313"  
	
			"interest" :  NumberString , // "0.00024995"  
	
			"interestRate" :  NumberString , // "0.00013233"  
	
			"type" :  string , // "ON_BORROW"  
	
			"isolatedSymbol" :  string , // "BNBUSDT" // isolated symbol, will not be returned for crossed margin       
	
			
			}
	
		
		],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

GetForceLiquidationRecord = {
	name: "Get Force Liquidation Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/forceLiquidationRec"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime? : LONG
		endTime? : LONG
		isolatedSymbol? : STRING
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10 Max:100
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"rows" : [
		
	 {
	
			"avgPrice" :  NumberString , // "0.00388359"  
	
			"executedQty" :  NumberString , // "31.39000000"  
	
			"orderId" :  number , // 180015097  
	
			"price" :  NumberString , // "0.00388110"  
	
			"qty" :  NumberString , // "31.39000000"  
	
			"side" :  string , // "SELL"  
	
			"symbol" :  string , // "BNBBTC"  
	
			"timeInForce" :  string , // "GTC"  
	
			"isIsolated" :  boolean , // true  
	
			"updatedTime" :  number , // 1558941374745 
	
			
			}
	
		
		],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

QueryCrossMarginAccountDetails = {
	name: "Query Cross Margin Account Details (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/account"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"borrowEnabled" :  boolean , // true  
	
	"marginLevel" :  NumberString , // "11.64405625"  
	
	"totalAssetOfBtc" :  NumberString , // "6.82728457"  
	
	"totalLiabilityOfBtc" :  NumberString , // "0.58633215"  
	
	"totalNetAssetOfBtc" :  NumberString , // "6.24095242"  
	
	"tradeEnabled" :  boolean , // true  
	
	"transferEnabled" :  boolean , // true  
	
	"userAssets" : [
		
	 {
	
			"asset" :  string , // "BTC"  
	
			"borrowed" :  NumberString , // "0.00000000"  
	
			"free" :  NumberString , // "0.00499500"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "0.00499500" 
	
			
			},
	
		{
	
			"asset" :  string , // "BNB"  
	
			"borrowed" :  NumberString , // "201.66666672"  
	
			"free" :  NumberString , // "2346.50000000"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "2144.83333328" 
	
			
			},
	
		{
	
			"asset" :  string , // "ETH"  
	
			"borrowed" :  NumberString , // "0.00000000"  
	
			"free" :  NumberString , // "0.00000000"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "0.00000000" 
	
			
			},
	
		{
	
			"asset" :  string , // "USDT"  
	
			"borrowed" :  NumberString , // "0.00000000"  
	
			"free" :  NumberString , // "0.00000000"  
	
			"interest" :  NumberString , // "0.00000000"  
	
			"locked" :  NumberString , // "0.00000000"  
	
			"netAsset" :  NumberString , // "0.00000000" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryMarginAccount&#39;sOrder = {
	name: "Query Margin Account&#39;s Order (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		orderId? : LONG
		origClientOrderId? : STRING
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"clientOrderId" :  string , // "ZwfQzuDIGpceVhKW5DvCmO"  
	
	"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
	"executedQty" :  NumberString , // "0.00000000"  
	
	"icebergQty" :  NumberString , // "0.00000000"  
	
	"isWorking" :  boolean , // true  
	
	"orderId" :  number , // 213205622  
	
	"origQty" :  NumberString , // "0.30000000"  
	
	"price" :  NumberString , // "0.00493630"  
	
	"side" :  string , // "SELL"  
	
	"status" :  string , // "NEW"  
	
	"stopPrice" :  NumberString , // "0.00000000"  
	
	"symbol" :  string , // "BNBBTC"  
	
	"isIsolated" :  boolean , // true  
	
	"time" :  number , // 1562133008725  
	
	"timeInForce" :  string , // "GTC"  
	
	"type" :  string , // "LIMIT"  
	
	"updateTime" :  number , // 1562133008725 
	
	
	}
	
	
}

QueryMarginAccount&#39;sOpenOrders = {
	name: "Query Margin Account&#39;s Open Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/openOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"clientOrderId" :  string , // "qhcZw71gAkCCTv0t0k8LUK"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
		"executedQty" :  NumberString , // "0.00000000"  
	
		"icebergQty" :  NumberString , // "0.00000000"  
	
		"isWorking" :  boolean , // true  
	
		"orderId" :  number , // 211842552  
	
		"origQty" :  NumberString , // "0.30000000"  
	
		"price" :  NumberString , // "0.00475010"  
	
		"side" :  string , // "SELL"  
	
		"status" :  string , // "NEW"  
	
		"stopPrice" :  NumberString , // "0.00000000"  
	
		"symbol" :  string , // "BNBBTC"  
	
		"isIsolated" :  boolean , // true  
	
		"time" :  number , // 1562040170089  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"updateTime" :  number , // 1562040170089 
	
		
		}
	
	
	]
	
	
}

QueryMarginAccount&#39;sAllOrders = {
	name: "Query Margin Account&#39;s All Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 200
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/allOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		orderId? : LONG
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 500; max 500.
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"clientOrderId" :  string , // "D2KDy4DIeS56PvkM13f8cP"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
		"executedQty" :  NumberString , // "0.00000000"  
	
		"icebergQty" :  NumberString , // "0.00000000"  
	
		"isWorking" :  boolean , // false  
	
		"orderId" :  number , // 41295  
	
		"origQty" :  NumberString , // "5.31000000"  
	
		"price" :  NumberString , // "0.22500000"  
	
		"side" :  string , // "SELL"  
	
		"status" :  string , // "CANCELED"  
	
		"stopPrice" :  NumberString , // "0.18000000"  
	
		"symbol" :  string , // "BNBBTC"  
	
		"isIsolated" :  boolean , // false  
	
		"time" :  number , // 1565769338806  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "TAKE_PROFIT_LIMIT"  
	
		"updateTime" :  number , // 1565769342148 
	
		
		},
	
	{
	
		"clientOrderId" :  string , // "gXYtqhcEAs2Rn9SUD9nRKx"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
		"executedQty" :  NumberString , // "0.00000000"  
	
		"icebergQty" :  NumberString , // "1.00000000"  
	
		"isWorking" :  boolean , // true  
	
		"orderId" :  number , // 41296  
	
		"origQty" :  NumberString , // "6.65000000"  
	
		"price" :  NumberString , // "0.18000000"  
	
		"side" :  string , // "SELL"  
	
		"status" :  string , // "CANCELED"  
	
		"stopPrice" :  NumberString , // "0.00000000"  
	
		"symbol" :  string , // "BNBBTC"  
	
		"isIsolated" :  boolean , // false  
	
		"time" :  number , // 1565769348687  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "LIMIT"  
	
		"updateTime" :  number , // 1565769352226 
	
		
		},
	
	{
	
		"clientOrderId" :  string , // "duDq1BqohhcMmdMs9FSuDy"  
	
		"cummulativeQuoteQty" :  NumberString , // "0.39450000"  
	
		"executedQty" :  NumberString , // "2.63000000"  
	
		"icebergQty" :  NumberString , // "0.00000000"  
	
		"isWorking" :  boolean , // true  
	
		"orderId" :  number , // 41297  
	
		"origQty" :  NumberString , // "2.63000000"  
	
		"price" :  NumberString , // "0.00000000"  
	
		"side" :  string , // "SELL"  
	
		"status" :  string , // "FILLED"  
	
		"stopPrice" :  NumberString , // "0.00000000"  
	
		"symbol" :  string , // "BNBBTC"  
	
		"isIsolated" :  boolean , // false  
	
		"time" :  number , // 1565769358139  
	
		"timeInForce" :  string , // "GTC"  
	
		"type" :  string , // "MARKET"  
	
		"updateTime" :  number , // 1565769358139 
	
		
		}
	
	
	]
	
	
}

MarginAccountNewOCO = {
	name: "Margin Account New OCO (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 6
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/margin/order/oco"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		listClientOrderId? : STRING // A unique Id for the entire orderList
		side : ENUM
		quantity : DECIMAL
		limitClientOrderId? : STRING // A unique Id for the limit order
		price : DECIMAL
		limitIcebergQty? : DECIMAL
		stopClientOrderId? : STRING // A unique Id for the stop loss/stop loss limit leg
		stopPrice : DECIMAL
		stopLimitPrice? : DECIMAL // If provided, 
		stopIcebergQty? : DECIMAL
		stopLimitTimeInForce? : ENUM // Valid values are 
		newOrderRespType? : ENUM // Set the response JSON.
		sideEffectType? : ENUM // NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY; default NO_SIDE_EFFECT.
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"orderListId" :  number , // 0  
	
	"contingencyType" :  string , // "OCO"  
	
	"listStatusType" :  string , // "EXEC_STARTED"  
	
	"listOrderStatus" :  string , // "EXECUTING"  
	
	"listClientOrderId" :  string , // "JYVpp3F0f5CAG15DhtrqLp"  
	
	"transactionTime" :  number , // 1563417480525  
	
	"symbol" :  string , // "LTCBTC"  
	
	"marginBuyBorrowAmount" :  NumberString , // "5"  // will not return if no margin trade happens
	 
	
	"marginBuyBorrowAsset" :  string , // "BTC"  // will not return if no margin trade happens
	 
	
	"isIsolated" :  boolean , // false  // if isolated margin
	 
	
	"orders" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 2  
	
			"clientOrderId" :  string , // "Kk7sqHb9J6mJWTMDVW7Vos" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 3  
	
			"clientOrderId" :  string , // "xTXKaGYd4bluPVp78IVRvl" 
	
			
			}
	
		
		],
	
	"orderReports" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 2  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "Kk7sqHb9J6mJWTMDVW7Vos"  
	
			"transactTime" :  number , // 1563417480525  
	
			"price" :  NumberString , // "0.000000"  
	
			"origQty" :  NumberString , // "0.624363"  
	
			"executedQty" :  NumberString , // "0.000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
			"status" :  string , // "NEW"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "STOP_LOSS"  
	
			"side" :  string , // "BUY"  
	
			"stopPrice" :  NumberString , // "0.960664" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 3  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "xTXKaGYd4bluPVp78IVRvl"  
	
			"transactTime" :  number , // 1563417480525  
	
			"price" :  NumberString , // "0.036435"  
	
			"origQty" :  NumberString , // "0.624363"  
	
			"executedQty" :  NumberString , // "0.000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.000000"  
	
			"status" :  string , // "NEW"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "LIMIT_MAKER"  
	
			"side" :  string , // "BUY" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

MarginAccountCancelOCO = {
	name: "Margin Account Cancel OCO (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 1
		}
	]
	address : {
		url : "DELETE/sapi/v1/margin/orderList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		orderListId? : LONG // Either 
		listClientOrderId? : STRING // Either 
		newClientOrderId? : STRING // Used to uniquely identify this cancel. Automatically generated by default
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"orderListId" :  number , // 0  
	
	"contingencyType" :  string , // "OCO"  
	
	"listStatusType" :  string , // "ALL_DONE"  
	
	"listOrderStatus" :  string , // "ALL_DONE"  
	
	"listClientOrderId" :  string , // "C3wyj4WVEktd7u9aVBRXcN"  
	
	"transactionTime" :  number , // 1574040868128  
	
	"symbol" :  string , // "LTCBTC"  
	
	"isIsolated" :  boolean , // false  // if isolated margin
	 
	
	"orders" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 2  
	
			"clientOrderId" :  string , // "pO9ufTiFGg3nw2fOdgeOXa" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 3  
	
			"clientOrderId" :  string , // "TXOvglzXuaubXAaENpaRCB" 
	
			
			}
	
		
		],
	
	"orderReports" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"origClientOrderId" :  string , // "pO9ufTiFGg3nw2fOdgeOXa"  
	
			"orderId" :  number , // 2  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "unfWT8ig8i0uj6lPuYLez6"  
	
			"price" :  NumberString , // "1.00000000"  
	
			"origQty" :  NumberString , // "10.00000000"  
	
			"executedQty" :  NumberString , // "0.00000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
			"status" :  string , // "CANCELED"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "STOP_LOSS_LIMIT"  
	
			"side" :  string , // "SELL"  
	
			"stopPrice" :  NumberString , // "1.00000000" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"origClientOrderId" :  string , // "TXOvglzXuaubXAaENpaRCB"  
	
			"orderId" :  number , // 3  
	
			"orderListId" :  number , // 0  
	
			"clientOrderId" :  string , // "unfWT8ig8i0uj6lPuYLez6"  
	
			"price" :  NumberString , // "3.00000000"  
	
			"origQty" :  NumberString , // "10.00000000"  
	
			"executedQty" :  NumberString , // "0.00000000"  
	
			"cummulativeQuoteQty" :  NumberString , // "0.00000000"  
	
			"status" :  string , // "CANCELED"  
	
			"timeInForce" :  string , // "GTC"  
	
			"type" :  string , // "LIMIT_MAKER"  
	
			"side" :  string , // "SELL" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryMarginAccount&#39;sOCO = {
	name: "Query Margin Account&#39;s OCO (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/orderList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		symbol? : STRING // mandatory for isolated margin, not supported for cross margin
		orderListId? : LONG // Either 
		origClientOrderId? : STRING // Either 
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"orderListId" :  number , // 27  
	
	"contingencyType" :  string , // "OCO"  
	
	"listStatusType" :  string , // "EXEC_STARTED"  
	
	"listOrderStatus" :  string , // "EXECUTING"  
	
	"listClientOrderId" :  string , // "h2USkA5YQpaXHPIrkd96xE"  
	
	"transactionTime" :  number , // 1565245656253  
	
	"symbol" :  string , // "LTCBTC"  
	
	"isIsolated" :  boolean , // false  // if isolated margin
	 
	
	"orders" : [
		
	 {
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 4  
	
			"clientOrderId" :  string , // "qD1gy3kc3Gx0rihm9Y3xwS" 
	
			
			},
	
		{
	
			"symbol" :  string , // "LTCBTC"  
	
			"orderId" :  number , // 5  
	
			"clientOrderId" :  string , // "ARzZ9I00CPM8i3NhmU9Ega" 
	
			
			}
	
		
		]
	
	
	}
	
	
}

QueryMarginAccount&#39;sallOCO = {
	name: "Query Margin Account&#39;s all OCO (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 200
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/allOrderList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		symbol? : STRING // mandatory for isolated margin, not supported for cross margin
		fromId? : LONG // If supplied, neither 
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default Value: 500; Max Value: 1000
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"orderListId" :  number , // 29  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "EXEC_STARTED"  
	
		"listOrderStatus" :  string , // "EXECUTING"  
	
		"listClientOrderId" :  string , // "amEEAXryFzFwYF1FeRpUoZ"  
	
		"transactionTime" :  number , // 1565245913483  
	
		"symbol" :  string , // "LTCBTC"  
	
		"isIsolated" :  boolean , // true  // if isolated margin
	 
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 4  
	
				"clientOrderId" :  string , // "oD7aesZqjEGlZrbtRpy5zB" 
	
				
				},
	
			{
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 5  
	
				"clientOrderId" :  string , // "Jr1h6xirOxgeJOUuYQS7V3" 
	
				
				}
	
			
			]
	
		
		},
	
	{
	
		"orderListId" :  number , // 28  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "EXEC_STARTED"  
	
		"listOrderStatus" :  string , // "EXECUTING"  
	
		"listClientOrderId" :  string , // "hG7hFNxJV6cZy3Ze4AUT4d"  
	
		"transactionTime" :  number , // 1565245913407  
	
		"symbol" :  string , // "LTCBTC"  
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 2  
	
				"clientOrderId" :  string , // "j6lFOfbmFMRjTYA7rRJ0LP" 
	
				
				},
	
			{
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 3  
	
				"clientOrderId" :  string , // "z0KCjOdditiLS5ekAFtK81" 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
}

QueryMarginAccount&#39;sOpenOCO = {
	name: "Query Margin Account&#39;s Open OCO (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/openOrderList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		symbol? : STRING // mandatory for isolated margin, not supported for cross margin
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"orderListId" :  number , // 31  
	
		"contingencyType" :  string , // "OCO"  
	
		"listStatusType" :  string , // "EXEC_STARTED"  
	
		"listOrderStatus" :  string , // "EXECUTING"  
	
		"listClientOrderId" :  string , // "wuB13fmulKj3YjdqWEcsnp"  
	
		"transactionTime" :  number , // 1565246080644  
	
		"symbol" :  string , // "LTCBTC"  
	
		"isIsolated" :  boolean , // false  // if isolated margin
	 
	
		"orders" : [
			
	 {
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 4  
	
				"clientOrderId" :  string , // "r3EH2N76dHfLoSZWIUw1bT" 
	
				
				},
	
			{
	
				"symbol" :  string , // "LTCBTC"  
	
				"orderId" :  number , // 5  
	
				"clientOrderId" :  string , // "Cv1SnyPD3qhqpbjpYEHbd2" 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
}

QueryMarginAccount&#39;sTradeList = {
	name: "Query Margin Account&#39;s Trade List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/myTrades"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		orderId? : LONG
		startTime? : LONG
		endTime? : LONG
		fromId? : LONG // TradeId to fetch from. Default gets most recent trades.
		limit? : INT // Default 500; max 1000.
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"commission" :  NumberString , // "0.00006000"  
	
		"commissionAsset" :  string , // "BTC"  
	
		"id" :  number , // 34  
	
		"isBestMatch" :  boolean , // true  
	
		"isBuyer" :  boolean , // false  
	
		"isMaker" :  boolean , // false  
	
		"orderId" :  number , // 39324  
	
		"price" :  NumberString , // "0.02000000"  
	
		"qty" :  NumberString , // "3.00000000"  
	
		"symbol" :  string , // "BNBBTC"  
	
		"isIsolated" :  boolean , // false  
	
		"time" :  number , // 1561973357171 
	
		
		}
	
	
	]
	
	
}

QueryMaxBorrow = {
	name: "Query Max Borrow (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 50
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/maxBorrowable"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING
		isolatedSymbol? : STRING // isolated symbol
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"amount" :  NumberString , // "1.69248805"  // account's currently max borrowable amount with sufficient system availability
	 
	
	"borrowLimit" :  NumberString , // "60" // max borrowable amount limited by the account level 
	
	
	}
	
	
}

QueryMaxTransferOutAmount = {
	name: "Query Max Transfer-Out Amount (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 50
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/maxTransferable"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset : STRING
		isolatedSymbol? : STRING // isolated symbol
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"amount" :  NumberString , // "3.59498107" 
	
	
	}
	
	
}

GetSummaryofMarginaccount = {
	name: "Get Summary of Margin account (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/tradeCoeff"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"normalBar" :  NumberString , // "1.5"  
	
	"marginCallBar" :  NumberString , // "1.3"  
	
	"forceLiquidationBar" :  NumberString , // "1.1" 
	
	
	}
	
	
}

IsolatedMarginAccountTransfer = {
	name: "Isolated Margin Account Transfer (MARGIN)"
	nameType: "MARGIN"
	wight: [{
			name : "UID"
			data : 600
		}
	]
	// Name Type Mandatory Description
	params : {
		asset : STRING // asset,such as BTC
		symbol : STRING
		transFrom : STRING // &quot;SPOT&quot;, &quot;ISOLATED_MARGIN&quot;
		transTo : STRING // &quot;SPOT&quot;, &quot;ISOLATED_MARGIN&quot;
		amount : DECIMAL
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	//transaction id 
	
	"tranId" :  number , // 100000001 
	
	
	}
	
	
}

GetIsolatedMarginTransferHistory = {
	name: "Get Isolated Margin Transfer History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		symbol : STRING
		transFrom? : STRING // &quot;SPOT&quot;, &quot;ISOLATED_MARGIN&quot;
		transTo? : STRING // &quot;SPOT&quot;, &quot;ISOLATED_MARGIN&quot;
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Current page, default 1
		size? : LONG // Default 10, max 100
		archived? : STRING // Default: 
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"rows" : [
		
	 {
	
			"amount" :  NumberString , // "0.10000000"  
	
			"asset" :  string , // "BNB"  
	
			"status" :  string , // "CONFIRMED"  
	
			"timestamp" :  number , // 1566898617000  
	
			"txId" :  number , // 5240372201  
	
			"transFrom" :  string , // "SPOT"  
	
			"transTo" :  string , // "ISOLATED_MARGIN" 
	
			
			},
	
		{
	
			"amount" :  NumberString , // "5.00000000"  
	
			"asset" :  string , // "USDT"  
	
			"status" :  string , // "CONFIRMED"  
	
			"timestamp" :  number , // 1566888436123  
	
			"txId" :  number , // 5239810406  
	
			"transFrom" :  string , // "ISOLATED_MARGIN"  
	
			"transTo" :  string , // "SPOT" 
	
			
			}
	
		
		],
	
	"total" :  number , // 2 
	
	
	}
	
	
}

QueryIsolatedMarginAccountInfo = {
	name: "Query Isolated Margin Account Info (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		symbols? : STRING // Max 5 symbols can be sent; separated by &quot;,&quot;. e.g. &quot;BTCUSDT,BNBUSDT,ADAUSDT&quot;
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"assets" :[
		
	 {
	
			"baseAsset" : 
	
			{
	
				"asset" :  string , // "BTC"  
	
				"borrowEnabled" :  boolean , // true  
	
				"borrowed" :  NumberString , // "0.00000000"  
	
				"free" :  NumberString , // "0.00000000"  
	
				"interest" :  NumberString , // "0.00000000"  
	
				"locked" :  NumberString , // "0.00000000"  
	
				"netAsset" :  NumberString , // "0.00000000"  
	
				"netAssetOfBtc" :  NumberString , // "0.00000000"  
	
				"repayEnabled" :  boolean , // true  
	
				"totalAsset" :  NumberString , // "0.00000000" 
	
				
				},
	
			"quoteAsset" : 
	
			{
	
				"asset" :  string , // "USDT"  
	
				"borrowEnabled" :  boolean , // true  
	
				"borrowed" :  NumberString , // "0.00000000"  
	
				"free" :  NumberString , // "0.00000000"  
	
				"interest" :  NumberString , // "0.00000000"  
	
				"locked" :  NumberString , // "0.00000000"  
	
				"netAsset" :  NumberString , // "0.00000000"  
	
				"netAssetOfBtc" :  NumberString , // "0.00000000"  
	
				"repayEnabled" :  boolean , // true  
	
				"totalAsset" :  NumberString , // "0.00000000" 
	
				
				},
	
			"symbol" :  string , // "BTCUSDT"  
	
			"isolatedCreated" :  boolean , // true  
	
			"enabled" :  boolean , // true  // true-enabled, false-disabled
	 
	
			"marginLevel" :  NumberString , // "0.00000000"  
	
			"marginLevelStatus" :  string , // "EXCESSIVE"  // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
	 
	
			"marginRatio" :  NumberString , // "0.00000000"  
	
			"indexPrice" :  NumberString , // "10000.00000000"  
	
			"liquidatePrice" :  NumberString , // "1000.00000000"  
	
			"liquidateRate" :  NumberString , // "1.00000000"  
	
			"tradeEnabled" :  boolean , // true 
	
			
			}
	
		
		],
	
	"totalAssetOfBtc" :  NumberString , // "0.00000000"  
	
	"totalLiabilityOfBtc" :  NumberString , // "0.00000000"  
	
	"totalNetAssetOfBtc" :  NumberString , // "0.00000000" 
	
	
	}
	
	{
	
	"assets" :[
		
	 {
	
			"baseAsset" : 
	
			{
	
				"asset" :  string , // "BTC"  
	
				"borrowEnabled" :  boolean , // true  
	
				"borrowed" :  NumberString , // "0.00000000"  
	
				"free" :  NumberString , // "0.00000000"  
	
				"interest" :  NumberString , // "0.00000000"  
	
				"locked" :  NumberString , // "0.00000000"  
	
				"netAsset" :  NumberString , // "0.00000000"  
	
				"netAssetOfBtc" :  NumberString , // "0.00000000"  
	
				"repayEnabled" :  boolean , // true  
	
				"totalAsset" :  NumberString , // "0.00000000" 
	
				
				},
	
			"quoteAsset" : 
	
			{
	
				"asset" :  string , // "USDT"  
	
				"borrowEnabled" :  boolean , // true  
	
				"borrowed" :  NumberString , // "0.00000000"  
	
				"free" :  NumberString , // "0.00000000"  
	
				"interest" :  NumberString , // "0.00000000"  
	
				"locked" :  NumberString , // "0.00000000"  
	
				"netAsset" :  NumberString , // "0.00000000"  
	
				"netAssetOfBtc" :  NumberString , // "0.00000000"  
	
				"repayEnabled" :  boolean , // true  
	
				"totalAsset" :  NumberString , // "0.00000000" 
	
				
				},
	
			"symbol" :  string , // "BTCUSDT"  
	
			"isolatedCreated" :  boolean , // true  
	
			"enabled" :  boolean , // true  // true-enabled, false-disabled
	 
	
			"marginLevel" :  NumberString , // "0.00000000"  
	
			"marginLevelStatus" :  string , // "EXCESSIVE"  // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
	 
	
			"marginRatio" :  NumberString , // "0.00000000"  
	
			"indexPrice" :  NumberString , // "10000.00000000"  
	
			"liquidatePrice" :  NumberString , // "1000.00000000"  
	
			"liquidateRate" :  NumberString , // "1.00000000"  
	
			"tradeEnabled" :  boolean , // true 
	
			
			}
	
		
		]
	
	
	}
	
	
}

DisableIsolatedMarginAccount = {
	name: "Disable Isolated Margin Account (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 300
		}
	]
	address : {
		url : "DELETE/sapi/v1/margin/isolated/account"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"success" :  boolean , // true  
	
	"symbol" :  string , // "BTCUSDT" 
	
	
	}
	
	
}

EnableIsolatedMarginAccount = {
	name: "Enable Isolated Margin Account (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 300
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/margin/isolated/account"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"success" :  boolean , // true  
	
	"symbol" :  string , // "BTCUSDT" 
	
	
	}
	
	
}

QueryEnabledIsolatedMarginAccountLimit = {
	name: "Query Enabled Isolated Margin Account Limit (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/isolated/accountLimit"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"enabledAccount" :  number , // 5  
	
	"maxAccount" :  number , // 20 
	
	
	}
	
	
}

QueryIsolatedMarginSymbol = {
	name: "Query Isolated Margin Symbol (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"symbol" :  string , // "BTCUSDT"  
	
	"base" :  string , // "BTC"  
	
	"quote" :  string , // "USDT"  
	
	"isMarginTrade" :  boolean , // true  
	
	"isBuyAllowed" :  boolean , // true  
	
	"isSellAllowed" :  boolean , // true 
	
	
	}
	
	
}

GetAllIsolatedMarginSymbol = {
	name: "Get All Isolated Margin Symbol(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = [
	
	 {
	
		"base" :  string , // "BNB"  
	
		"isBuyAllowed" :  boolean , // true  
	
		"isMarginTrade" :  boolean , // true  
	
		"isSellAllowed" :  boolean , // true  
	
		"quote" :  string , // "BTC"  
	
		"symbol" :  string , // "BNBBTC" 
	
		
		},
	
	{
	
		"base" :  string , // "TRX"  
	
		"isBuyAllowed" :  boolean , // true  
	
		"isMarginTrade" :  boolean , // true  
	
		"isSellAllowed" :  boolean , // true  
	
		"quote" :  string , // "BTC"  
	
		"symbol" :  string , // "TRXBTC" 
	
		
		}
	
	
	]
	
	
}

ToggleBNBBurnOnSpotTradeAndMarginInterest = {
	name: "Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		spotBNBBurn? : STRING // &quot;true&quot; or &quot;false&quot;; Determines whether to use BNB to pay for trading fees on SPOT
		interestBNBBurn? : STRING // &quot;true&quot; or &quot;false&quot;; Determines whether to use BNB to pay for margin loan&#39;s interest
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"spotBNBBurn" :  boolean , // true  
	
	"interestBNBBurn" :  boolean , // false 
	
	
	}
	
	
}

GetBNBBurnStatus = {
	name: "Get BNB Burn Status (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = {
	
	"spotBNBBurn" :  boolean , // true  
	
	"interestBNBBurn" :  boolean , // false 
	
	
	}
	
	
}

QueryMarginInterestRateHistory = {
	name: "Query Margin Interest Rate History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		asset : STRING
		vipLevel? : INT // Default: user&#39;s vip level
		startTime? : LONG // Default: 7 days ago
		endTime? : LONG // Default: present. Maximum range: 1 months.
		recvWindow? : LONG // No more than 60000
		timestamp : LONG
	}
	req = [
	
	 {
	
		"asset" :  string , // "BTC"  
	
		"dailyInterestRate" :  NumberString , // "0.00025000"  
	
		"timestamp" :  number , // 1611544731000  
	
		"vipLevel" :  number , // 1 
	
		
		},
	
	{
	
		"asset" :  string , // "BTC"  
	
		"dailyInterestRate" :  NumberString , // "0.00035000"  
	
		"timestamp" :  number , // 1610248118000  
	
		"vipLevel" :  number , // 1 
	
		
		}
	
	
	]
	
	
}

QueryCrossMarginFeeData = {
	name: "Query Cross Margin Fee Data (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
		}
	]
	// Name Type Mandatory Description
	params : {
		vipLevel? : INT // User&#39;s current specific margin data will be returned if vipLevel is omitted
		coin? : STRING
		recvWindow? : LONG // No more than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"vipLevel" :  number , // 0  
	
		"coin" :  string , // "BTC"  
	
		"transferIn" :  boolean , // true  
	
		"borrowable" :  boolean , // true  
	
		"dailyInterest" :  NumberString , // "0.00026125"  
	
		"yearlyInterest" :  NumberString , // "0.0953"  
	
		"borrowLimit" :  NumberString , // "180"  
	
		"marginablePairs" : [
			
	  string , // "BNBBTC" 
	 
			
	  string , // "TRXBTC" 
	 
			
	  string , // "ETHBTC" 
	 
			
	  string , // "BTCUSDT"
			
	 
			]
	
		
		}
	
	
	]
	
	
}

QueryIsolatedMarginFeeData = {
	name: "Query Isolated Margin Fee Data (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
		}
	]
	// Name Type Mandatory Description
	params : {
		vipLevel? : INT // User&#39;s current specific margin data will be returned if vipLevel is omitted
		symbol? : STRING
		recvWindow? : LONG // No more than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"vipLevel" :  number , // 0  
	
		"symbol" :  string , // "BTCUSDT"  
	
		"leverage" :  NumberString , // "10"  
	
		"data" : [
			
	 {
	
				"coin" :  string , // "BTC"  
	
				"dailyInterest" :  NumberString , // "0.00026125"  
	
				"borrowLimit" :  NumberString , // "270" 
	
				
				},
	
			{
	
				"coin" :  string , // "USDT"  
	
				"dailyInterest" :  NumberString , // "0.000475"  
	
				"borrowLimit" :  NumberString , // "2100000" 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
}

QueryIsolatedMarginTierData = {
	name: "Query Isolated Margin Tier Data (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		tier? : INTEGER // All margin tier data will be returned if tier is omitted
		recvWindow? : LONG // No more than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"symbol" :  string , // "BTCUSDT"  
	
		"tier" :  number , // 1  
	
		"effectiveMultiple" :  NumberString , // "10"  
	
		"initialRiskRatio" :  NumberString , // "1.111"  
	
		"liquidationRiskRatio" :  NumberString , // "1.05"  
	
		"baseAssetMaxBorrowable" :  NumberString , // "9"  
	
		"quoteAssetMaxBorrowable" :  NumberString , // "70000" 
	
		
		}
	
	
	]
	
	
}

QueryCurrentMarginOrderCountUsage = {
	name: "Query Current Margin Order Count Usage (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 20
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/rateLimit/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		isIsolated? : STRING // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;，default &quot;FALSE&quot;
		symbol? : STRING // isolated symbol, mandatory for isolated margin
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
		"rateLimitType" :  string , // "ORDERS"  
	
		"interval" :  string , // "SECOND"  
	
		"intervalNum" :  number , // 10  
	
		"limit" :  number , // 10000  
	
		"count" :  number , // 0 
	
		
		},
	
	{
	
		"rateLimitType" :  string , // "ORDERS"  
	
		"interval" :  string , // "DAY"  
	
		"intervalNum" :  number , // 1  
	
		"limit" :  number , // 20000  
	
		"count" :  number , // 0 
	
		
		}
	
	
	]
	
	
}

MarginDustlog = {
	name: "Margin Dustlog (USER_DATA)"
	nameType: "USER_DATA"
	wight: []
	address : {
		type : "GET"
		url : "/sapi/v1/margin/dribblet"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime? : LONG
		endTime? : LONG
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 8  //Total counts of exchange
	 
	
	"userAssetDribblets" : [
		
	 {
	
			"operateTime" :  number , // 1615985535000  
	
			"totalTransferedAmount" :  NumberString , // "0.00132256"  // Total transfered BNB amount for this exchange.
	 
	
			"totalServiceChargeAmount" :  NumberString , // "0.00002699"  //Total service charge amount for this exchange.
	 
	
			"transId" :  number , // 45178372831  
	
			"userAssetDribbletDetails" : [ //Details of  this exchange.
	
	
				
	 {
	
					"transId" :  number , // 4359321  
	
					"serviceChargeAmount" :  NumberString , // "0.000009"  
	
					"amount" :  NumberString , // "0.0009"  
	
					"operateTime" :  number , // 1615985535000  
	
					"transferedAmount" :  NumberString , // "0.000441"  
	
					"fromAsset" :  string , // "USDT" 
	
					
					},
	
				{
	
					"transId" :  number , // 4359321  
	
					"serviceChargeAmount" :  NumberString , // "0.00001799"  
	
					"amount" :  NumberString , // "0.0009"  
	
					"operateTime" :  number , // 1615985535000  
	
					"transferedAmount" :  NumberString , // "0.00088156"  
	
					"fromAsset" :  string , // "ETH" 
	
					
					}
	
				
				]
	
			
			},
	
		{
	
			"operateTime" :  number , // 1616203180000  
	
			"totalTransferedAmount" :  NumberString , // "0.00058795"  
	
			"totalServiceChargeAmount" :  NumberString , // "0.000012"  
	
			"transId" :  number , // 4357015  
	
			"userAssetDribbletDetails" : [
				
	 {
	
					"transId" :  number , // 4357015  
	
					"serviceChargeAmount" :  NumberString , // "0.00001"  
	
					"amount" :  NumberString , // "0.001"  
	
					"operateTime" :  number , // 1616203180000  
	
					"transferedAmount" :  NumberString , // "0.00049"  
	
					"fromAsset" :  string , // "USDT" 
	
					
					},
	
				{
	
					"transId" :  number , // 4357015  
	
					"serviceChargeAmount" :  NumberString , // "0.000002"  
	
					"amount" :  NumberString , // "0.0001"  
	
					"operateTime" :  number , // 1616203180000  
	
					"transferedAmount" :  NumberString , // "0.00009795"  
	
					"fromAsset" :  string , // "ETH" 
	
					
					}
	
				
				]
	
			
			}
	
		
		]
	
	
	}
	
	
	}
	
	
}

Crossmargincollateralratio = {
	name: "Cross margin collateral ratio (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 100
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/crossMarginCollateralRatio"
		HMAC : true
	}
	req = [
	
	 {
	
	"collaterals" : [
		
	 {
	
			"minUsdValue" :  NumberString , // "0"  
	
			"maxUsdValue" :  NumberString , // "13000000"  
	
			"discountRate" :  NumberString , // "1" 
	
			
			},
	
		{
	
			"minUsdValue" :  NumberString , // "13000000"  
	
			"maxUsdValue" :  NumberString , // "20000000"  
	
			"discountRate" :  NumberString , // "0.975" 
	
			
			},
	
		{
	
			"minUsdValue" :  NumberString , // "20000000"  
	
			"discountRate" :  NumberString , // "0" 
	
			
			}
	
		
		],
	
	"assetNames" : [
		
	  string , // "BNX"
		
	 
		]
	
	
	},
	
	{
	
	"collaterals" : [
		
	 {
	
			"minUsdValue" :  NumberString , // "0"  
	
			"discountRate" :  NumberString , // "1" 
	
			
			}
	
		
		],
	
	"assetNames" : [
		
	  string , // "BTC" 
	 
		
	  string , // "BUSD" 
	 
		
	  string , // "ETH" 
	 
		
	  string , // "USDT"
		
	 
		]
	
	
	}
	
	
	]
	
	
}

GetSmallLiabilityExchangeCoinList = {
	name: "Get Small Liability Exchange Coin List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 100
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/exchange-small-liability"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "ETH"  
	
	"interest" :  NumberString , // "0.00083334"  
	
	"principal" :  NumberString , // "0.001"  
	
	"liabilityOfBUSD" :  NumberString , // "1.36214672" 
	
	
	}
	
	
	]
	
	
}

SmallLiabilityExchange = {
	name: "Small Liability Exchange (MARGIN)"
	nameType: "MARGIN"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/margin/exchange-small-liability"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		assetNames : ARRAY // The assets list of small liability exchange， Example: assetNames = BTC,USDT
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {}
}

GetSmallLiabilityExchangeHistory = {
	name: "Get Small Liability Exchange History  (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 100
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/exchange-small-liability-history"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		current : INT // Currently querying page. Start from 1. Default:1
		size : INT // Default:10, Max:100
		startTime? : LONG // Default: 30 days from current timestamp
		endTime? : LONG // Default: present timestamp
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 1  
	
	"rows" : [
	
	 {
	
		"asset" :  string , // "ETH"  
	
		"amount" :  NumberString , // "0.00083434"  
	
		"targetAsset" :  string , // "BUSD"  
	
		"targetAmount" :  NumberString , // "1.37576819"  
	
		"bizType" :  string , // "EXCHANGE_SMALL_LIABILITY"  
	
		"timestamp" :  number , // 1672801339253 
	
		
		}
	
	
	]
	
	
	}
	
	
}

Getafuturehourlyinterestrate = {
	name: "Get a future hourly interest rate  (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 100
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/margin/next-hourly-interest-rate"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		assets : String // List of assets, separated by commas, up to 20
		isIsolated : Boolean // for isolated margin or not, &quot;TRUE&quot;, &quot;FALSE&quot;
	}
	req = [
	
	 {
	
	"asset" :  string , // "BTC"  
	
	"nextHourlyInterestRate" :  NumberString , // "0.00000571" 
	
	
	},
	
	{
	
	"asset" :  string , // "ETH"  
	
	"nextHourlyInterestRate" :  NumberString , // "0.00000578" 
	
	
	}
	
	
	]
	
	
}

LISTENKEY = {
	name: "LISTEN KEY (SPOT)"
	nameType: "SPOT"
	wight: [{
			name : ""
			data : 1
		}
	]
	address : {
		url : "DELETE/api/v3/userDataStream"
	}
	// Name Type Mandatory Description
	params : {
		listenKey : STRING
	}
	req = {
	
	"listenKey" :  string , // "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1" 
	
	
	}
	
	{} 
	
	{} 
	
	
}

LISTENKEY = {
	name: "LISTEN KEY (MARGIN)"
	nameType: "MARGIN"
	wight: [{
			name : ""
			data : 1
		}
	]
	address : {
		url : "DELETE/sapi/v1/userDataStream"
	}
	// Name Type Mandatory Description
	params : {
		listenKey : STRING
	}
	req = {
	 "listenKey" :  string , // "T3ee22BIYuWqmvne0HNq2A2WsFlEtLhvWCtItw6ffhhdmjifQ2tRbuKkTHhr" 
	}
	
	{} 
	
	{} 
	
	
}

LISTENKEY = {
	name: "LISTEN KEY (ISOLATED MARGIN)"
	nameType: "ISOLATED MARGIN"
	wight: [{
			name : ""
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		symbol : STRING
		listenKey : STRING
	}
	req = {}
}

Payload:AccountUpdate = {
	name: "Payload: Account Update"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "outboundAccountPosition"  //Event type
	 
	
	"E" :  number , // 1564034571105  //Event Time
	 
	
	"u" :  number , // 1564034571073  //Time of last account update
	 
	
	"B" : [ //Balances Array
	
	
	
	 {
	
		"a" :  string , // "ETH"  //Asset
	 
	
		"f" :  NumberString , // "10000.000000"  //Free
	 
	
		"l" :  NumberString , // "0.000000" //Locked 
	
		
		}
	
	
	]
	
	
	}
	
	
}

Payload:BalanceUpdate = {
	name: "Payload: Balance Update"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "balanceUpdate"  //Event Type
	 
	
	"E" :  number , // 1573200697110  //Event Time
	 
	
	"a" :  string , // "BTC"  //Asset
	 
	
	"d" :  NumberString , // "100.00000000"  //Balance Delta
	 
	
	"T" :  number , // 1573200697068 //Clear Time 
	
	
	}
	
	
}

Payload:OrderUpdate = {
	name: "Payload: Order Update"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "executionReport"  // Event type
	 
	
	"E" :  number , // 1499405658658  // Event time
	 
	
	"s" :  string , // "ETHBTC"  // Symbol
	 
	
	"c" :  string , // "mUvoqJxFIILMdfAW5iGSOW"  // Client order ID
	 
	
	"S" :  string , // "BUY"  // Side
	 
	
	"o" :  string , // "LIMIT"  // Order type
	 
	
	"f" :  string , // "GTC"  // Time in force
	 
	
	"q" :  NumberString , // "1.00000000"  // Order quantity
	 
	
	"p" :  NumberString , // "0.10264410"  // Order price
	 
	
	"P" :  NumberString , // "0.00000000"  // Stop price
	 
	
	"F" :  NumberString , // "0.00000000"  // Iceberg quantity
	 
	
	"g" :  number , // 1  // OrderListId
	 
	
	"C" :  NumberString , // ""  // Original client order ID; This is the ID of the order being canceled
	 
	
	"x" :  string , // "NEW"  // Current execution type
	 
	
	"X" :  string , // "NEW"  // Current order status
	 
	
	"r" :  string , // "NONE"  // Order reject reason; will be an error code.
	 
	
	"i" :  number , // 4293153  // Order ID
	 
	
	"l" :  NumberString , // "0.00000000"  // Last executed quantity
	 
	
	"z" :  NumberString , // "0.00000000"  // Cumulative filled quantity
	 
	
	"L" :  NumberString , // "0.00000000"  // Last executed price
	 
	
	"n" :  NumberString , // "0"  // Commission amount
	 
	
	"N" :  number , // null  // Commission asset
	 
	
	"T" :  number , // 1499405658657  // Transaction time
	 
	
	"t" :  number , // 1  // Trade ID
	 
	
	"I" :  number , // 8641984  // Ignore
	 
	
	"w" :  boolean , // true  // Is the order on the book?
	 
	
	"m" :  boolean , // false  // Is this trade the maker side?
	 
	
	"M" :  boolean , // false  // Ignore
	 
	
	"O" :  number , // 1499405658657  // Order creation time
	 
	
	"Z" :  NumberString , // "0.00000000"  // Cumulative quote asset transacted quantity
	 
	
	"Y" :  NumberString , // "0.00000000"  // Last quote asset transacted quantity (i.e. lastPrice * lastQty)
	 
	
	"Q" :  NumberString , // "0.00000000"  // Quote Order Quantity
	 
	
	"W" :  number , // 1499405658657  // Working Time; This is only visible if the order has been placed on the book.
	 
	
	"V" :  string , // "NONE" // selfTradePreventionMode 
	
	
	}
	
	{
	
	"e" :  string , // "listStatus"  //Event Type
	 
	
	"E" :  number , // 1564035303637  //Event Time
	 
	
	"s" :  string , // "ETHBTC"  //Symbol
	 
	
	"g" :  number , // 2  //OrderListId
	 
	
	"c" :  string , // "OCO"  //Contingency Type
	 
	
	"l" :  string , // "EXEC_STARTED"  //List Status Type
	 
	
	"L" :  string , // "EXECUTING"  //List Order Status
	 
	
	"r" :  string , // "NONE"  //List Reject Reason
	 
	
	"C" :  string , // "F4QN4G8DlFATFlIUQ0cjdD"  //List Client Order ID
	 
	
	"T" :  number , // 1564035303625  //Transaction Time
	 
	
	"O" : [ //An array of objects
	
	
	
	 {
	
		"s" :  string , // "ETHBTC"  //Symbol
	 
	
		"i" :  number , // 17  // orderId
	 
	
		"c" :  string , // "AJYsMjErWJesZvqlJCTUgL" //ClientOrderId 
	
		
		},
	
	{
	
		"s" :  string , // "ETHBTC"  
	
		"i" :  number , // 18  
	
		"c" :  string , // "bfYPSQdLoqAJeNrOr9adzq" 
	
		
		}
	
	
	]
	
	
	}
	
	
}

GetFlexibleProductList = {
	name: "Get Flexible Product List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/daily/product/list"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		status? : ENUM // &quot;ALL&quot;, &quot;SUBSCRIBABLE&quot;, &quot;UNSUBSCRIBABLE&quot;; Default: &quot;ALL&quot;
		asset? : STRING
		featured? : STRING // &quot;ALL&quot;, &quot;TRUE&quot;; Default: &quot;ALL&quot;
		current? : LONG // Current query page. Default: 1, Min: 1
		size? : LONG // Default: 50, Max: 100
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "BTC"  
	
	"avgAnnualInterestRate" :  NumberString , // "0.05000000" 
	
	"tierAnnualInterestRate" : {
	
		"0-5BTC" :  number , // 0.05  
	
		"5-10BTC" :  number , // 0.03  
	
		"&gt;10BTC" :  number , // 0.01 
	
		
		},
	
	"canPurchase" :  boolean , // true  
	
	"canRedeem" :  boolean , // true  
	
	"dailyInterestPerThousand" :  NumberString , // "0.00685000"  //abandoned
	 
	
	"featured" :  boolean , // true  
	
	"minPurchaseAmount" :  NumberString , // "0.01000000"  
	
	"productId" :  string , // "BTC001"  
	
	"purchasedAmount" :  NumberString , // "16.32467016"  
	
	"status" :  string , // "PURCHASING"  //PREHEATING: Warming up; PURCHASING: Subscribing; END: Finish
	 
	
	"upLimit" :  NumberString , // "200.00000000"  
	
	"upLimitPerUser" :  NumberString , // "5.00000000" 
	
	
	},
	
	{
	
	"asset" :  string , // "BUSD"  
	
	"avgAnnualInterestRate" :  NumberString , // "0.01228590"  
	
	"tierAnnualInterestRate" :  NumberString , // ""  
	
	"canPurchase" :  boolean , // true  
	
	"canRedeem" :  boolean , // true  
	
	"dailyInterestPerThousand" :  NumberString , // "0.03836000"  //abandoned
	 
	
	"featured" :  boolean , // true  
	
	"minPurchaseAmount" :  NumberString , // "0.10000000"  
	
	"productId" :  string , // "BUSD001"  
	
	"purchasedAmount" :  NumberString , // "10.38932339"  
	
	"status" :  string , // "PURCHASING"  //PREHEATING: Warming up; PURCHASING: Subscribing; END: Finish
	 
	
	"upLimit" :  NumberString , // "100000.00000000"  
	
	"upLimitPerUser" :  NumberString , // "50000.00000000" 
	
	
	}
	
	
	]
	
	
}

GetLeftDailyPurchaseQuotaofFlexibleProduct = {
	name: "Get Left Daily Purchase Quota of Flexible Product (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/daily/userLeftQuota"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		productId : STRING
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"asset" :  string , // "BUSD"  
	
	"leftQuota" :  NumberString , // "50000.00000000" 
	
	
	}
	
	
}

PurchaseFlexibleProduct = {
	name: "Purchase Flexible Product (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/lending/daily/purchase"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		productId : STRING
		amount : DECIMAL
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"purchaseId" :  number , // 40607 
	
	
	}
	
	
}

GetLeftDailyRedemptionQuotaofFlexibleProduct = {
	name: "Get Left Daily Redemption Quota of Flexible Product (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/daily/userRedemptionQuota"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		productId : STRING
		type : ENUM // &quot;FAST&quot;, &quot;NORMAL&quot;
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"asset" :  string , // "USDT"  
	
	"dailyQuota" :  NumberString , // "10000000.00000000"  
	
	"leftQuota" :  NumberString , // "0.00000000"  
	
	"minRedemptionAmount" :  NumberString , // "0.10000000" 
	
	
	}
	
	
}

RedeemFlexibleProduct = {
	name: "Redeem Flexible Product (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/lending/daily/redeem"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		productId : STRING
		amount : DECIMAL
		type : ENUM // &quot;FAST&quot;
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {} 
	
	
}

GetFlexibleProductPosition = {
	name: "Get Flexible Product Position (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/daily/token/position"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
	"tierAnnualInterestRate" : {
	
		"0-5BTC" :  number , // 0.05  
	
		"5-10BTC" :  number , // 0.03  
	
		"&gt;10BTC" :  number , // 0.01 
	
		
		},
	
	"annualInterestRate" :  NumberString , // "0.02599895"  
	
	"asset" :  string , // "USDT"  
	
	"avgAnnualInterestRate" :  NumberString , // "0.02599895"  
	
	"canRedeem" :  boolean , // true  
	
	"dailyInterestRate" :  NumberString , // "0.00007123"  
	
	"freeAmount" :  NumberString , // "75.46000000"  
	
	"freezeAmount" :  NumberString , // "0.00000000"  // abandoned
	 
	
	"lockedAmount" :  NumberString , // "0.00000000"  // abandoned
	 
	
	"productId" :  string , // "USDT001"  
	
	"productName" :  string , // "USDT"  
	
	"redeemingAmount" :  NumberString , // "0.00000000"  
	
	"todayPurchasedAmount" :  NumberString , // "0.00000000"  
	
	"totalAmount" :  NumberString , // "75.46000000"  
	
	"totalInterest" :  NumberString , // "0.22759183" 
	
	
	}
	
	
	]
	
	
}

GetFixedandActivityProjectList = {
	name: "Get Fixed and Activity Project List(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/project/list"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		type : ENUM // &quot;ACTIVITY&quot;, &quot;CUSTOMIZED_FIXED&quot;
		status? : ENUM // &quot;ALL&quot;, &quot;SUBSCRIBABLE&quot;, &quot;UNSUBSCRIBABLE&quot;; default &quot;ALL&quot;
		isSortAsc? : BOOLEAN // default &quot;true&quot;
		sortBy? : ENUM // &quot;START_TIME&quot;, &quot;LOT_SIZE&quot;, &quot;INTEREST_RATE&quot;, &quot;DURATION&quot;; default &quot;START_TIME&quot;
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10, Max:100
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "USDT"  
	
	"displayPriority" :  number , // 1  
	
	"duration" :  number , // 90  
	
	"interestPerLot" :  NumberString , // "1.35810000"  
	
	"interestRate" :  NumberString , // "0.05510000"  
	
	"lotSize" :  NumberString , // "100.00000000"  
	
	"lotsLowLimit" :  number , // 1  
	
	"lotsPurchased" :  number , // 74155  
	
	"lotsUpLimit" :  number , // 80000  
	
	"maxLotsPerUser" :  number , // 2000  
	
	"needKyc" :  boolean , // false  
	
	"projectId" :  string , // "CUSDT90DAYSS001"  
	
	"projectName" :  string , // "USDT"  
	
	"status" :  string , // "PURCHASING"  
	
	"type" :  string , // "CUSTOMIZED_FIXED"  
	
	"withAreaLimitation" :  boolean , // false 
	
	
	}
	
	
	]
	
	
}

PurchaseFixedActivityProject = {
	name: "Purchase Fixed/Activity Project  (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/lending/customizedFixed/purchase"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		projectId : STRING
		lot : LONG
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"purchaseId" :  NumberString , // "18356" 
	
	
	}
	
	
}

GetFixedActivityProjectPosition = {
	name: "Get Fixed/Activity Project Position (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/project/position/list"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		projectId? : STRING
		status? : ENUM // &quot;HOLDING&quot;, &quot;REDEEMED&quot;
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "USDT"  
	
	"canTransfer" :  boolean , // true  
	
	"createTimestamp" :  number , // 1587010770000  
	
	"duration" :  number , // 14  
	
	"endTime" :  number , // 1588291200000  
	
	"interest" :  NumberString , // "0.19950000"  
	
	"interestRate" :  NumberString , // "0.05201250"  
	
	"lot" :  number , // 1  
	
	"positionId" :  number , // 51724  
	
	"principal" :  NumberString , // "100.00000000"  
	
	"projectId" :  string , // "CUSDT14DAYSS001"  
	
	"projectName" :  string , // "USDT"  
	
	"purchaseTime" :  number , // 1587010771000  
	
	"redeemDate" :  string , // "2020-05-01"  
	
	"startTime" :  number , // 1587081600000  
	
	"status" :  string , // "HOLDING"  
	
	"type" :  string , // "CUSTOMIZED_FIXED" 
	
	
	}
	
	
	]
	
	
}

LendingAccount = {
	name: "Lending Account (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/union/account"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = {
	
	"positionAmountVos" : [
	
	 {
	
		"amount" :  NumberString , // "75.46000000"  
	
		"amountInBTC" :  NumberString , // "0.01044819"  
	
		"amountInUSDT" :  NumberString , // "75.46000000"  
	
		"asset" :  string , // "USDT" 
	
		
		},
	
	{
	
		"amount" :  NumberString , // "1.67072036"  
	
		"amountInBTC" :  NumberString , // "0.00023163"  
	
		"amountInUSDT" :  NumberString , // "1.67289230"  
	
		"asset" :  string , // "BUSD" 
	
		
		}
	
	
	],
	
	"totalAmountInBTC" :  NumberString , // "0.01067982"  
	
	"totalAmountInUSDT" :  NumberString , // "77.13289230"  
	
	"totalFixedAmountInBTC" :  NumberString , // "0.00000000"  
	
	"totalFixedAmountInUSDT" :  NumberString , // "0.00000000"  
	
	"totalFlexibleInBTC" :  NumberString , // "0.01067982"  
	
	"totalFlexibleInUSDT" :  NumberString , // "77.13289230" 
	
	
	}
	
	
}

GetPurchaseRecord = {
	name: "Get Purchase Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/union/purchaseRecord"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		lendingType : ENUM // &quot;DAILY&quot; for flexible, &quot;ACTIVITY&quot; for activity, &quot;CUSTOMIZED_FIXED&quot; for fixed
		asset? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10, Max:100
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
	"amount" :  NumberString , // "100.00000000"  
	
	"asset" :  string , // "USDT"  
	
	"createTime" :  number , // 1575018510000  
	
	"lendingType" :  string , // "DAILY"  
	
	"productName" :  string , // "USDT"  
	
	"purchaseId" :  number , // 26055  
	
	"status" :  string , // "SUCCESS" 
	
	
	}
	
	
	]
	
	[
	
	 {
	
	"amount" :  NumberString , // "100.00000000"  
	
	"asset" :  string , // "USDT"  
	
	"createTime" :  number , // 1575018453000  
	
	"lendingType" :  string , // "ACTIVITY"  
	
	"lot" :  number , // 1  
	
	"productName" :  string , // "【Special】USDT 7D (8%)"  
	
	"purchaseId" :  number , // 36857  
	
	"status" :  string , // "SUCCESS" 
	
	
	}
	
	
	]
	
	
}

GetRedemptionRecord = {
	name: "Get Redemption Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/union/redemptionRecord"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		lendingType : ENUM // &quot;DAILY&quot; for flexible, &quot;ACTIVITY&quot; for activity, &quot;CUSTOMIZED_FIXED&quot; for fixed
		asset? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10, Max:100
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
	"amount" :  NumberString , // "10.54000000"  
	
	"asset" :  string , // "USDT"  
	
	"createTime" :  number , // 1577257222000  
	
	"principal" :  NumberString , // "10.54000000"  
	
	"projectId" :  string , // "USDT001"  
	
	"projectName" :  string , // "USDT"  
	
	"status" :  string , // "PAID"  
	
	"type" :  string , // "FAST" 
	
	
	}
	
	
	]
	
	[
	
	 {
	
	"amount" :  NumberString , // "0.07070000"  
	
	"asset" :  string , // "USDT"  
	
	"createTime" :  number , // 1566200161000  
	
	"interest" :  NumberString , // "0.00070000"  
	
	"principal" :  NumberString , // "0.07000000"  
	
	"projectId" :  string , // "test06"  
	
	"projectName" :  string , // "USDT 1 day (10% anniualized)"  
	
	"startTime" :  number , // 1566198000000  
	
	"status" :  string , // "PAID" 
	
	
	}
	
	
	]
	
	
}

GetInterestHistory = {
	name: "Get Interest History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/lending/union/interestHistory"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		lendingType : ENUM // &quot;DAILY&quot; for flexible, &quot;ACTIVITY&quot; for activity, &quot;CUSTOMIZED_FIXED&quot; for fixed
		asset? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10, Max:100
		recvWindow? : LONG // The value cannot be greater than 
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "BUSD"  
	
	"interest" :  NumberString , // "0.00006408"  
	
	"lendingType" :  string , // "DAILY"  
	
	"productName" :  string , // "BUSD"  
	
	"time" :  number , // 1577233578000 
	
	
	},
	
	{
	
	"asset" :  string , // "USDT"  
	
	"interest" :  NumberString , // "0.00687654"  
	
	"lendingType" :  string , // "DAILY"  
	
	"productName" :  string , // "USDT"  
	
	"time" :  number , // 1577233562000 
	
	
	}
	
	
	]
	
	
}

ChangeFixedActivityPositiontoDailyPosition = {
	name: "Change Fixed/Activity Position to Daily Position(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/lending/positionChanged"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		projectId : STRING
		lot : LONG
		positionId? : LONG // for fixed position
		recvWindow? : LONG // no more than 
		timestamp : LONG
	}
	req = {
	
	"dailyPurchaseId" :  number , // 862290  
	
	"success" :  boolean , // true  
	
	"time" :  number , // 1577233578000 
	
	
	}
	
	
}

GetStakingProductList = {
	name: "Get Staking Product List(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/staking/productList"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		product : ENUM // &quot;STAKING&quot; for Locked Staking, &quot;F_DEFI&quot; for flexible DeFi Staking, &quot;L_DEFI&quot; for locked DeFi Staking
		asset? : STRING
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10, Max:100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"projectId" :  string , // "Axs*90"  
	
	"detail" : {
	
		"asset" :  string , // "AXS"  //Lock up asset
	 
	
		"rewardAsset" :  string , // "AXS"  //Earn Asset
	 
	
		"duration" :  number , // 90  //Lock period(days)
	 
	
		"renewable" :  boolean , // true  //Project supports renewal
	 
	
		"apy" :  NumberString , // "1.2069" 
	
		
		},
	
	"quota" : {
	
		"totalPersonalQuota" :  NumberString , // "2"  //Total Personal quota
	 
	
		"minimum" :  NumberString , // "0.001" //Minimum amount per order 
	
		
		}
	
	
	},
	
	{
	
	"projectId" :  string , // "Fio*90"  
	
	"detail" : {
	
		"asset" :  string , // "FIO"  
	
		"rewardAsset" :  string , // "FIO"  
	
		"duration" :  number , // 90  
	
		"renewable" :  boolean , // true  
	
		"apy" :  NumberString , // "1.0769" 
	
		
		},
	
	"quota" : {
	
		"totalPersonalQuota" :  NumberString , // "600"  
	
		"minimum" :  NumberString , // "0.1" 
	
		
		}
	
	
	}
	
	
	]
	
	
}

PurchaseStakingProduct = {
	name: "Purchase Staking Product(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/staking/purchase"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		product : ENUM // &quot;STAKING&quot; for Locked Staking, &quot;F_DEFI&quot; for flexible DeFi Staking, &quot;L_DEFI&quot; for locked DeFi Staking
		productId : STRING
		amount : DECIMAL
		renewable? : STRING // true or false, default false. Active if product is &quot;STAKING&quot; or &quot;L_DEFI&quot;
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"positionId" :  NumberString , // "12345"  
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

RedeemStakingProduct = {
	name: "Redeem Staking Product(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/staking/redeem"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		product : ENUM // &quot;STAKING&quot; for Locked Staking, &quot;F_DEFI&quot; for flexible DeFi Staking, &quot;L_DEFI&quot; for locked DeFi Staking
		positionId? : STRING // &quot;1234&quot;, Mandatory if product is &quot;STAKING&quot; or &quot;L_DEFI&quot;
		productId : STRING
		amount? : DECIMAL // Mandatory if product is &quot;F_DEFI&quot;
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

GetStakingProductPosition = {
	name: "Get Staking Product Position(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/staking/position"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		product : ENUM // &quot;STAKING&quot; for Locked Staking, &quot;F_DEFI&quot; for flexible DeFi Staking, &quot;L_DEFI&quot; for locked DeFi Staking
		productId? : STRING
		asset? : STRING
		current? : LONG // Currently querying the page. Start from 1. Default:1
		size? : LONG // Default:10, Max:100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"positionId" :  NumberString , // "123123"  //Staking position ID
	 
	
	"projectId" :  string , // "Axs*90"  //Staking project ID
	 
	
	"asset" :  string , // "AXS"  //Locked asset 
	 
	
	"amount" :  NumberString , // "122.09202928"  //Locked Amount
	 
	
	"purchaseTime" :  NumberString , // "1646182276000"  //Subscription time
	 
	
	"duration" :  NumberString , // "60"  //Lock period(days) 
	 
	
	"accrualDays" :  NumberString , // "4"  //Accrue days
	 
	
	"rewardAsset" :  string , // "AXS"  //Earned asset
	 
	
	"APY" :  NumberString , // "0.2032"  
	
	"rewardAmt" :  NumberString , // "5.17181528"  //Earned amount
	 
	
	"extraRewardAsset" :  string , // "BNB"  //Rewards assets of extra staking type 
	 
	
	"extraRewardAPY" :  NumberString , // "0.0203"  //APY of extra staking type
	 
	
	"estExtraRewardAmt" :  NumberString , // "5.17181528"  //Rewards of extra staking type, distribute when order expires
	 
	
	"nextInterestPay" :  NumberString , // "1.29295383"  //Next estimated interest payment
	 
	
	"nextInterestPayDate" :  NumberString , // "1646697600000"  //Next interest payment date
	 
	
	"payInterestPeriod" :  NumberString , // "1"  //Interest cycle
	 
	
	"redeemAmountEarly" :  NumberString , // "2802.24068892"  //Early redemption amount
	 
	
	"interestEndDate" :  NumberString , // "1651449600000"  //Interest accrual end date
	 
	
	"deliverDate" :  NumberString , // "1651536000000"  //Redemption arrival time
	 
	
	"redeemPeriod" :  NumberString , // "1"  //Redemption interval
	 
	
	"redeemingAmt" :  NumberString , // "232.2323"  //Amount under redemption
	 
	
	"partialAmtDeliverDate" :  NumberString , // "1651536000000"  //Arrival time of partial redemption amount of order
	 
	
	"canRedeemEarly" :  boolean , // true  //When it is true, early redemption can be operated 
	 
	
	"renewable" true  //When it is true, auto staking can be operated 
	
	"type" :  string , // "AUTO"  //Order type is auto-staking or normal
	 
	
	"status" :  string , // "HOLDING" 
	
	
	}
	
	
	]
	
	
}

GetStakingHistory = {
	name: "Get Staking History(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/staking/stakingRecord"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		product : ENUM // &quot;STAKING&quot; for Locked Staking, &quot;F_DEFI&quot; for flexible DeFi Staking, &quot;L_DEFI&quot; for locked DeFi Staking
		txnType : ENUM // &quot;SUBSCRIPTION&quot;, &quot;REDEMPTION&quot;, &quot;INTEREST&quot;
		asset? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying the page. Start from 1. Default:1
		size? : LONG // Default:10, Max:100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"positionId" :  NumberString , // "123123"  
	
	"time" :  number , // 1575018510000  
	
	"asset" :  string , // "BNB"  
	
	"project" :  string , // "BSC"  //DeFi Staking’s project 
	 
	
	"amount" :  NumberString , // "21312.23223"  
	
	"lockPeriod" :  NumberString , // "30"  
	
	"deliverDate" :  NumberString , // "1575018510000"  //Redemption date
	 
	
	"type" :  string , // "AUTO"  // display only for subscription
	 
	
	"status" :  string , // "success" 
	
	
	}
	
	
	]
	
	
}

SetAutoStaking = {
	name: "Set Auto Staking(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/staking/setAutoStaking"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		product : ENUM // &quot;STAKING&quot; for Locked Staking,  &quot;L_DEFI&quot; for locked DeFi Staking
		positionId : STRING
		renewable : STRING // true or false
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

GetPersonalLeftQuotaofStakingProduct = {
	name: "Get Personal Left Quota of Staking Product(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/staking/personalLeftQuota"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		product : ENUM // &quot;STAKING&quot; for Locked Staking, &quot;F_DEFI&quot; for flexible DeFi Staking, &quot;L_DEFI&quot; for locked DeFi Staking
		productId : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"leftPersonalQuota" :  NumberString , // "1000" // User left quota 
	
	
	}
	
	
	]
	
	
}

AcquiringAlgorithm = {
	name: "Acquiring Algorithm (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : [
	
	 {
	
		"algoName" :  string , // "sha256"  //  Algorithm name
	 
	
		"algoId" :  number , // 1  // Algorithm ID
	 
	
		"poolIndex" :  number , // 0  // Sequence 
	 
	
		"unit" :  string , // "h/s" //   Unit 
	
		
		}
	
	
	]
	
	
	}
	
	
}

AcquiringCoinName = {
	name: "Acquiring CoinName (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : [
	
	 {
	
		"coinName" :  string , // "BTC"  //  Currencyname
	 
	
		"coinId" :  number , // 1  // id
	 
	
		"poolIndex" :  number , // 0  // Sort
	 
	
		"algoId" :  number , // 1  // Algorithm
	 
	
		"algoName" :  string , // "sha256" //Name of algorithm 
	
		
		}
	
	
	]
	
	
	}
	
	
}

RequestforDetailMinerList = {
	name: "Request for Detail Miner List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : [
	
	 {
	
		"workerName" :  string , // "bhdc1.16A10404B"  //Mining Account name
	 
	
		"type" :  string , // "H_hashrate"  // Type of hourly hashrate
	 
	
		"hashrateDatas" : [
			
	 {
	
				"time" :  number , // 1587902400000  //  Time
	 
	
				"hashrate" :  NumberString , // "0"  // Hashrate
	 
	
				"reject" :  number , // 0 //Rejection Rate 
	
				
				},
	
			{
	
				"time" :  number , // 1587906000000  
	
				"hashrate" :  NumberString , // "0"  
	
				"reject" :  number , // 0 
	
				
				}
	
			
			]
	
		
		},
	
	{
	
		"workerName" :  string , // "bhdc1.16A10404B"  //Mining Account name
	 
	
		"type" :  string , // "D_hashrate"  //Type of daily hashrate
	 
	
		"hashrateDatas" : [
			
	 {
	
				"time" :  number , // 1587902400000  //  Time
	 
	
				"hashrate" :  NumberString , // "0"  // Hashrate 
	 
	
				"reject" :  number , // 0 //Rejection Rate 
	
				
				},
	
			{
	
				"time" :  number , // 1587906000000  
	
				"hashrate" :  NumberString , // "0"  
	
				"reject" :  number , // 0 
	
				
				}
	
			
			]
	
		
		}
	
	
	]
	
	
	}
	
	
}

RequestforMinerList = {
	name: "Request for Miner List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : {
	
	"workerDatas" : [
		
	 {
	
			"workerId" :  NumberString , // "1420554439452400131"  //Miner ID
	 
	
			"workerName" :  string , // "2X73"  //Miner's name  
	 
	
			"status" :  number , // 3  // Status：1 valid, 2 invalid, 3 no longer valid
	 
	
			"hashRate" :  number , // 0  // Real-time rate
	 
	
			"dayHashRate" :  number , // 0  //24H Hashrate
	 
	
			"rejectRate" :  number , // 0  //Real-time Rejection Rate
	 
	
			"lastShareTime" :  number , // 1587712919000 // Last submission time  
	
			
			},
	
		{
	
			"workerId" :  NumberString , // "7893926126382807951"  
	
			"workerName" :  string , // "AZDC1.1A10101"  
	
			"status" :  number , // 2  
	
			"hashRate" :  number , // 29711247541680  
	
			"dayHashRate" :  number , // 12697781298013.66  
	
			"rejectRate" :  number , // 0  
	
			"lastShareTime" :  number , // 1587969727000 
	
			
			}
	
		
		],
	
	"totalNum" :  number , // 18530  // Total amount
	 
	
	"pageSize" :  number , // 20 // Rows per page 
	
	
	}
	
	
	}
	
	
}

EarningsList = {
	name: "Earnings List(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : {
	
	"accountProfits" : [
		
	 {
	
			"time" :  number , // 1586188800000  // Mining date
	 
	
			"type" :  number , // 31  // 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings
	 
	
			"hashTransfer" :  number , // null  // Transferred Hashrate
	 
	
			"transferAmount" :  number , // null  // Transferred Income   
	 
	
			"dayHashRate" :  number , // 129129903378244  // Daily Hashrate
	 
	
			"profitAmount" :  number , // 8.6083060304  //Earnings Amount
	 
	
			"coinName" :  string , // "BTC"  // Coin Type
	 
	
			"status" :  number , // 2 //Status：0:Unpaid， 1:Paying  2：Paid 
	
			
			},
	
		{
	
			"time" :  number , // 1607529600000  
	
			"coinName" :  string , // "BTC"  
	
			"type" :  number , // 0  
	
			"dayHashRate" :  number , // 9942053925926  
	
			"profitAmount" :  number , // 0.85426469  
	
			"hashTransfer" :  number , // 200000000000  
	
			"transferAmount" :  number , // 0.02180958  
	
			"status" :  number , // 2 
	
			
			},
	
		{
	
			"time" :  number , // 1607443200000  
	
			"coinName" :  string , // "BTC"  
	
			"type" :  number , // 31  
	
			"dayHashRate" :  number , // 200000000000  
	
			"profitAmount" :  number , // 0.02905916  
	
			"hashTransfer" :  number , // null  
	
			"transferAmount" :  number , // null  
	
			"status" :  number , // 2 
	
			
			}
	
		
		],
	
	"totalNum" :  number , // 3  // Total Rows
	 
	
	"pageSize" :  number , // 20 // Rows per page 
	
	
	}
	
	
	}
	
	
}

ExtraBonusList = {
	name: "Extra Bonus List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : {
	
	"otherProfits" : [
		
	 {
	
			"time" :  number , // 1607443200000  // Mining date
	 
	
			"coinName" :  string , // "BTC"  // Coin Name
	 
	
			"type" :  number , // 4  // 1: Merged Mining， 2: Activity Bonus, 3:Rebate 4:Smart Pool 6:Income Transfer 7:Pool Savings
	 
	
			"profitAmount" :  number , // 0.0011859  //Amount
	 
	
			"status" :  number , // 2 //Status：0:Unpaid， 1:Paying  2：Paid 
	
			
			}
	
		
		],
	
	"totalNum" :  number , // 3  // Total Rows
	 
	
	"pageSize" :  number , // 20 // Rows per page 
	
	
	}
	
	
	}
	
	
}

HashrateResaleList = {
	name: "Hashrate Resale List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : {
	
	"configDetails" : [
		
	 {
	
			"configId" :  number , // 168  // Mining ID
	 
	
			"poolUsername" :  NumberString , // "123"  //Transfer out of subaccount
	 
	
			"toPoolUsername" :  string , // "user1"  //  Transfer into subaccount
	 
	
			"algoName" :  string , // "Ethash"  // Transfer algorithm
	 
	
			"hashRate" :  number , // 5000000  //  Transferred Hashrate quantity
	 
	
			"startDay" :  number , // 20201210  // Start date
	 
	
			"endDay" :  number , // 20210405  //End date
	 
	
			"status" :  number , // 1 //Status：0 Processing，1：Cancelled，2：Terminated  
	
			
			},
	
		{
	
			"configId" :  number , // 166  
	
			"poolUsername" :  string , // "pop"  
	
			"toPoolUsername" :  NumberString , // "111111"  
	
			"algoName" :  string , // "Ethash"  
	
			"hashRate" :  number , // 3320000  
	
			"startDay" :  number , // 20201226  
	
			"endDay" :  number , // 20201227  
	
			"status" :  number , // 0 
	
			
			}
	
		
		],
	
	"totalNum" :  number , // 21  
	
	"pageSize" :  number , // 200 
	
	
	}
	
	
	}
	
	
}

HashrateResaleDetail = {
	name: "Hashrate Resale Detail (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : {
	
	"profitTransferDetails" :  number , // [{ 
	
	"poolUsername" :  string , // "test4001"  // Transfer out of sub-account
	 
	
	"toPoolUsername" :  string , // "pop"  // Transfer into subaccount
	 
	
	"algoName" :  string , // "sha256"  // Transfer algorithm
	 
	
	"hashRate" :  number , // 200000000000  // Transferred Hashrate quantity
	 
	
	"day" :  number , // 20201213  // Transfer date
	 
	
	"amount" :  number , // 0.2256872  // Transferred income
	 
	
	"coinName" :  string , // "BTC" // Coin Name 
	
	
	},
	
	{
	
	"poolUsername" :  string , // "test4001"  
	
	"toPoolUsername" :  string , // "pop"  
	
	"algoName" :  string , // "sha256"  
	
	"hashRate" :  number , // 200000000000  
	
	"day" :  number , // 20201213  
	
	"amount" :  number , // 0.2256872  
	
	"coinName" :  string , // "BTC" 
	
	
	}
	
	
	],
	
	"totalNum" :  number , // 8  
	
	"pageSize" :  number , // 200 
	
	
	}
	
	
	}
	
	
}

HashrateResaleRequest = {
	name: "Hashrate Resale Request (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" :  number , // 171 // Mining Account 
	
	
	}
	
	
}

Cancelhashrateresaleconfiguration = {
	name: "Cancel hashrate resale configuration(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" :  boolean , // true 
	
	
	}
	
	
}

StatisticList = {
	name: "Statistic List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : {
	
	"fifteenMinHashRate" :  NumberString , // "457835490067496409.00000000"  // 15 mins hashrate
	 
	
	"dayHashRate" :  NumberString , // "214289268068874127.65000000"  //  24H Hashrate
	 
	
	"validNum" :  number , // 0  // Effective quantity
	 
	
	"invalidNum" :  number , // 17562  // Invalid quantity
	 
	
	"profitToday" :{
	 // Today's estimate 
	
	"BTC" :  NumberString , // "0.00314332"  
	
	"BSV" :  NumberString , // "56.17055953"  
	
	"BCH" :  NumberString , // "106.61586001" 
	
	
	},
	
	"profitYesterday" :{
	 //  Yesterday's earnings 
	
	"BTC" :  NumberString , // "0.00314332"  
	
	"BSV" :  NumberString , // "56.17055953"  
	
	"BCH" :  NumberString , // "106.61586001" 
	
	
	},
	
	"userName" :  string , // "test"  // Mining account
	 
	
	"unit" :  string , // "h/s"  //  Hashrate unit
	 
	
	"algo" :  string , // "sha256" // Algorithm 
	
	
	}
	
	
	}
	
	
}

AccountList = {
	name: "Account List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : [
	
	 {
	
	"type" :  string , // "H_hashrate"  //Type of hourly hashrate
	 
	
	"userName" :  string , // "test"  // Mining account
	 
	
	"list" : [
	
	 {
	
		"time" :  number , // 1585267200000  // Time
	 
	
		"hashrate" :  NumberString , // "0.00000000"  // Hashrate
	 
	
		"reject" :  NumberString , // "0.00000000" //Rejection Rate 
	
		
		},
	
	{
	
		"time" :  number , // 1585353600000  
	
		"hashrate" :  NumberString , // "0.00000000"  
	
		"reject" :  NumberString , // "0.00000000" 
	
		
		}
	
	
	]
	
	
	},
	
	{
	
	"type" :  string , // "D_hashrate"  //Type of daily hashrate
	 
	
	"userName" :  string , // "test"  // Mining account
	 
	
	"list" : [
	
	 {
	
		"time" :  number , // 1587906000000  // Time
	 
	
		"hashrate" :  NumberString , // "0.00000000"  // Hashrate
	 
	
		"reject" :  NumberString , // "0.00000000" //Rejection Rate 
	
		
		},
	
	{
	
		"time" :  number , // 1587909600000  
	
		"hashrate" :  NumberString , // "0.00000000"  
	
		"reject" :  NumberString , // "0.00000000" 
	
		
		}
	
	
	]
	
	
	}
	
	
	]
	
	
	}
	
	
}

MiningAccountEarning = {
	name: "Mining Account Earning (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 5
		}
	]
	req = {
	
	"code" :  number , // 0  
	
	"msg" :  NumberString , // ""  
	
	"data" : {
	
	"accountProfits" : [
	
	 {
	
	"time" :  number , // 1607443200000  
	
	"coinName" :  string , // "BTC"  // Coin
	 
	
	"type" :  number , // 2  // 0:Referral 1：Refund 2：Rebate
	 
	
	"puid" :  number , // 59985472  //Sub-account id
	 
	
	"subName" :  string , // "vdvaghani"  //Mining account
	 
	
	"amount" :  number , // 0.09186957 //Amount 
	
	
	}
	
	
	],
	
	"totalNum" :  number , // 3  // Total records
	 
	
	"pageSize" :  number , // 20 // Size of one page 
	
	
	}
	
	
	}
	
	
}

NewFutureAccountTransfer = {
	name: "New Future Account Transfer (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		asset : STRING // The asset being transferred, e.g., USDT
		amount : DECIMAL // The amount to be transferred
		type : INT
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"tranId" :  number , // 100000001 //transaction id 
	
	
	}
	
	
}

GetFutureAccountTransactionHistoryList = {
	name: "Get Future Account Transaction History List (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		startTime : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		size? : LONG // Default:10 Max:100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"asset" :  string , // "USDT"  
	
	"tranId" :  number , // 100000001  
	
	"amount" :  NumberString , // "40.84624400"  
	
	"type" :  NumberString , // "1"  // one of 1( from spot to USDT-Ⓜ), 2( from USDT-Ⓜ to spot), 3( from spot to COIN-Ⓜ), and 4( from COIN-Ⓜ to spot)
	 
	
	"timestamp" :  number , // 1555056425000  
	
	"status" :  string , // "CONFIRMED" //one of PENDING (pending to execution), CONFIRMED (successfully transfered), FAILED (execution failed, nothing happened to your account); 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

CrossCollateralBorrowHistory = {
	name: "Cross-Collateral Borrow History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		coin? : STRING
		startTime? : LONG
		endTime? : LONG
		limit? : LONG // default 500, max 1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" :[
	
	 {
	
	"confirmedTime" :  number , // 1582540328433  
	
	"coin" :  string , // "USDT"  
	
	"collateralRate" :  NumberString , // "0.89991001"  // collateralLevel
	 
	
	"leftTotal" :  NumberString , // "4.5"  
	
	"leftPrincipal" :  NumberString , // "4.5"  
	
	"deadline" :  number , // 4736102399000  
	
	"collateralCoin" :  string , // "BUSD"  
	
	"collateralAmount" :  NumberString , // "5.0"  
	
	"orderStatus" :  string , // "PENDING"  
	
	"borrowId" :  NumberString , // "438648398970089472" 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

CrossCollateralRepaymentHistory = {
	name: "Cross-Collateral Repayment History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		coin? : STRING
		startTime? : LONG
		endTime? : LONG
		limit? : LONG // default 500, max 1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" :[
	
	 {
	
	"coin" :  string , // "USDT"  
	
	"amount" :  NumberString , // "1.68"  
	
	"collateralCoin" :  string , // "BUSD"  
	
	"repayType" :  string , // "NORMAL"  // "COLLATERAL" for collateral repayment
	 
	
	"releasedCollateral" :  NumberString , // "1.80288889"  
	
	"price" :  NumberString , // "1.001"  // Loan/collateral exchange rate
	 
	
	"repayCollateral" :  NumberString , // "10010"  // Only for collateral repayment
	 
	
	"confirmedTime" :  number , // 1582781327575  
	
	"updateTime" :  number , // 1582794387516  // time
	 
	
	"status" :  string , // "PENDING"  
	
	"repayId" :  NumberString , // "439659223998894080" 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

CrossCollateralWalletV2 = {
	name: "Cross-Collateral Wallet V2 (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"totalCrossCollateral" :  NumberString , // "5.8238577133"  
	
	"totalBorrowed" :  NumberString , // "5.07000000"  
	
	"totalInterest" :  NumberString , // "0.0"  // New for interest collection
	 
	
	"interestFreeLimit" :  NumberString , // "100000"  // New for interest free limit
	 
	
	"asset" :  string , // "USD"  // New for USD value
	 
	
	"crossCollaterals" :[
	
	 {
	
	"loanCoin" :  string , // "USDT"  
	
	"collateralCoin" :  string , // "BUSD"  
	
	"locked" :  NumberString , // "5.82211108"  
	
	"loanAmount" :  NumberString , // "5.07"  
	
	"currentCollateralRate" :  NumberString , // "0.87168984"  // collateralLevel
	 
	
	"interestFreeLimitUsed" :  NumberString , // "5.07"  // New for interest free limit
	 
	
	"principalForInterest" :  NumberString , // "0.0"  // New for interest collection
	 
	
	"interest" :  NumberString , // "0.0" // New for interest collection 
	
	
	},
	
	{
	
	"loanCoin" :  string , // "BUSD"  
	
	"collateralCoin" :  string , // "BTC"  
	
	"locked" :  NumberString , // "0"  
	
	"loanAmount" :  NumberString , // "0"  
	
	"currentCollateralRate" :  NumberString , // "0"  // collateralLevel
	 
	
	"interestFreeLimitUsed" :  NumberString , // "0"  // New for interest free limit
	 
	
	"principalForInterest" :  NumberString , // "0.0"  // New for interest collection
	 
	
	"interest" :  NumberString , // "0.0" // New for interest collection 
	
	
	}
	
	
	]
	
	
	}
	
	
}

AdjustCrossCollateralLTVHistory = {
	name: "Adjust Cross-Collateral LTV History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		loanCoin? : STRING
		collateralCoin? : STRING
		startTime? : LONG
		endTime? : LONG
		limit? : LONG // default 500, max 1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" :[
	
	 {
	
	"amount" :  NumberString , // ".17398184"  
	
	"collateralCoin" :  string , // "BUSD"  
	
	"coin" :  string , // "USDT"  
	
	"preCollateralRate" :  NumberString , // "0.87054861"  
	
	"afterCollateralRate" :  NumberString , // "0.89736451"  
	
	"direction" :  string , // "REDUCED"  
	
	"status" :  string , // "COMPLETED"  
	
	"adjustTime" :  number , // 1583978243588 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

CrossCollateralLiquidationHistory = {
	name: "Cross-Collateral Liquidation History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 10
		}
	]
	// Name Type Mandatory Description
	params : {
		loanCoin? : STRING
		collateralCoin? : STRING
		startTime? : LONG
		endTime? : LONG
		limit? : LONG // default 500, max 1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" :[
	
	 {
	
	"collateralAmountForLiquidation" :  NumberString , // "10.12345678"  
	
	"collateralCoin" :  string , // "BUSD"  
	
	"forceLiquidationStartTime" :  number , // 1583978243588  
	
	"coin" :  string , // "USDT"  
	
	"restCollateralAmountAfterLiquidation" :  NumberString , // "15.12345678"  
	
	"restLoanAmount" :  NumberString , // "11.12345678"  
	
	"status" :  string , // "PENDING" 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

CrossCollateralInterestHistory = {
	name: "Cross-Collateral Interest History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		collateralCoin? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1. Default:1
		limit? : LONG // Default:500 Max:1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" :[
	
	 {
	
	"collateralCoin" :  string , // "BUSD"  
	
	"interestCoin" :  string , // "USDT"  
	
	"interest" :  NumberString , // "2.354"  
	
	"interestFreeLimitUsed" :  NumberString , // "0"  // New for interest free limit
	 
	
	"principalForInterest" :  NumberString , // "10000"  
	
	"interestRate" :  NumberString , // "0.002"  
	
	"time" :  number , // 1582794387516 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

VolumeParticipation = {
	name: "Volume Participation(VP)"
	nameType: "VP"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/algo/futures/newOrderVp"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING // Trading symbol eg. BTCUSDT
		side : ENUM // Trading side ( BUY or SELL )
		positionSide? : ENUM // Default 
		quantity : DECIMAL // Quantity of base asset; The notional (
		urgency : ENUM // Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
		clientAlgoId? : STRING // A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
		reduceOnly? : BOOLEAN // &quot;true&quot; or &quot;false&quot;. Default &quot;false&quot;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
		limitPrice? : DECIMAL // Limit price of the order; If it is not sent, will place order by market price by default
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"clientAlgoId" :  string , // "00358ce6a268403398bd34eaa36dffe7"  
	
	"success" :  boolean , // true  
	
	"code" :  number , // 0  
	
	"msg" :  string , // "OK" 
	
	
	}
	
	
}

TimeWeightedAveragePrice = {
	name: "Time-Weighted Average Price(Twap)"
	nameType: "Twap"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/algo/futures/newOrderTwap"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING // Trading symbol eg. BTCUSDT
		side : ENUM // Trading side ( BUY or SELL )
		positionSide? : ENUM // Default 
		quantity : DECIMAL // Quantity of base asset; The notional (
		duration : LONG // Duration for TWAP orders in seconds. [300, 86400];Less than 5min =&gt; defaults to 5 min; Greater than 24h =&gt; defaults to 24h
		clientAlgoId? : STRING // A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
		reduceOnly? : BOOLEAN // &quot;true&quot; or &quot;false&quot;. Default &quot;false&quot;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
		limitPrice? : DECIMAL // Limit price of the order; If it is not sent, will place order by market price by default
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"clientAlgoId" :  string , // "65ce1630101a480b85915d7e11fd5078"  
	
	"success" :  boolean , // true  
	
	"code" :  number , // 0  
	
	"msg" :  string , // "OK" 
	
	
	}
	
	
}

CancelAlgoOrder = {
	name: "Cancel Algo Order (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		url : "DELETE/sapi/v1/algo/futures/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		algoId : LONG // eg. 14511
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"algoId" :  number , // 14511  
	
	"success" :  boolean , // true  
	
	"code" :  number , // 0  
	
	"msg" :  string , // "OK" 
	
	
	}
	
	
}

QueryCurrentAlgoOpenOrders = {
	name: "Query Current Algo Open Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/algo/futures/openOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 1  
	
	"orders" : [
	
	 {
	
	"algoId" :  number , // 14517  
	
	"symbol" :  string , // "ETHUSDT"  
	
	"side" :  string , // "SELL"  
	
	"positionSide" :  string , // "SHORT"  
	
	"totalQty" :  NumberString , // "5.000"  
	
	"executedQty" :  NumberString , // "0.000"  
	
	"executedAmt" :  NumberString , // "0.00000000"  
	
	"avgPrice" :  NumberString , // "0.00"  
	
	"clientAlgoId" :  string , // "d7096549481642f8a0bb69e9e2e31f2e"  
	
	"bookTime" :  number , // 1649756817004  
	
	"endTime" :  number , // 0  
	
	"algoStatus" :  string , // "WORKING"  
	
	"algoType" :  string , // "VP"  
	
	"urgency" :  string , // "LOW" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

QueryHistoricalAlgoOrders = {
	name: "Query Historical Algo Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/algo/futures/historicalOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING // Trading symbol eg. BTCUSDT
		side? : ENUM // BUY or SELL
		startTime? : LONG // in milliseconds  eg.1641522717552
		endTime? : LONG // in milliseconds  eg.1641522526562
		page? : INT // Default is 1
		pageSize? : INT // MIN 1, MAX 100; Default 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 1  
	
	"orders" : [
	
	 {
	
	"algoId" :  number , // 14518  
	
	"symbol" :  string , // "BNBUSDT"  
	
	"side" :  string , // "BUY"  
	
	"positionSide" :  string , // "BOTH"  
	
	"totalQty" :  NumberString , // "100.00"  
	
	"executedQty" :  NumberString , // "0.00"  
	
	"executedAmt" :  NumberString , // "0.00000000"  
	
	"avgPrice" :  NumberString , // "0.000"  
	
	"clientAlgoId" :  string , // "acacab56b3c44bef9f6a8f8ebd2a8408"  
	
	"bookTime" :  number , // 1649757019503  
	
	"endTime" :  number , // 1649757088101  
	
	"algoStatus" :  string , // "CANCELLED"  
	
	"algoType" :  string , // "VP"  
	
	"urgency" :  string , // "LOW" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

QuerySubOrders = {
	name: "Query Sub Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/algo/futures/subOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		algoId : LONG
		page? : INT // Default is 1
		pageSize? : INT // MIN 1, MAX 100; Default 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 1  
	
	"executedQty" :  NumberString , // "1.000"  
	
	"executedAmt" :  NumberString , // "3229.44000000"  
	
	"subOrders" : [
	
	 {
	
	"algoId" :  number , // 13723  
	
	"orderId" :  number , // 8389765519993908929  
	
	"orderStatus" :  string , // "FILLED"  
	
	"executedQty" :  NumberString , // "1.000"  
	
	"executedAmt" :  NumberString , // "3229.44000000"  
	
	"feeAmt" :  NumberString , // "-1.61471999"  
	
	"feeAsset" :  string , // "USDT"  
	
	"bookTime" :  number , // 1649319001964  
	
	"avgPrice" :  NumberString , // "3229.44"  
	
	"side" :  string , // "SELL"  
	
	"symbol" :  string , // "ETHUSDT"  
	
	"subId" :  number , // 1  
	
	"timeInForce" :  string , // "IMMEDIATE_OR_CANCEL"  
	
	"origQty" :  NumberString , // "1.000" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

TimeWeightedAveragePrice = {
	name: "Time-Weighted Average Price (Twap)"
	nameType: "Twap"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/algo/spot/newOrderTwap"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol : STRING // Trading symbol eg. BTCUSDT
		side : ENUM // Trading side ( BUY or SELL )
		quantity : DECIMAL // Quantity of base asset; The notional (quantity * last price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 100,000 USDT
		duration : LONG // Duration for TWAP orders in seconds. [300, 86400]
		clientAlgoId? : STRING // A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
		limitPrice? : DECIMAL // Limit price of the order; If it is not sent, will place order by market price by default
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"clientAlgoId" :  string , // "65ce1630101a480b85915d7e11fd5078"  
	
	"success" :  boolean , // true  
	
	"code" :  number , // 0  
	
	"msg" :  string , // "OK" 
	
	
	}
	
	
}

CancelAlgoOrder = {
	name: "Cancel Algo Order (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		url : "DELETE/sapi/v1/algo/spot/order"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		algoId : LONG // eg. 14511
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"algoId" :  number , // 14511  
	
	"success" :  boolean , // true  
	
	"code" :  number , // 0  
	
	"msg" :  string , // "OK" 
	
	
	}
	
	
}

QueryCurrentAlgoOpenOrders = {
	name: "Query Current Algo Open Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/algo/spot/openOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 1  
	
	"orders" : [
	
	 {
	
	"algoId" :  number , // 14517  
	
	"symbol" :  string , // "ETHUSDT"  
	
	"side" :  string , // "SELL"  
	
	"totalQty" :  NumberString , // "5.000"  
	
	"executedQty" :  NumberString , // "0.000"  
	
	"executedAmt" :  NumberString , // "0.00000000"  
	
	"avgPrice" :  NumberString , // "0.00"  
	
	"clientAlgoId" :  string , // "d7096549481642f8a0bb69e9e2e31f2e"  
	
	"bookTime" :  number , // 1649756817004  
	
	"endTime" :  number , // 0  
	
	"algoStatus" :  string , // "WORKING"  
	
	"algoType" :  string , // "TWAP"  
	
	"urgency" :  string , // "LOW" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

QueryHistoricalAlgoOrders = {
	name: "Query Historical Algo Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/algo/spot/historicalOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		symbol? : STRING // Trading symbol eg. BTCUSDT
		side? : ENUM // BUY or SELL
		startTime? : LONG // in milliseconds  eg.1641522717552
		endTime? : LONG // in milliseconds  eg.1641522526562
		page? : INT // Default is 1
		pageSize? : INT // MIN 1, MAX 100; Default 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 1  
	
	"orders" : [
	
	 {
	
	"algoId" :  number , // 14518  
	
	"symbol" :  string , // "BNBUSDT"  
	
	"side" :  string , // "BUY"  
	
	"totalQty" :  NumberString , // "100.00"  
	
	"executedQty" :  NumberString , // "0.00"  
	
	"executedAmt" :  NumberString , // "0.00000000"  
	
	"avgPrice" :  NumberString , // "0.000"  
	
	"clientAlgoId" :  string , // "acacab56b3c44bef9f6a8f8ebd2a8408"  
	
	"bookTime" :  number , // 1649757019503  
	
	"endTime" :  number , // 1649757088101  
	
	"algoStatus" :  string , // "CANCELLED"  
	
	"algoType" :  string , // "VP"  
	
	"urgency" :  string , // "LOW" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

QuerySubOrders = {
	name: "Query Sub Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/algo/spot/subOrders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		algoId : LONG
		page? : INT // Default is 1
		pageSize? : INT // MIN 1, MAX 100; Default 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 1  
	
	"executedQty" :  NumberString , // "1.000"  
	
	"executedAmt" :  NumberString , // "3229.44000000"  
	
	"subOrders" : [
	
	 {
	
	"algoId" :  number , // 13723  
	
	"orderId" :  number , // 8389765519993908929  
	
	"orderStatus" :  string , // "FILLED"  
	
	"executedQty" :  NumberString , // "1.000"  
	
	"executedAmt" :  NumberString , // "3229.44000000"  
	
	"feeAmt" :  NumberString , // "-1.61471999"  
	
	"feeAsset" :  string , // "USDT"  
	
	"bookTime" :  number , // 1649319001964  
	
	"avgPrice" :  NumberString , // "3229.44"  
	
	"side" :  string , // "SELL"  
	
	"symbol" :  string , // "ETHUSDT"  
	
	"subId" :  number , // 1  
	
	"timeInForce" :  string , // "IMMEDIATE_OR_CANCEL"  
	
	"origQty" :  NumberString , // "1.000" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

GetClassicPortfolioMarginAccountInfo = {
	name: "Get Classic Portfolio Margin Account Info (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/portfolio/account"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"uniMMR" :  NumberString , // "5167.92171923"  // Classic Portfolio margin account maintenance margin rate
	 
	
	"accountEquity" :  NumberString , // "122607.35137903"  // Account equity, unit：USD
	 
	
	"actualEquity" :  NumberString , // "142607.35137903"  // Actual equity, unit：USD
	 
	
	"accountMaintMargin" :  NumberString , // "23.72469206"  // Classic Portfolio margin account maintenance margin, unit：USD
	 
	
	"accountStatus" :  string , // "NORMAL" // Classic Portfolio margin account status:"NORMAL", "MARGIN_CALL", "SUPPLY_MARGIN", "REDUCE_ONLY", "ACTIVE_LIQUIDATION", "FORCE_LIQUIDATION", "BANKRUPTED" 
	
	
	}
	
	
}

ClassicPortfolioMarginCollateralRate = {
	name: "Classic Portfolio Margin Collateral Rate (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 50
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/portfolio/collateralRate"
	}
	req = [
	
	 {
	
	"asset" :  string , // "USDC"  
	
	"collateralRate" :  NumberString , // "1.0000" 
	
	
	},
	
	{
	
	"asset" :  string , // "BUSD"  
	
	"collateralRate" :  NumberString , // "1.0000" 
	
	
	},
	
	
	]
	
	
}

QueryClassicPortfolioMarginBankruptcyLoanAmount = {
	name: "Query Classic Portfolio Margin Bankruptcy Loan Amount (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 500
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/portfolio/pmLoan"
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"asset" :  string , // "BUSD"  
	
	"amount" :  NumberString , // "579.45"  // portfolio margin bankruptcy loan amount in BUSD
	 
	
	
	}
	
	
}

ClassicPortfolioMarginBankruptcyLoanRepay = {
	name: "Classic Portfolio Margin Bankruptcy Loan Repay"
	nameType: ""
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/portfolio/repay"
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"tranId" :  number , // 58203331886213504 
	
	
	}
	
	
}

QueryClassicPortfolioMarginInterestHistory = {
	name: "Query Classic Portfolio Margin Interest History(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 50
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/portfolio/interest-history"
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		startTime? : LONG
		endTime? : LONG
		size? : LONG // Default:10 Max:100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "USDT"  
	
	"interest" :  NumberString , // "24.4440"  //interest amount
	 
	
	"interestAccruedTime" :  number , // 1670227200000  
	
	"interestRate" :  NumberString , // "0.0001164"  //daily interest rate
	 
	
	"principal" :  NumberString , // "210000"  
	
	"type" :  string , // "um_negative_balance" 
	
	
	}
	
	
	]
	
	
}

QueryClassicPortfolioMarginInterestRate = {
	name: "Query Classic Portfolio Margin Interest Rate (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 50
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/portfolio/interest-rate"
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "USDT"  
	
	"dailyInterest" :  NumberString , // "0.00012329"  //daily interest rate
	 
	
	"yearlyInterest" :  NumberString , // "0.045" //annual interest rate 
	
	
	}
	
	
	]
	
	
}

QueryPortfolioMarginAssetIndexPrice = {
	name: "Query Portfolio Margin Asset Index Price (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/portfolio/asset-index-price"
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
	}
	req = [
	
	 {
	
	"asset" :  string , // "BTC"  
	
	"assetIndexPrice" :  NumberString , // "28251.9136906"  // in USD
	 
	
	"time" :  number , // 1683518338121 
	
	
	}
	
	
	]
	
	
}

GetBLVTInfo = {
	name: "Get BLVT Info (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		tokenName? : STRING // BTCDOWN, BTCUP
	}
	req = [
	
	 {
	
	"tokenName" :  string , // "BTCDOWN"  
	
	"description" :  string , // "3X Short Bitcoin Token"  
	
	"underlying" :  string , // "BTC"  
	
	"tokenIssued" :  NumberString , // "717953.95"  
	
	"basket" :  string , // "-821.474 BTCUSDT Futures"  
	
	"currentBaskets" :[
	
	 {
	
	"symbol" :  string , // "BTCUSDT"  
	
	"amount" :  NumberString , // "-1183.984"  
	
	"notionalValue" :  NumberString , // "-22871089.96704" 
	
	
	}
	
	
	],
	
	"nav" :  NumberString , // "4.79"  
	
	"realLeverage" :  NumberString , // "-2.316"  
	
	"fundingRate" :  NumberString , // "0.001020"  
	
	"dailyManagementFee" :  NumberString , // "0.0001"  
	
	"purchaseFeePct" :  NumberString , // "0.0010"  
	
	"dailyPurchaseLimit" :  NumberString , // "100000.00"  
	
	"redeemFeePct" :  NumberString , // "0.0010"  
	
	"dailyRedeemLimit" :  NumberString , // "1000000.00"  
	
	"timestamp" :  number , // 1583127900000 
	
	
	},
	
	{
	
	"tokenName" :  string , // "LINKUP"  
	
	"description" :  string , // "3X LONG ChainLink Token"  
	
	"underlying" :  string , // "LINK"  
	
	"tokenIssued" :  NumberString , // "163846.99"  
	
	"basket" :  string , // "417288.870 LINKUSDT Futures"  
	
	"currentBaskets" :[
	
	 {
	
	"symbol" :  string , // "LINKUSDT"  
	
	"amount" :  NumberString , // "1640883.83"  
	
	"notionalValue" :  NumberString , // "22596611.22293" 
	
	
	}
	
	
	],
	
	"nav" :  NumberString , // "9.60"  
	
	"realLeverage" :  NumberString , // "2.597"  
	
	"fundingRate" :  NumberString , // "-0.000917"  
	
	"dailyManagementFee" :  NumberString , // "0.0001"  
	
	"purchaseFeePct" :  NumberString , // "0.0010"  
	
	"dailyPurchaseLimit" :  NumberString , // "100000.00"  
	
	"redeemFeePct" :  NumberString , // "0.0010"  
	
	"dailyRedeemLimit" :  NumberString , // "1000000.00"  
	
	"timestamp" :  number , // 1583127900000 
	
	
	}
	
	
	]
	
	
}

HistoricalBLVTNAVKlineCandlestick = {
	name: "Historical BLVT NAV Kline/Candlestick"
	nameType: ""
	wight: []
	req = {}
}

SubscribeBLVT = {
	name: "Subscribe BLVT (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		tokenName : STRING // BTCDOWN, BTCUP
		cost : DECIMAL // spot balance
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"id" :  number , // 123  
	
	"status" :  string , // "S"  // S, P, and F for "success", "pending", and "failure"
	 
	
	"tokenName" :  string , // "LINKUP"  
	
	"amount" :  NumberString , // "0.95590905"  // subscribed token amount
	 
	
	"cost" :  NumberString , // "9.99999995"  // subscription cost in usdt
	 
	
	"timestamp" :  number , // 1600249972899 
	
	
	}
	
	
}

QuerySubscriptionRecord = {
	name: "Query Subscription Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		tokenName? : STRING // BTCDOWN, BTCUP
		id? : LONG
		startTime? : LONG
		endTime? : LONG
		limit? : INT // default 1000, max 1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"id" :  number , // 1  
	
	"tokenName" :  string , // "LINKUP"  
	
	"amount" :  NumberString , // "0.54216292"  // Subscription amount
	 
	
	"nav" :  NumberString , // "18.42621386"  // NAV price of subscription 
	 
	
	"fee" :  NumberString , // "0.00999000"  // Subscription fee in usdt
	 
	
	"totalCharge" :  NumberString , // "9.99999991"  // Subscription cost in usdt
	 
	
	"timestamp" :  number , // 1599127217916 
	
	
	}
	
	
	]
	
	
}

RedeemBLVT = {
	name: "Redeem BLVT (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		tokenName : STRING // BTCDOWN, BTCUP
		amount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"id" :  number , // 123  
	
	"status" :  string , // "S"  // S, P, and F for "success", "pending", and "failure"
	 
	
	"tokenName" :  string , // "LINKUP"  
	
	"redeemAmount" :  NumberString , // "0.95590905"  // Redemption token amount
	 
	
	"amount" :  NumberString , // "10.05022099"  // Redemption value in usdt
	 
	
	"timestamp" :  number , // 1600250279614 
	
	
	}
	
	
}

QueryRedemptionRecord = {
	name: "Query Redemption Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		tokenName? : STRING // BTCDOWN, BTCUP
		id? : LONG
		startTime? : LONG
		endTime? : LONG
		limit? : INT // default 1000, max 1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"id" :  number , // 1  
	
	"tokenName" :  string , // "LINKUP"  
	
	"amount" :  NumberString , // "0.54216292"  // Redemption amount
	 
	
	"nav" :  NumberString , // "18.36345064"  // NAV of redemption
	 
	
	"fee" :  NumberString , // "0.00995598"  // Reemption fee
	 
	
	"netProceed" :  NumberString , // "9.94602604"  // Net redemption value in usdt
	 
	
	"timestamp" :  number , // 1599128003050 
	
	
	}
	
	
	]
	
	
}

GetBLVTUserLimitInfo = {
	name: "Get BLVT User Limit Info (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	// Name Type Mandatory Description
	params : {
		tokenName? : STRING // BTCDOWN, BTCUP
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"tokenName" :  string , // "LINKUP"  
	
	"userDailyTotalPurchaseLimit" :  NumberString , // "1000"  // USDT
	 
	
	"userDailyTotalRedeemLimit" :  NumberString , // "1000" // USDT 
	
	
	},
	
	{
	
	"tokenName" :  string , // "LINKDOWN"  
	
	"userDailyTotalPurchaseLimit" :  NumberString , // "1000"  // USDT
	 
	
	"userDailyTotalRedeemLimit" :  NumberString , // "50000" // USDT 
	
	
	}
	
	
	]
	
	
}

WebsocketBLVTInfoStreams = {
	name: "Websocket BLVT Info Streams"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "nav"  // Event type
	 
	
	"E" :  number , // 1600245286355  // Event time
	 
	
	"s" :  string , // "TRXDOWN"  // BLVT name
	 
	
	"m" :  number , // 74164.75496502663  // Token issued
	 
	
	"b" :[ // Baskets
	
	
	
	 {
	
	"s" :  string , // "TRXUSDT"  // futures symbol
	 
	
	"n" :  number , // 87988261 // position 
	
	
	}
	
	
	],
	
	"n" :  number , // 14.78454447  // BLVT NAV
	 
	
	"l" :  number , // 2.1786579638117898  // Real leverage
	 
	
	"t" :  number , // 3  // Target leverage
	 
	
	"f" :  number , // 0.0048925 // Funding ratio 
	
	
	}
	
	
}

WebsocketBLVTNAVKlineCandlestickStreams = {
	name: "Websocket BLVT NAV Kline/Candlestick Streams"
	nameType: ""
	wight: []
	req = {
	
	"e" :  string , // "kline"  // Event name
	 
	
	"E" :  number , // 1600243159447  // Event time
	 
	
	"s" :  string , // "TRXDOWN"  // BLVT name
	 
	
	"k" :{
	
	"t" :  number , // 1600243140000  // Kline start time
	 
	
	"T" :  number , // 1600243199999  // Kline close time
	 
	
	"s" :  string , // "TRXDOWN"  // BLVT name
	 
	
	"i" :  string , // "1m"  // Interval
	 
	
	"f" :  number , // 1600243140484  // First NAV update time
	 
	
	"L" :  number , // 1600243159424  // Last NAV update time
	 
	
	"o" :  NumberString , // "14.56800297"  // Open NAV price
	 
	
	"c" :  NumberString , // "14.59766270"  // CLose NAV price
	 
	
	"h" :  NumberString , // "14.63325437"  // Highest NAV price
	 
	
	"l" :  NumberString , // "14.56207102"  // Lowest NAV price
	 
	
	"v" :  NumberString , // "2.22524220"  // Real leverage
	 
	
	"n" :  number , // 33  // Number of NAV update
	 
	
	"x" :  boolean , // false  // Ignore
	 
	
	"q" :  NumberString , // "0"  // Ignore
	 
	
	"V" :  NumberString , // "73.42663923"  // Ignore
	 
	
	"Q" :  NumberString , // "0"  // Ignore
	 
	
	"B" :  NumberString , // "0" // Ignore 
	
	
	}
	
	
	}
	
	
}

ListAllSwapPools = {
	name: "List All Swap Pools (MARKET_DATA)"
	nameType: "MARKET_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/pools"
		HMAC : true
	}
	req = [
	
	 {
	
	"poolId" :  number , // 2  
	
	"poolName" :  string , // "BUSD/USDT"  
	
	"assets" : [
	
	  string , // "BUSD" 
	 
	
	  string , // "USDT"
	
	 
	]
	
	
	},
	
	{
	
	"poolId" :  number , // 3  
	
	"poolName" :  string , // "BUSD/DAI"  
	
	"assets" : [
	
	  string , // "BUSD" 
	 
	
	  string , // "DAI"
	
	 
	]
	
	
	},
	
	{
	
	"poolId" :  number , // 4  
	
	"poolName" :  string , // "USDT/DAI"  
	
	"assets" : [
	
	  string , // "USDT" 
	 
	
	  string , // "DAI"
	
	 
	]
	
	
	}
	
	
	]
	
	
}

Getliquidityinformationofapool = {
	name: "Get liquidity information of a pool (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/liquidity"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		poolId? : LONG
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"poolId" :  number , // 2  
	
	"poolNmae" :  string , // "BUSD/USDT"  
	
	"updateTime" :  number , // 1565769342148  
	
	"liquidity" : {
	
	"BUSD" :  number , // 100000315.79  
	
	"USDT" :  number , // 99999245.54 
	
	
	},
	
	"share" : {
	
	"shareAmount" :  number , // 12415  
	
	"sharePercentage" :  number , // 0.00006207  
	
	"asset" : {
	
	"BUSD" :  number , // 6207.02  
	
	"USDT" :  number , // 6206.95 
	
	
	}
	
	
	}
	
	
	}
	
	
	]
	
	
}

AddLiquidity = {
	name: "Add Liquidity (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/bswap/liquidityAdd"
		HMAC : true
	}
	req = {
	
	"operationId" :  number , // 12341 
	
	
	}
	
	
}

RemoveLiquidity = {
	name: "Remove Liquidity (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/bswap/liquidityRemove"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		poolId : LONG
		type : STRING
		asset? : LIST // Mandatory for single asset removal
		shareAmount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"operationId" :  number , // 12341 
	
	
	}
	
	
}

GetLiquidityOperationRecord = {
	name: "Get Liquidity Operation Record (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/liquidityOps"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		operationId? : LONG
		poolId? : LONG
		operation? : ENUM
		startTime? : LONG
		endTime? : LONG
		limit? : LONG // default 3, max 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"operationId" :  number , // 12341  
	
	"poolId" :  number , // 2  
	
	"poolName" :  string , // "BUSD/USDT"  
	
	"operation" :  string , // "ADD"  // "ADD" or "REMOVE"
	 
	
	"status" :  number , // 1  // 0: pending, 1: success, 2: failed 
	 
	
	"updateTime" :  number , // 1565769342148  
	
	"shareAmount" :  NumberString , // "10.1" 
	
	
	}
	
	
	]
	
	
}

RequestQuote = {
	name: "Request Quote (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 150
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/quote"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		quoteAsset : STRING
		baseAsset : STRING
		quoteQty : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"quoteAsset" :  string , // "USDT"  
	
	"baseAsset" :  string , // "BUSD"  
	
	"quoteQty" :  number , // 300000  
	
	"baseQty" :  number , // 299975  
	
	"price" :  number , // 1.00008334  
	
	"slippage" :  number , // 0.00007245  
	
	"fee" :  number , // 120 
	
	
	}
	
	
}

Swap = {
	name: "Swap (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/bswap/swap"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		quoteAsset : STRING
		baseAsset : STRING
		quoteQty : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"swapId" :  number , // 2314 
	
	
	}
	
	
}

GetSwapHistory = {
	name: "Get Swap History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/swap"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		swapId? : LONG
		startTime? : LONG
		endTime? : LONG
		status? : INT // 0: pending for swap, 1: success, 2: failed
		quoteAsset? : STRING
		baseAsset? : STRING
		limit? : LONG // default 3, max 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"swapId" :  number , // 2314  
	
	"swapTime" :  number , // 1565770342148  
	
	"status" :  number , // 0  // 0: pending, 1: success, 2: failed 
	 
	
	"quoteAsset" :  string , // "USDT"  
	
	"baseAsset" :  string , // "BUSD"  
	
	"quoteQty" :  number , // 300000  
	
	"baseQty" :  number , // 299975  
	
	"price" :  number , // 1.00008334  
	
	"fee" :  number , // 120 
	
	
	}
	
	
	]
	
	
}

GetPoolConfigure = {
	name: "Get Pool Configure (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 150
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/poolConfigure"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		poolId? : LONG
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"poolId" :  number , // 2  
	
	"poolNmae" :  string , // "BUSD/USDT"  
	
	"updateTime" :  number , // 1565769342148  
	
	"liquidity" : {
	
	"constantA" :  number , // 2000  //"NA" if pool is an innovation pool
	 
	
	"minRedeemShare" :  number , // 0.1  
	
	"slippageTolerance" :  number , // 0.2 //The swap proceeds only when the slippage is within the set range 
	
	
	},
	
	"assetConfigure" :{
	
	"BUSD" : {
	
	"minAdd" :  number , // 10  
	
	"maxAdd" :  number , // 20  
	
	"minSwap" :  number , // 10  
	
	"maxSwap" :  number , // 30 
	
	
	},
	
	"USDT" : {
	
	"minAdd" :  number , // 10  
	
	"maxAdd" :  number , // 20  
	
	"minSwap" :  number , // 10  
	
	"maxSwap" :  number , // 30 
	
	
	}
	
	
	}
	
	
	}
	
	
	]
	
	
}

AddLiquidityPreview = {
	name: "Add Liquidity Preview (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 150
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/addLiquidityPreview"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		poolId : LONG
		type : STRING // &quot;SINGLE&quot; for adding a single token;&quot;COMBINATION&quot; for adding dual tokens
		quoteAsset : STRING
		quoteQty : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"quoteAsset" :  string , // "USDT"  
	
	"baseAsset" :  string , // "BUSD"  //Display when type is "COMBINATION"
	 
	
	"quoteAmt" :  number , // 300000  
	
	"baseAmt" :  number , // 299975  // Display when type is "COMBINATION" 
	 
	
	"price" :  number , // 1.00008334  
	
	"share" :  number , // 1.23  
	
	"slippage" :  number , // 0.00007245  //Display when type is "SINGLE" 
	 
	
	"fee" :  number , // 120  //Display when type is "SINGLE" 
	 
	
	
	}
	
	
}

RemoveLiquidityPreview = {
	name: "Remove Liquidity Preview (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 150
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/removeLiquidityPreview"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		poolId : LONG
		type : STRING // Type is &quot;SINGLE&quot;, remove and obtain a single token;Type is &quot;COMBINATION&quot;, remove and obtain dual token.
		quoteAsset : STRING
		shareAmount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"quoteAsset" :  string , // "USDT"  
	
	"baseAsset" :  string , // "BUSD"  //Display when type is "COMBINATION" 
	 
	
	"quoteAmt" :  number , // 300000  
	
	"baseAmt" :  number , // 299975  //Display when type is "COMBINATION" 
	 
	
	"price" :  number , // 1.00008334  
	
	"slippage" :  number , // 0.00007245  //Display when type is "SINGLE" 
	 
	
	"fee" :  number , // 120 //Display when type is "SINGLE"  
	
	
	}
	
	
}

GetUnclaimedRewardsRecord = {
	name: "Get Unclaimed Rewards Record  (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 1000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/unclaimedRewards"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		type? : INT // 0: Swap rewards,1:Liquidity rewards, default to 0
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"totalUnclaimedRewards" : {
	
	"BUSD" :  number , // 100000315.79  
	
	"BNB" :  number , // 0.00000001  
	
	"USDT" :  number , // 0.00000002 
	
	
	},
	
	"details" :{
	
	"BNB/USDT" :{
	
	"BUSD" :  number , // 100000315.79  
	
	"USDT" :  number , // 0.00000002 
	
	
	},
	
	"BNB/BTC" :{
	
	"BNB" :  number , // 0.00000001 
	
	
	}
	
	
	}
	
	
	}
	
	
}

ClaimRewards = {
	name: "Claim Rewards (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 1000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/bswap/claimRewards"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		type? : INT // 0: Swap rewards,1:Liquidity rewards, default to 0
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

GetClaimedHistory = {
	name: "Get Claimed History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 1000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/bswap/claimedHistory"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		poolId? : LONG
		assetRewards? : STRING
		type? : INT // 0: Swap rewards,1:Liquidity rewards, default to 0
		startTime? : LONG
		endTime? : LONG
		limit? : LONG // Default 3, max 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"poolId" :  number , // 52  
	
	"poolName" :  string , // "BNB/USDT"  
	
	"assetRewards" :  string , // "BNB"  
	
	"claimTime" :  number , // 1565769342148  
	
	"claimAmount" :  number , // 0.00000023  
	
	"status" :  number , // 1 // 0: pending, 1: success 
	
	
	}
	
	
	]
	
	
}

GetFiatDepositWithdrawHistory = {
	name: "Get Fiat Deposit/Withdraw History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 90000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/fiat/orders"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		transactionType : STRING // 0-deposit,1-withdraw
		beginTime? : LONG
		endTime? : LONG
		page? : INT // default 1
		rows? : INT // default 100, max 500
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : [
	
	 {
	
	"orderNo" :  string , // "7d76d611-0568-4f43-afb6-24cac7767365"  
	
	"fiatCurrency" :  string , // "BRL"  
	
	"indicatedAmount" :  NumberString , // "10.00"  
	
	"amount" :  NumberString , // "10.00"  
	
	"totalFee" :  NumberString , // "0.00"  // Trade fee
	 
	
	"method" :  string , // "BankAccount"  // Trade method
	 
	
	"status" :  string , // "Expired"  // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
	 
	
	"createTime" :  number , // 1626144956000  
	
	"updateTime" :  number , // 1626400907000 
	
	
	}
	
	
	],
	
	"total" :  number , // 1  
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

GetFiatPaymentsHistory = {
	name: "Get Fiat Payments History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/fiat/payments"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		transactionType : STRING // 0-buy,1-sell
		beginTime? : LONG
		endTime? : LONG
		page? : INT // default 1
		rows? : INT // default 100, max 500
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : [
	
	 {
	
	"orderNo" :  string , // "353fca443f06466db0c4dc89f94f027a"  
	
	"sourceAmount" :  NumberString , // "20.0"  // Fiat trade amount
	 
	
	"fiatCurrency" :  string , // "EUR"  // Fiat token
	 
	
	"obtainAmount" :  NumberString , // "4.462"  // Crypto trade amount
	 
	
	"cryptoCurrency" :  string , // "LUNA"  // Crypto token
	 
	
	"totalFee" :  NumberString , // "0.2"  // Trade fee
	 
	
	"price" :  NumberString , // "4.437472"  
	
	"status" :  string , // "Failed"  // Processing, Completed, Failed, Refunded
	 
	
	"paymentMethod" :  string , // "Credit Card"  
	
	"createTime" :  number , // 1624529919000  
	
	"updateTime" :  number , // 1624529919000 
	
	
	}
	
	
	],
	
	"total" :  number , // 1  
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

GetC2CTradeHistory = {
	name: "Get C2C Trade History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/c2c/orderMatch/listUserOrderHistory"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		tradeType : STRING // BUY, SELL
		startTimestamp? : LONG
		endTimestamp? : LONG
		page? : INT // default 1
		rows? : INT // default 100, max 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : [
	
	 {
	
	"orderNumber" :  NumberString , // "20219644646554779648"  
	
	"advNo" :  NumberString , // "11218246497340923904"  
	
	"tradeType" :  string , // "SELL"  
	
	"asset" :  string , // "BUSD"  
	
	"fiat" :  string , // "CNY"  
	
	"fiatSymbol" :  string , // "￥"  
	
	"amount" :  NumberString , // "5000.00000000"  // Quantity (in Crypto)
	 
	
	"totalPrice" :  NumberString , // "33400.00000000"  
	
	"unitPrice" :  NumberString , // "6.68"  // Unit Price (in Fiat)
	 
	
	"orderStatus" :  string , // "COMPLETED"  // PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM
	 
	
	"createTime" :  number , // 1619361369000  
	
	"commission" :  NumberString , // "0"  // Transaction Fee (in Crypto)
	 
	
	"counterPartNickName" :  string , // "ab***"  
	
	"advertisementRole" :  string , // "TAKER" 
	
	
	}
	
	
	],
	
	"total" :  number , // 1  
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

GetVIPLoanOngoingOrders = {
	name: "Get VIP Loan Ongoing Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/vip/ongoing/orders"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG
		collateralAccountId? : LONG
		loanCoin? : STRING
		collateralCoin? : STRING
		current? : LONG // Currently querying page. Start from 1, Default:1, Max: 1000.
		limit? : LONG // Default: 10, Max: 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"orderId" :  number , // 100000001  
	
	"loanCoin" :  string , // "BUSD"  
	
	"totalDebt" :  NumberString , // "10000"  
	
	"residualInterest" :  NumberString , // "10.27687923"  
	
	"collateralAccountId" :  NumberString , // "12345678"  
	 "23456789"  
	
	"collateralCoin" :  string , // "BNB,BTC,ETH"  
	
	"totalCollateralValueAfterHaircut" :  NumberString , // "25000.27565492"  
	
	"lockedCollateralValue" :  NumberString , // "25000.27565492"  
	
	"currentLTV" :  NumberString , // "0.57"  
	
	"expirationTime" :  number , // 1575018510000 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

VIPLoanRepay = {
	name: "VIP Loan Repay (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 6000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/loan/vip/repay"
	}
	// Name Type Mandatory Description
	params : {
		orderId : LONG
		amount : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"loanCoin" :  string , // "BUSD"  
	
	"repayAmount" :  NumberString , // "200.5"  
	
	"remainingPrincipal" :  NumberString , // "100.5"  
	
	"remainingInterest" :  NumberString , // "0"  
	
	"collateralCoin" :  string , // "BNB,BTC,ETH"  
	
	"currentLTV" :  NumberString , // "0.25"  
	
	"repayStatus" :  string , // "Repaid" // Repaid, Repaying, Failed 
	
	
	}
	
	
}

GetVIPLoanRepaymentHistory = {
	name: "Get VIP Loan Repayment History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/vip/repay/history"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG
		loanCoin? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Currently querying page. Start from 1, Default:1, Max: 1000
		limit? : LONG // Default: 10, Max: 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"loanCoin" :  string , // "BUSD"  
	
	"repayAmount" :  NumberString , // "10000"  
	
	"collateralCoin" :  string , // "BNB,BTC,ETH"  
	
	"repayStatus" :  string , // "Repaid"  // Repaid, Repaying, Failed
	 
	
	"repayTime" :  NumberString , // "1575018510000"  
	
	"orderId" :  NumberString , // "756783308056935434" 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

CheckLockedValueofVIPCollateralAccount = {
	name: "Check Locked Value of VIP Collateral Account (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 6000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/vip/collateral/account"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG
		collateralAccountId? : LONG
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"collateralAccountId" :  NumberString , // "12345678"  
	
	"collateralCoin" :  string , // "BNB,BTC,ETH"  
	
	"collateralValue" :  NumberString , // "500.27565492" // locked collateral value shown in USD value 
	
	
	}
	
	
	],
	
	[
	
	 {
	
	"collateralAccountId" :  NumberString , // "23456789"  
	
	"collateralCoin" :  string , // "BNB,BTC,ETH"  
	
	"collateralValue" :  NumberString , // "25000.238752" // locked collateral value shown in USD value 
	
	
	}
	
	
	],
	
	"total" :  number , // 2 
	
	
	}
	
	
}

GetCryptoLoansIncomeHistory = {
	name: "Get Crypto Loans Income History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 6000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/income"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		asset? : STRING
		type? : STRING // All types will be returned by default. Enum：
		startTime? : LONG
		endTime? : LONG
		limit? : INT // default 20, max 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "BUSD"  
	
	"type" :  string , // "borrowIn"  
	
	"amount" :  NumberString , // "100"  
	
	"timestamp" :  number , // 1633771139847  
	
	"tranId" :  NumberString , // "80423589583" 
	
	
	},
	
	{
	
	"asset" :  string , // "BUSD"  
	
	"type" :  string , // "borrowIn"  
	
	"amount" :  NumberString , // "100"  
	
	"timestamp" :  number , // 1634638371496  
	
	"tranId" :  NumberString , // "81685123491" 
	
	
	}
	
	
	]
	
	
}

BorrowCryptoLoanBorrow = {
	name: "Borrow - Crypto Loan Borrow (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 6000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/loan/borrow"
	}
	// Name Type Mandatory Description
	params : {
		loanCoin : STRING
		loanAmount? : DECIMAL // Mandatory when collateralAmount is empty
		collateralCoin : STRING
		collateralAmount? : DECIMAL // Mandatory when loanAmount is empty
		loanTerm : INT // 7/30 days
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"loanCoin" :  string , // "BUSD"  
	
	"loanAmount" :  NumberString , // "100.5"  
	
	"collateralCoin" :  string , // "BNB"  
	
	"collateralAmount" :  NumberString , // "50.5"  
	
	"hourlyInterestRate" :  NumberString , // "0.001234"  
	
	"orderId" :  NumberString , // "100000001" 
	
	
	}
	
	
}

BorrowGetLoanBorrowHistory = {
	name: "Borrow - Get Loan Borrow History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/borrow/history"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG // orderId in 
		loanCoin? : STRING
		collateralCoin? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Current querying page. Start from 1; default: 1; max: 1000.
		limit? : LONG // Default: 10; max: 100.
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"orderId" :  number , // 100000001  
	
	"loanCoin" :  string , // "BUSD"  
	
	"initialLoanAmount" :  NumberString , // "10000"  
	
	"hourlyInterestRate" :  NumberString , // "0.000057" 
	
	"loanTerm" :  NumberString , // "7" 
	
	"collateralCoin" :  string , // "BNB"  
	
	"initialCollateralAmount" :  NumberString , // "49.27565492" 
	
	"borrowTime" :  number , // 1575018510000 
	
	"status" :  string , // "Repaid" // Accruing_Interest, Overdue, Liquidating, Repaying, Repaid, Liquidated, Pending, Failed 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

BorrowGetLoanOngoingOrders = {
	name: "Borrow - Get Loan Ongoing Orders (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 300
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/ongoing/orders"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG // orderId in 
		loanCoin? : STRING
		collateralCoin? : STRING
		current? : LONG // Current querying page. Start from 1; default: 1; max: 1000
		limit? : LONG // Default: 10; max: 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"orderId" :  number , // 100000001  
	
	"loanCoin" :  string , // "BUSD"  
	
	"totalDebt" :  NumberString , // "10000"  
	
	"residualInterest" :  NumberString , // "10.27687923" 
	
	"collateralCoin" :  string , // "BNB"  
	
	"collateralAmount" :  NumberString , // "49.27565492" 
	
	"currentLTV" :  NumberString , // "0.57" 
	
	"expirationTime" :  number , // 1575018510000 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

RepayCryptoLoanRepay = {
	name: "Repay - Crypto Loan Repay (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 6000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/loan/repay"
	}
	// Name Type Mandatory Description
	params : {
		orderId : LONG
		amount : DECIMAL
		type? : INT // Default: 1. 1 for &quot;repay with borrowed coin&quot;; 2 for &quot;repay with collateral&quot;.
		collateralReturn? : BOOLEAN // Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"loanCoin" :  string , // "BUSD" 
	
	"remainingPrincipal" :  NumberString , // "100.5" 
	
	"remainingInterest" :  NumberString , // "0" 
	
	"collateralCoin" :  string , // "BNB" 
	
	"remainingCollateral" :  NumberString , // "5.253" 
	
	"currentLTV" :  NumberString , // "0.25" 
	
	"repayStatus" :  string , // "Repaid" // Repaid, Repaying 
	
	
	}
	
	{
	
	"loanCoin" :  string , // "BUSD" 
	
	"collateralCoin" :  string , // "BNB" 
	
	"repayStatus" :  string , // "Repaying" // Repaid, Repaying 
	
	
	}
	
	
}

RepayGetLoanRepaymentHistory = {
	name: "Repay - Get Loan Repayment History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/repay/history"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG
		loanCoin? : STRING
		collateralCoin? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Current querying page. Start from 1; default: 1; max: 1000
		limit? : LONG // Default: 10; max: 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"loanCoin" :  string , // "BUSD"  
	
	"repayAmount" :  NumberString , // "10000"  
	
	"collateralCoin" :  string , // "BNB"  
	
	"collateralUsed" :  NumberString , // "0" 
	
	"collateralReturn" :  NumberString , // "49.27565492" 
	
	"repayType" :  NumberString , // "1" // 1 for "repay with borrowed coin", 2 for "repay with collateral" 
	
	"repayStatus" :  string , // "Repaid" // Repaid, Repaying, Failed 
	
	"repayTime" :  number , // 1575018510000 
	
	"orderId" :  number , // 756783308056935434 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

AdjustLTVCryptoLoanAdjustLTV = {
	name: "Adjust LTV - Crypto Loan Adjust LTV (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 6000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/loan/adjust/ltv"
	}
	// Name Type Mandatory Description
	params : {
		orderId : LONG
		amount : DECIMAL
		direction : ENUM // &quot;ADDITIONAL&quot;, &quot;REDUCED&quot;
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"loanCoin" :  string , // "BUSD"  
	
	"collateralCoin" :  string , // "BNB"  
	
	"direction" :  string , // "ADDITIONAL"  
	
	"amount" :  NumberString , // "5.235"  
	
	"currentLTV" :  NumberString , // "0.52" 
	
	
	}
	
	
}

AdjustLTVGetLoanLTVAdjustmentHistory = {
	name: "Adjust LTV - Get Loan LTV Adjustment History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/ltv/adjustment/history"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG
		loanCoin? : STRING
		collateralCoin? : STRING
		startTime? : LONG
		endTime? : LONG
		current? : LONG // Current querying page. Start from 1; default: 1; max: 1000
		limit? : LONG // Default: 10; max: 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"loanCoin" :  string , // "BUSD"  
	
	"collateralCoin" :  string , // "BNB"  
	
	"direction" :  string , // "ADDITIONAL"  
	
	"amount" :  NumberString , // "5.235"  
	
	"preLTV" :  NumberString , // "0.78"  
	
	"afterLTV" :  NumberString , // "0.56"  
	
	"adjustTime" :  number , // 1575018510000  
	
	"orderId" :  number , // 756783308056935434 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

GetLoanableAssetsData = {
	name: "Get Loanable Assets Data (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/loanable/data"
	}
	// Name Type Mandatory Description
	params : {
		loanCoin? : STRING
		vipLevel? : INT // Default: user&#39;s vip level. Send &quot;-1&quot; to check specified configuration
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"loanCoin" :  string , // "BUSD"  
	
	"_7dHourlyInterestRate" :  NumberString , // "0.00000491"  
	
	"_7dDailyInterestRate" :  NumberString , // "0.000118"  
	
	"_14dHourlyInterestRate" :  NumberString , // "0.00000491"  
	
	"_14dDailyInterestRate" :  NumberString , // "0.000118"  
	
	"_30dHourlyInterestRate" :  NumberString , // "0.00000567"  
	
	"_30dDailyInterestRate" :  NumberString , // "0.000136"  
	
	"_90dHourlyInterestRate" :  NumberString , // "0.00000596"  
	
	"_90dDailyInterestRate" :  NumberString , // "0.000143"  
	
	"_180dHourlyInterestRate" :  NumberString , // "0.00000631"  
	
	"_180dDailyInterestRate" :  NumberString , // "0.000151"  
	
	"minLimit" :  NumberString , // "100" 
	
	"maxLimit" :  NumberString , // "1000000" 
	
	"vipLevel" :  number , // 1 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

GetCollateralAssetsData = {
	name: "Get Collateral Assets Data (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 400
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/collateral/data"
	}
	// Name Type Mandatory Description
	params : {
		collateralCoin? : STRING
		vipLevel? : INT // Default: user&#39;s vip level. Send &quot;-1&quot; to check specified configuration
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"collateralCoin" :  string , // "BNB"  
	
	"initialLTV" :  NumberString , // "0.65"  
	
	"marginCallLTV" :  NumberString , // "0.75"  
	
	"liquidationLTV" :  NumberString , // "0.83"  
	
	"maxLimit" :  NumberString , // "1000000" 
	
	"vipLevel" :  number , // 1 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

CheckCollateralRepayRate = {
	name: "Check Collateral Repay Rate (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 6000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/loan/repay/collateral/rate"
	}
	// Name Type Mandatory Description
	params : {
		loanCoin : STRING
		collateralCoin : STRING
		repayAmount : DECIMAL // repay amount of loanCoin
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"loanlCoin" :  string , // "BUSD"  
	
	"collateralCoin" :  string , // "BNB"  
	
	"repayAmount" :  NumberString , // "1000"  
	
	"rate" :  NumberString , // "300.36781234" // rate of collateral coin/loan coin 
	
	
	}
	
	
}

CryptoLoanCustomizeMarginCall = {
	name: "Crypto Loan Customize Margin Call (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 6000
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/loan/customize/margin_call"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : LONG // Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
		collateralCoin? : STRING // Mandatory when orderID is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
		marginCall : DECIMAL
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"rows" : [
	
	 {
	
	"orderId" :  NumberString , // "100000001" 
	
	"collateralCoin" :  string , // "BNB" 
	
	"preMarginCall" :  NumberString , // "0.8" 
	
	"afterMarginCall" :  NumberString , // "0.7" 
	
	"customizeTime" :  number , // 1575018510000 
	
	
	}
	
	
	],
	
	"total" :  number , // 1 
	
	
	}
	
	
}

GetPayTradeHistory = {
	name: "Get Pay Trade History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/pay/transactions"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime? : LONG
		endTime? : LONG
		limit? : INT // default 100, max 100
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : [
	
	 {
	
	"orderType" :  string , // "C2C"  // Enum：PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment)
	 
	
	"transactionId" :  string , // "M_P_71505104267788288"  
	
	"transactionTime" :  number , // 1610090460133  //trade timestamp
	 
	
	"amount" :  NumberString , // "23.72469206"  //order amount(up to 8 decimal places), positive is income, negative is expenditure
	 
	
	"currency" :  string , // "BNB"  
	
	"walletType" :  number , // 1  // 1 for funding wallet and 2 for spot wallet 
	 
	
	"fundsDetail" : [ // details
	
	
	
	 {
	
		"currency" :  string , // "USDT"  //asset 
	 
	
		"amount" :  NumberString , // "1.2" 
	
		
		},
	
	{
	
		"currency" :  string , // "ETH"  
	
		"amount" :  NumberString , // "0.0001" 
	
		
		}
	
	
	]
	
	
	}
	
	
	],
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

ListAllConvertPairs = {
	name: "List All Convert Pairs"
	nameType: ""
	wight: [{
			name : "IP"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/convert/exchangeInfo"
	}
	// Name Type Mandatory Description
	params : {
		fromAsset : STRING // User spends coin
		toAsset : STRING // User receives coin
	}
	req = [
	
	 {
	
	"fromAsset" :  string , // "BTC"  
	
	"toAsset" :  string , // "USDT"  
	
	"fromAssetMinAmount" :  NumberString , // "0.0004"  
	
	"fromAssetMaxAmount" :  NumberString , // "50"  
	
	"toAssetMinAmount" :  NumberString , // "20"  
	
	"toAssetMaxAmount" :  NumberString , // "2500000" 
	
	
	}
	
	
	]
	
	
}

Queryorderquantityprecisionperasset = {
	name: "Query order quantity precision per asset (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 100
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/convert/assetInfo"
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG // The value cannot be greater than 60000
		timestamp : LONG
	}
	req = [
	
	 {
	
	"asset" :  string , // "BTC"  
	
	"fraction" :  number , // 8 
	
	
	},
	
	{
	
	"asset" :  string , // "SHIB"  
	
	"fraction" :  number , // 2 
	
	
	}
	
	
	]
	
	
}

Sendquoterequest = {
	name: "Send quote request (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 200
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/convert/getQuote"
	}
	// Name Type Mandatory Description
	params : {
		fromAsset : STRING
		toAsset : STRING
		fromAmount : DECIMAL // When specified, it is the amount you will be debited after the conversion
		toAmount : DECIMAL // When specified, it is the amount you will be credited after the conversion
		walletType? : ENUM // SPOT or FUNDING. Default is SPOT
		validTime? : ENUM // 10s, 30s, 1m, 2m, default 10s
		recvWindow? : LONG // The value cannot be greater than 60000
		timestamp : LONG
	}
	req = {
	
	"quoteId" :  NumberString , // "12415572564"  
	
	"ratio" :  NumberString , // "38163.7"  
	
	"inverseRatio" :  NumberString , // "0.0000262"  
	
	"validTimestamp" :  number , // 1623319461670  
	
	"toAmount" :  NumberString , // "3816.37"  
	
	"fromAmount" :  NumberString , // "0.1" 
	
	
	}
	
	
}

AcceptQuote = {
	name: "Accept Quote (TRADE)"
	nameType: "TRADE"
	wight: [{
			name : "UID"
			data : 500
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/convert/acceptQuote"
	}
	// Name Type Mandatory Description
	params : {
		quoteId : STRING
		recvWindow? : LONG // The value cannot be greater than 60000
		timestamp : LONG
	}
	req = {
	
	"orderId" :  NumberString , // "933256278426274426"  
	
	"createTime" :  number , // 1623381330472  
	
	"orderStatus" :  string , // "PROCESS" //PROCESS/ACCEPT_SUCCESS/SUCCESS/FAIL 
	
	
	}
	
	
}

Orderstatus = {
	name: "Order status (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 100
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/convert/orderStatus"
	}
	// Name Type Mandatory Description
	params : {
		orderId? : STRING // Either orderId or quoteId is required
		quoteId? : STRING // Either orderId or quoteId is required
	}
	req = {
	
	"orderId" :  number , // 933256278426274426  
	
	"orderStatus" :  string , // "SUCCESS"  
	
	"fromAsset" :  string , // "BTC"  
	
	"fromAmount" :  NumberString , // "0.00054414"  
	
	"toAsset" :  string , // "USDT"  
	
	"toAmount" :  NumberString , // "20"  
	
	"ratio" :  NumberString , // "36755"  
	
	"inverseRatio" :  NumberString , // "0.00002721"  
	
	"createTime" :  number , // 1623381330472 
	
	
	}
	
	
}

GetConvertTradeHistory = {
	name: "Get Convert Trade History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/convert/tradeFlow"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime : LONG
		endTime : LONG
		limit? : INT // Default 100, Max 1000
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"list" : [
	
	 {
	
	"quoteId" :  string , // "f3b91c525b2644c7bc1e1cd31b6e1aa6"  
	
	"orderId" :  number , // 940708407462087195  
	
	"orderStatus" :  string , // "SUCCESS"  // order status
	 
	
	"fromAsset" :  string , // "USDT"  // from asset
	 
	
	"fromAmount" :  NumberString , // "20"  // from amount
	 
	
	"toAsset" :  string , // "BNB"  // to asset
	 
	
	"toAmount" :  NumberString , // "0.06154036"  // to amount
	 
	
	"ratio" :  NumberString , // "0.00307702"  // price ratio
	 
	
	"inverseRatio" :  NumberString , // "324.99"  // inverse price 
	 
	
	"createTime" :  number , // 1624248872184 
	
	
	}
	
	
	],
	
	"startTime" :  number , // 1623824139000  
	
	"endTime" :  number , // 1626416139000  
	
	"limit" :  number , // 100  
	
	"moreData" :  boolean , // false 
	
	
	}
	
	
}

GetSpotRebateHistoryRecords = {
	name: "Get Spot Rebate History Records (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 12000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/rebate/taxQuery"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime? : LONG
		endTime? : LONG
		page? : INT // Default 1
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"status" :  string , // "OK"  
	
	"type" :  string , // "GENERAL"  
	
	"code" :  NumberString , // "000000000"  
	
	"data" : {
	
	"page" :  number , // 1  // current page
	 
	
	"totalRecords" :  number , // 2  // total records
	 
	
	"totalPageNum" :  number , // 1  // total pages
	 
	
	"data" : [
	
	 {
	
	"asset" :  string , // "USDT"  // rebate asset
	 
	
	"type" :  number , // 1  // rebate type：1 is commission rebate，2 is referral kickback
	 
	
	"amount" :  NumberString , // "0.0001126"  
	
	"updateTime" :  number , // 1637651320000 
	
	
	},
	
	{
	
	"asset" :  string , // "ETH"  
	
	"type" :  number , // 1  
	
	"amount" :  NumberString , // "0.00000056"  
	
	"updateTime" :  number , // 1637928379000 
	
	
	}
	
	
	]
	
	
	}
	
	
	}
	
	
}

GetNFTTransactionHistory = {
	name: "Get NFT Transaction History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/nft/history/transactions"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		orderType : INT // 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 50, Max 50
		page? : INT // Default 1
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 2  //total records
	 
	
	"list" : [
	
	 {
	
	"orderNo" :  string , // "1_470502070600699904"  // 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
	 
	
	"tokens" : [
	
	 {
	
		"network" :  string , // "BSC"  // NFT Network
	 
	
		"tokenId" :  NumberString , // "216000000496"  // NFT Token ID
	 
	
		"contractAddress" :  string , // "MYSTERY_BOX0000087" // NFT Contract Address 
	
		
		}
	
	
	],
	
	"tradeTime" :  number , // 1626941236000  
	
	"tradeAmount" :  NumberString , // "19.60000000"  
	
	"tradeCurrency" :  string , // "BNB" 
	
	
	},
	
	{
	
	"orderNo" :  string , // "1_488306442479116288"  
	
	"tokens" : [
	
	 {
	
		"network" :  string , // "BSC"  
	
		"tokenId" :  NumberString , // "132900000007"  
	
		"contractAddress" :  NumberString , // "0xAf12111a592e408DAbC740849fcd5e68629D9fb6" 
	
		
		}
	
	
	],
	
	"tradeTime" :  number , // 1631186130000  
	
	"tradeAmount" :  NumberString , // "192.00000000"  
	
	"tradeCurrency" :  string , // "BNB" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

GetNFTDepositHistory = {
	name: "Get NFT Deposit History(USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/nft/history/deposit"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 50, Max 50
		page? : INT // Default 1
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 2  
	
	"list" : [
	
	 {
	
	"network" :  string , // "ETH"  // NFT Network
	 
	
	"txID" :  number , // null  // Transaction ID
	 
	
	"contractAdrress" :  NumberString , // "0xe507c961ee127d4439977a61af39c34eafee0dc6"  // NFT Contract Address
	 
	
	"tokenId" :  NumberString , // "10014"  // NFT Token ID
	 
	
	"timestamp" :  number , // 1629986047000 
	
	
	},
	
	{
	
	"network" :  string , // "BSC"  
	
	"txID" :  number , // null  
	
	"contractAdrress" :  NumberString , // "0x058451b463bab04f52c0799d55c4094f507acfa9"  
	
	"tokenId" :  NumberString , // "10016"  
	
	"timestamp" :  number , // 1630083581000 
	
	
	}
	
	
	]
	
	
	}
	
	
}

GetNFTWithdrawHistory = {
	name: "Get NFT Withdraw History (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/nft/history/withdraw"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		startTime? : LONG
		endTime? : LONG
		limit? : INT // Default 50, Max 50
		page? : INT // Default 1
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 178  
	
	"list" : [
	
	 {
	
	"network" :  string , // "ETH"  
	
	"txID" :  NumberString , // "0x2be5eed31d787fdb4880bc631c8e76bdfb6150e137f5cf1732e0416ea206f57f"  
	
	"contractAdrress" :  NumberString , // "0xe507c961ee127d4439977a61af39c34eafee0dc6"  // NFT Contract Address
	 
	
	"tokenId" :  NumberString , // "1000001247"  // NFT Token ID
	 
	
	"timestamp" :  number , // 1633674433000  
	
	"fee" :  number , // 0.1  // Withdraw Fee
	 
	
	"feeAsset" :  string , // "ETH" // Asset 
	
	
	},
	
	{
	
	"network" :  string , // "ETH"  
	
	"txID" :  NumberString , // "0x3b3aea5c0a4faccd6f306641e6deb9713ab229ac233be3be227f580311e4362a"  
	
	"contractAdrress" :  NumberString , // "0xe507c961ee127d4439977a61af39c34eafee0dc6"  
	
	"tokenId" :  NumberString , // "40000030"  
	
	"timestamp" :  number , // 1633677022000  
	
	"fee" :  number , // 0.1  
	
	"feeAsset" :  string , // "ETH" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

GetNFTAsset = {
	name: "Get NFT Asset (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "UID"
			data : 3000
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/nft/user/getAsset"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		limit? : INT // Default 50, Max 50
		page? : INT // Default 1
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"total" :  number , // 347  
	
	"list" : [
	
	 {
	
	"network" :  string , // "BSC"  // NFT Network
	 
	
	"contractAddress" :  string , // "REGULAR11234567891779"  // NFT Contract Address
	 
	
	"tokenId" :  NumberString , // "100900000017" // NFT Token ID 
	
	
	},
	
	{
	
	"network" :  string , // "BSC"  
	
	"contractAddress" :  string , // "SSMDQ8W59"  
	
	"tokenId" :  NumberString , // "200500000011" 
	
	
	},
	
	{
	
	"network" :  string , // "BSC"  
	
	"contractAddress" :  string , // "SSMDQ8W59"  
	
	"tokenId" :  NumberString , // "200500000019" 
	
	
	}
	
	
	]
	
	
	}
	
	
}

Createasingletokengiftcard = {
	name: "Create a single-token gift card (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/giftcard/createCode"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		token : STRING // The token type contained in the Binance Gift Card
		amount : DOUBLE // The amount of the token contained in the Binance Gift Card
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : {
	
	"referenceNo" :  NumberString , // "0033002327977405"  // Gift Card Number
	 
	
	"code" :  string , // "AOGANK3NB4GIT3C6" // Redemption Code 
	
	
	},
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

Createadualtokengiftcard = {
	name: "Create a dual-token gift card (fixed value, discount feature)"
	nameType: "fixed value, discount feature"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/giftcard/buyCode"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		baseToken : STRING // The token you want to pay, example: BUSD
		faceToken : STRING // The token you want to buy, example: BNB. If faceToken = baseToken, it&#39;s the same as createCode endpoint.
		baseTokenAmount : DOUBLE // The base token asset quantity, example : 1.002
		discount? : DOUBLE // Stablecoin-denominated card discount percentage, Example: 1 for 1% discount. Scale should be less than 6.
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : {
	
	"referenceNo" :  NumberString , // "0033002327977405"  
	
	"code" :  string , // "AOGANK3NB4GIT3C6" 
	
	
	},
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

RedeemaBinanceGiftCard = {
	name: "Redeem a Binance Gift Card (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "POST"
		url : "/sapi/v1/giftcard/redeemCode"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		code : STRING // Redemption code of Binance Gift Card to be redeemed, supports both Plaintext &amp; Encrypted code.
		externalUid? : STRING // Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner&#39;s daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance Gift Cards on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).
		 : 
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" :{
	
	"referenceNo" :  NumberString , // "0033002328060227"  
	
	"identityNo" :  NumberString , // "10317392647411060736"  
	
	"token" :  string , // "BNB"  
	
	"amount" :  NumberString , // "0.00000001" 
	
	
	},
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

VerifyBinanceGiftCardbyGiftCardNumber = {
	name: "Verify Binance Gift Card by Gift Card Number (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/giftcard/verify"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		referenceNo : STRING // Enter the Gift Card Number
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : {
	
	"valid" :  boolean , // true  
	
	"token" :  string , // "BNB"  // coin
	 
	
	"amount" :  NumberString , // "0.00000001" // amount 
	
	
	},
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

FetchRSAPublicKey = {
	name: "Fetch RSA Public Key (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/giftcard/cryptography/rsa-public-key"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" :  string , // "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCXBBVKLAc1GQ5FsIFFqOHrPTox5noBONIKr+IAedTR9FkVxq6e65updEbfdhRNkMOeYIO2i0UylrjGC0X8YSoIszmrVHeV0l06Zh1oJuZos1+7N+WLuz9JvlPaawof3GUakTxYWWCa9+8KIbLKsoKMdfS96VT+8iOXO3quMGKUmQIDAQAB"  
	
	"success" :  boolean , // true 
	
	
	}
	
	
}

FetchTokenLimit = {
	name: "Fetch Token Limit (USER_DATA)"
	nameType: "USER_DATA"
	wight: [{
			name : "IP"
			data : 1
		}
	]
	address : {
		type : "GET"
		url : "/sapi/v1/giftcard/buyCode/token-limit"
		HMAC : true
	}
	// Name Type Mandatory Description
	params : {
		baseToken : STRING // The token you want to pay, example: BUSD
		recvWindow? : LONG
		timestamp : LONG
	}
	req = {
	
	"code" :  NumberString , // "000000"  
	
	"message" :  string , // "success"  
	
	"data" : [
	
	 {
	
	"coin" :  string , // "BNB"  
	
	"fromMin" :  NumberString , // "0.01"  
	
	"fromMax" :  NumberString , // "1" 
	
	
	}
	
	
	],
	
	"success" :  boolean , // true 
	
	
	}
	
	{
	
	"code" :  number , // 1121  
	
	"msg" :  string , // "Invalid symbol." 
	
	
	}
	
	
}

10xxGeneralServerorNetworkissues = {
	name: "10xx - General Server or Network issues"
	nameType: ""
	wight: []
	req = {}
}

11xx2xxxRequestissues = {
	name: "11xx - 2xxx Request issues"
	nameType: ""
	wight: []
	req = {}
}

3xxx5xxxSAPIspecificissues = {
	name: "3xxx-5xxx SAPI-specific issues"
	nameType: ""
	wight: []
	req = {}
}

6XXXSavingsIssues = {
	name: "6XXX - Savings Issues"
	nameType: ""
	wight: []
	req = {}
}

70xxFutures = {
	name: "70xx - Futures"
	nameType: ""
	wight: []
	req = {}
}

20xxxFuturesSpotAlgo = {
	name: "20xxx - Futures/Spot Algo"
	nameType: ""
	wight: []
	req = {}
}

Filterfailures = {
	name: "Filter failures"
	nameType: ""
	wight: []
	req = {}
}

10xxxCryptoLoans = {
	name: "10xxx - Crypto Loans"
	nameType: ""
	wight: []
	req = {}
}

13xxxBLVT = {
	name: "13xxx - BLVT"
	nameType: ""
	wight: []
	req = {}
}

12xxxLiquidSwap = {
	name: "12xxx - Liquid Swap"
	nameType: ""
	wight: []
	req = {}
}

18xxxBinanceCode = {
	name: "18xxx - Binance Code"
	nameType: ""
	wight: []
	req = {}
}

21xxxPortfolioMarginAccount = {
	name: "21xxx - Portfolio Margin Account"
	nameType: ""
	wight: []
	req = {}
}

OrderRejectionIssues = {
	name: "Order Rejection Issues"
	nameType: ""
	wight: []
	req = {}
}

ErrorsregardingPOSTapiv3ordercancelReplace = {
	name: "Errors regarding POST /api/v3/order/cancelReplace"
	nameType: ""
	wight: []
	req = {}
}

RequestParameters = {
	name: "Request Parameters"
	nameType: ""
	wight: []
	req = {}
}

